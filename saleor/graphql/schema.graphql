schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  """list of plants based on material code"""
  getPlantsByMatCode(materialCode: String!): [PlantResponse]

  """Search suggestion for material"""
  searchSuggestionMaterial(
    filter: MaterialSearchFilterInput
    saleOrg: String!
    distributionChannel: String!
    soldTo: String

    """search by field"""
    searchBy: SearchMaterialBy!

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): MaterialSearchSuggestionCountableConnection
  pmtMatSearch(filter: PmtMatSearchInput): [PmtMatSearch]

  """Return logged in user sales and partner data"""
  getSalesData(
    saleOrg: String

    """Distribution channel type"""
    distributionChannelType: DistributionChannelType!
  ): SalesDataResponse

  """Look up sold tos"""
  searchSuggestionSoldTosCip(
    filter: DomesticSoldToFilterInput
    saleOrg: String
    distributionChannel: String
    division: String
    oneTimeCustomer: Boolean = false

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): DomesticSoldToCountableConnection

  """fetch transportation zone"""
  transportation(countryCode: String): [TempTransportation]

  """fetch all available country"""
  getCountryMasterData: [TempCountryMaster]

  """query to fetch order details"""
  getOrderData(
    """order_id of order"""
    orderId: String!
  ): CipTempOrder
  previewDomesticOrder(
    """ID of order"""
    id: ID!
  ): CipPreviewOrderResponse

  """Fetch sold to data"""
  soldToHeaderInfoCip(soldTo: String, saleOrg: String, distributionChannel: String, division: String): SoldToHeaderInfoType

  """Fetch ship to data"""
  shipToUnloadingPoint(shipTo: String): UnloadingPointForShipTo

  """Look up domestic ship to"""
  searchSuggestionShipTo(
    filter: CipHeaderShipTosFilterInput
    soldTo: String
    saleOrg: String
    distributionChannel: String
    division: String

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): SoldToPartnerAddressMasterCountableConnection

  """
  query for returning order data from es26 based on so_no in change order
  """
  orderViewData(
    """SO No. of order"""
    soNo: String!
  ): CipOrderViewData
  getOrderEmailToAndCcForNotRef(soldToCode: [String], saleOrg: [String], soNo: [String]): OrderEmailRecipient
  getEmailToAndCcByBuAndSoldTo(soldToCode: String, saleOrg: String, bu: String, saleOrgList: [String]): EmailPendingOrder

  """List of order types for sale order page"""
  listOrderTypes: [OrderTypeResponse]

  """Look up customer material sold tos"""
  searchSuggestionSoldTosCustMat(
    filter: DomesticSoldToFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): DomesticSoldToCountableConnection

  """query to fetch sale org and distribution channel by sold to"""
  getSaleOrgAndDistChannelBySoldTo(soldTo: String!): GetSaleOrgDistChannelBySoldToRes

  """ Requires one of the following permissions: AUTHENTICATED_USER."""
  cartProductItems(soldToCode: String!, contractCode: String!): [ContractCheckoutLine]
  getStockOnHandReport(input: GetOnHandReportInput!): StockOnHandReport
  deliverySoldTo(
    filter: DomesticSoldToFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): DomesticSoldToCountableConnection
  deliveryMaterialCodeDescription(
    filter: MaterialCodeDescriptionFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): MaterialCodeDescriptionCountableConnection
  deliverySalesOrganization: [SalesOrganization]
  contractUnloadingPoint(soldToCode: String!): [CustomerUnloadingPoint]
  customerLmsReport(filter: CustomerLmsReportInput): [LmsReportCustomer]
  routes(
    filter: RouteFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): RouteCountTableConnection
  dropdownListMaterialGroup1: [MaterialSaleMaster]

  """Search for sales order part"""
  reportListOfSalesOrder(
    filter: SalesOrderFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ReportListOfSalesOrderCountableConnection

  """Search for sales order part"""
  reportListOfSalesOrderDownload(
    filter: SalesOrderFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ReportListOfSalesOrderCountableConnection
  downloadReportSaleOrder: String

  """List of drop down require attention flag"""
  listRequireAttentionFlag: [RequireAttentionFlag]

  """List of drop down source of App"""
  listSourceOfApp: [SourceOfApp]
  dropDownListOrderType: [ExportOrder]
  dropDownMaterialPricingGroup: [RequireAttentionItems]

  """Suggestion search for create by"""
  suggestionSearchCreateBySaleOrder(
    filter: SuggestionSearchUserByNameFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): CreateByCountableConnection
  suggestionSearchMaterialGradeGram(
    filter: SuggestionSearchMaterialGradeGramFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): MaterialVariantMasterCountTableConnection

  """Search for sold to"""
  suggestionSearchSoldToReportOrderPending(
    filter: ReportOrderPendingSoldToFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ReportOrderPendingSoldToCountTableConnection
  suggestionSearchSalesOrganizationReportOrderPending: [SalesOrganization]

  """Search for ship to"""
  suggestionSearchShipToReportOrderPending(shipToSearch: String, soldToCode: [String]): [ReportOrderPendingShipToItems]
  suggestionSearchMaterialNoGradeGramReportOrderPending(
    """Suggestion search for material grade grams"""
    filter: SuggestionSearchMaterialGradeGramFilterInput

    """material/grade-gram"""
    materialGradeGram: String

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): MaterialVariantMasterCountTableConnection
  listOfSaleOrderSap(filter: SAPListOfSaleOrderInput): [SAPListOfSaleOrder]
  listOfSaleOrderPendingSap(filter: SAPListOfSaleOrderPendingInput): [SAPListOfSaleOrderPending]
  listOfSaleOrderAndExcel(filter: SAPListOfSaleOrderInput): SAPListOfSaleOrderAndExcel
  downloadListOfSaleOrderExcel(filter: SAPListOfSaleOrderInput): SAPListOfSaleOrderAndExcel

  """Can show atp ctp popup."""
  showAtpCtpPopup(
    """List of order line ids"""
    lineIds: [ID]
  ): ShowATPCTPPopup
  incoterms1: [Incoterms1Master]
  customerGroup1: [CustomerGroup1Master]
  customerGroup2: [CustomerGroup2Master]
  customerGroup3: [CustomerGroup3Master]
  customerGroup4: [CustomerGroup4Master]

  """List of po upload customer settings"""
  poUploadCustomerSettings(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): PoUploadCustomerSettingsCountableConnection
  poUploadSuggestionSearchSoldTo(
    filter: SoldToMasterFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): SoldToMasterCountableConnection

  """List of failed po upload file."""
  failedFiles(
    sortBy: POUploadFileLogSorterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): POUploadFileLogCountableConnection

  """query scg sold to by id"""
  scgSoldTo(
    """ID of sold to"""
    id: ID!
  ): SoldToMaster
  scgSoldTos(
    filter: ScgSoldTosFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): SoldToMasterCountableConnection
  suggestionSearchMaterial(
    """Distribution channel type"""
    distributionChannelType: DistributionChannelType!
    filter: SuggestionMaterialFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): TempProductCountableConnection
  alternativeMaterialsOs(
    filter: AlterMaterialFilterInput
    sortBy: AlternativeMaterialOsInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): AlternativeMaterialOsCountableConnection

  """log change material"""
  alternatedMaterials(
    filter: AlternatedMaterialFilterInput
    sortBy: AlternatedMaterialSortInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): AlternatedMaterialCountableConnection
  materialAlter(
    """Distribution channel type"""
    distributionChannelType: DistributionChannelType!
    filter: TempProductFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): TempProductCountableConnection
  suggestionSearchUserByName(
    filter: SuggestionSearchUserByNameFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): UserCountableConnection

  """Look up alternative material"""
  alternativeMaterial(
    """ID of alternative material"""
    id: ID!
  ): AlternativeMaterial

  """List alternative materials."""
  alternativeMaterials(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): AlternativeMaterialCountableConnection
  filterRequireAttentionSoldTo(
    filter: RequireAttentionSoldToFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): RequireAttentionSoldToCountTableConnection
  filterRequireAttentionShipTo(
    filter: RequireAttentionShipToFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): RequireAttentionItemsCountTableConnection
  filterRequireAttentionSaleEmployee(
    filter: RequireAttentionSaleEmployeeFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): RequireAttentionSaleEmployeeCountTableConnection
  filterRequireAttentionMaterialGroup: [ScgpMaterialGroup]
  filterRequireAttentionSalesOrganization: [SalesOrganization]
  filterRequireAttentionBusinessUnit: [BusinessUnit]
  filterRequireAttentionSalesGroup: [SalesGroup]
  filterRequireAttentionSalesOrganizationByBu(
    filter: RequireAttentionSalesOrganizationFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): RequireAttentionSalesOrganizationCountTableConnection
  filterRequireAttentionSalesGroupBySalesOrganization(
    filter: RequireAttentionSalesGroupFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): RequireAttentionSalesGroupCountTableConnection
  filterRequireAttentionMaterial(
    """Distribution channel type"""
    distributionChannelType: DistributionChannelType!
    filter: RequireAttentionMaterialFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): MaterialMasterCountTableConnection
  filterRequireAttentionMaterialGradeGram(
    filter: RequireAttentionMaterialGradeGramFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): RequireAttentionMaterialGradeGramCountTableConnection
  requireAttentionItemStatus: [RequireAttentionEnums]
  requireAttentionType: [RequireAttentionEnums]
  requireAttentionInquiryMethodCode: [RequireAttentionEnums]
  requireAttentionTypeOfDelivery: [RequireAttentionEnums]
  requireAttentionSplitOrderItemPartialDelivery: [RequireAttentionEnums]
  requireAttentionConsignment: [RequireAttentionEnums]
  requireAttentionPlant(
    filter: RequireAttentionPlantFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): RequireAttentionPlantCountTableConnection

  """List of require attention items."""
  requireAttentionItems(
    role: String!

    """Sort require attention items."""
    sortBy: RequireAttentionItemsSortingInput

    """Filtering options for require attention items."""
    filter: RequireAttentionItemsFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): RequireAttentionItemsViewCountTableConnection

  """Look up scgp_require_attention_items by IDs"""
  requireAttentionItemsByIds(
    """Sort require attention items."""
    sortBy: RequireAttentionItemsSortingInput

    """ID of an scgp_require_attention_items"""
    ids: [ID]

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): RequireAttentionItemsViewCountTableConnection

  """Look up scgp_require_attention_items by IDs"""
  requireAttentionEditItemsByIds(
    """Sort require attention items."""
    sortBy: RequireAttentionItemsSortingInput

    """ID of an scgp_require_attention_items"""
    ids: [ID]

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): RequireAttentionItemsViewCountTableConnection
  suggestionSearchForMaterialGradeGram(
    """Suggestion search for material grade grams"""
    filter: SuggestionSearchMaterialGradeGramFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): MaterialVariantMasterCountTableConnection

  """Look up a parent group by ID"""
  parentGroup(
    """ID of parent group"""
    id: ID!
  ): ParentGroup

  """List of parent groups"""
  parentGroups(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ParentGroupCountableConnection

  """List of scgp_user"""
  scgpUsers(
    filter: ScgpUsersFilterInput

    """Sort scgp users."""
    sortBy: ScgpUserSortingInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ScgpUserCountableConnection

  """query 1 user detail"""
  scgpUser(
    """ID of user"""
    id: ID!
  ): ScgpUser
  filterSoldToScgCheckout(
    filter: UserManagementSoldToFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): SoldToMasterCountableConnection
  scgpMe: ScgpUser
  scgpGdcData(
    """AD USER."""
    adUser: String!
  ): GDCUserData
  filterUserManagementSaleOrgByBu(
    filter: UserManagementSaleOrgFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): UserManagementSaleOrgCountTableConnection
  filterUserManagementSaleGroupBySaleOrg(
    filter: UserManagementSalesGroupFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): UserManagementSalesGroupCountTableConnection
  filterUserManagementSaleOfficeBySaleOrg(
    filter: UserManagementSaleOfficeFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): UserManagementSaleOfficeCountTableConnection

  """List of parent groups, roles and menu functions"""
  getRolesAndMenuFunctions(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ParentGroupRoleMenuCountableConnection
  exportCarts: ExportCartExtended
  exportCart(
    """ID of ExportCart"""
    id: ID
  ): ExportCartDetail
  exportCartsSearch: ExportCartSearchExtended

  """Look up export sold tos"""
  exportSoldTos(
    filter: ExportSoldToFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ExportSoldToCountableConnection

  """Look up a export pi by ID"""
  exportPi(
    """ID of export pi"""
    id: ID!
  ): ExportPI

  """Look up export pis"""
  exportPis(
    filter: ExportPIFilterInput
    sortBy: ExportPIsSortingInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ExportPICountableConnection
  exportOrder(orderId: ID): ExportOrderExtended
  exportOrderWithAllItems(orderId: ID): ExportOrderWithAllOrderLine
  exportOrderWithAllItemsBySoNo(soNo: String): ExportOrderAllItemBySoNo

  """List of export orders."""
  exportOrders(
    """Sort export orders."""
    sortBy: ExportOrderSortingInput

    """Filtering options for export orders."""
    filter: ExportOrderFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ExportOrderCountableConnection

  """List of export orders."""
  exportOrdersDraft(
    """Sort export orders."""
    sortBy: ExportOrderSortingInput

    """Filtering options for export orders."""
    filter: ExportOrderFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ExportOrderCountableConnection
  filterShipToExportOrder(
    filter: ExportShipToFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ExportOrderExtendedCountTableConnection
  filterSoldToExportOrder(
    filter: ExportSoldToFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ExportSoldToCountableConnection
  filterCompaniesExportOrderByBusinessUnit(
    filter: ExportCompaniesFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): SalesOrganizationCountTableConnection
  filterCompaniesExportOrderByUserLogin: [SalesOrganization]
  filterBusinessExportOrder: [BusinessUnit]
  scgpOrderStatus: [StatusTypes]
  getCreditLimit(input: CreditLimitInput): CreditLimit

  """look up scgp_contract_product"""
  customerContractProduct(contractId: ID!, productId: ID!, contractMaterialId: ID!): CustomerContractProduct

  """Look up a customer cart by ID"""
  customerCart(
    """ID of a customer cart"""
    id: ID!
  ): CustomerCart

  """Look up a customer cart by ID"""
  customerCartProductVariant(
    """ID of a customer cart"""
    id: ID!
  ): CustomerCartProductVariant

  """Customer cart details"""
  customerCarts(
    """ID of an sold to"""
    soldToId: ID!
    sortBy: CustomerCartsSortingInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): CustomerCartCountableConnection

  """return total contracts and total products in customer cart"""
  customerCartTotals(
    """ID of an sold to"""
    soldToId: ID!
  ): CustomerCartTotals

  """look up customer contracts by customer ID"""
  scgpCustomerContracts(
    """Number of contract"""
    contractNo: [String]

    """ID of an sold to"""
    soldToId: ID!
    filter: CustomerContractFilterInput
    sortBy: CustomerContractsSortingInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): CustomerContractCountableConnection

  """look up scgp_customer contract by ID"""
  customerCheckoutContract(
    """ID of the contract"""
    id: ID!
  ): CustomerContract

  """look up scgp_customer contract by ID"""
  customerContractDetail(
    """ID of the contract"""
    id: ID!
  ): CustomerContract

  """look up scgp_customer contract by ID"""
  scgpCustomerContract(
    """ID of the contract"""
    id: ID!
  ): CustomerContract
  customerOrder(orderId: ID): CustomerOrderExtended
  previewCustomerOrder(
    """ID of order"""
    id: ID!
  ): PreviewOrderLines
  filterMaterialCodeNameCustomerOrder(
    """Distribution channel type"""
    distributionChannelType: DistributionChannelType!
    filter: CustomerMaterialCodeNameFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): CustomerMaterialCodeNameCountTableConnection
  filterCustomerBusinessUnit: [CustomerBusinessUnit]
  filterCustomerCompanyByBu(
    filter: CustomerCompanyFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): CustomerCompanyCountTableConnection
  filterCustomerSalesGroupByCompany(
    filter: CustomerSalesGroupFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): CustomerSalesGroupCountTableConnection

  """List of customer orders."""
  customerOrders(
    """Sort customer orders."""
    sortBy: CustomerOrderSortingInput

    """Filtering options for customer orders"""
    filter: CustomerOrderFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): CustomerOrderCountTableConnection
  customerOrderConfirmation(
    """Sort order confirmation."""
    sortBy: CustomerOrderConfirmationSortingInput

    """Filtering options for order confirmation"""
    filter: CustomerOrderConfirmationFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): CustomerOrderCountTableConnection
  filterCustomerOrderConfirmationCompany: [CustomerCompany]

  """Customer orders from SAP."""
  customerOrdersFromSap(input: SAPOrderRequest): [SAPOrderMapping]

  """query order by SO No. order"""
  contractOrder(
    """SO No. of order"""
    soNo: String!
  ): TempOrder

  """query order by SO No. order"""
  changeOrder(
    """SO No. of order"""
    soNo: String!
  ): ChangeOrder

  """Look up order_drafts"""
  orderDrafts(
    sortBy: OrderDraftSorterInput
    filter: ScgOrderDraftFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): TempOrderCountableConnection
  filterSoldToDomesticOrder(
    filter: DomesticSoldToFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): DomesticSoldToCountableConnection
  filterMaterialCodeNameDomesticOrder(
    """Distribution channel type"""
    distributionChannelType: DistributionChannelType!
    filter: DomesticMaterialCodeNameFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): DomesticMaterialCodeNameCountableConnection
  filterSaleEmployeeDomesticOrder(
    filter: DomesticSaleEmployeeFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): DomesticSaleEmployeeCountableConnection
  filterDomesticBusinessUnit: [BusinessUnit]
  filterDomesticCompanyByBu(
    filter: DomesticCompanyFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): DomesticCompanyCountTableConnection
  filterDomesticSalesGroupByCompany(
    filter: DomesticSalesGroupFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): DomesticSalesGroupCountTableConnection
  domesticOrderType(before: String, after: String, first: Int, last: Int): TempOrderCountableConnection

  """List of domestic orders."""
  domesticOrders(
    """Sort domestic orders."""
    sortBy: DomesticOrderSortingInput

    """Filtering options for domestic orders."""
    filter: DomesticOrderFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): TempOrderCountableConnection
  previewDomesticPageOrder(
    """ID of order"""
    id: ID!
  ): PreviewDomesticOrderLines
  orderConfirmationStatus: [OrderEnums]
  domesticOrderConfirmation(
    """Sort order confirmation."""
    sortBy: DomesticOrderConfirmationSortingInput

    """Filtering options for order confirmation"""
    filter: DomesticOrderConfirmationFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): TempOrderCountableConnection
  filterDomesticOrderConfirmationCompany: [SapMigrationCompany]
  getOrderEmailToAndCc(soldToCode: [String], saleOrg: [String], soNo: [String], bu: String): OrderEmailRecipient
  getEmailToAndCcBySoldTo(soldToCode: String!, saleOrg: String, productGroup: [String], saleOrgList: [String], bu: String): EmailPendingOrder
  getSalesOrgBySoldTo(soldToCode: String): [salesOrgSoldTo]
  listLmsReportCsAdmin(filter: LMSReportCSAdminInput): [LMSReportCSAdmin]
  getGpsTracking(gpsTracking: String!): GPSTracking
  getDpHyperlink(dpNo: String!): DPHyperLink
  listOrderConfirmationSap(filter: SAPOrderConfirmationInput): [SAPOrderConfirmation]

  """Get LMS Report CS/Customer"""
  getLmsReportCsCustomer(filter: LMSReportCSCustomerInput): [LMSReportCSCustomer]

  """Get LMS GPS  Report CS/Customer"""
  getGpsReportCsCustomer(filter: GPSReportCSCustomerInput): [GPSReportCSCustomer]
  sapChangeOrder(filter: SAPChangeOrderInput): [SAPChangeOrder]
  suggestionSoldToChangeOrderSearch(
    filter: ChangeOrderSoldToFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): SoldToPartnerAddressMasterCountableConnection
  suggestionShipToChangeOrderSearch(
    filter: ChangeOrderShipToFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): SoldToPartnerAddressMasterCountableConnection
  salesGroups(
    """Code of sale organization"""
    saleOrg: String
  ): [SalesGroup]
  salesOffices(
    """Code of sale organization"""
    saleOrg: String
  ): [SalesOffice]
  scgDivisions: [ScgDivision]
  distributionChannels: [DistributionChannel]
  salesOrganizations: [SalesOrganization]
  distributionChannelsDomestic: [DistributionChannel]
  distributionChannelsExport: [DistributionChannel]

  """look up scg_contract_product"""
  contractProduct(contractId: ID!, productId: ID!, contractMaterialId: ID!, soNo: ID): TempContractProduct

  """Look up a checkout by ID"""
  contractCheckout(
    """ID of business unit"""
    id: ID!
  ): ContractCheckout

  """Look up checkouts"""
  contractCheckouts(
    sortBy: ContractCheckoutsSortingInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ContractCheckoutCountableConnection

  """Look up checkout"""
  totalContractCheckouts: ContractCheckoutTotal

  """Lookup checkout line selected"""
  checkoutLinesSelected(
    """ID of checkout"""
    id: ID!

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ContractCheckoutLineCountableConnection

  """Look up a checkout by ID"""
  contractCheckoutProductVariant(
    """ID of business unit"""
    id: ID!
  ): ContractCheckoutProductVariant

  """Look up an business unit by ID."""
  businessUnit(
    """ID of business unit"""
    id: ID!
  ): BusinessUnit

  """List of business units."""
  businessUnits(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): BusinessUnitCountableConnection

  """Look up scg_contract by scg_customer ID"""
  contracts(
    """Code of sold to"""
    soldToCode: String!

    """Code of contract"""
    contractNo: String
    filter: TempContractFilterInput
    sortBy: ContractsSortingInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): TempContractCountableConnection

  """look up scg_contract"""
  contract(contractId: ID, soNo: String): TempContract
  materialSearchSuggestion(
    """Distribution channel type"""
    distributionChannelType: DistributionChannelType!
    filter: MaterialMasterFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): TempProductCountableConnection
  getCustomerBlock(input: CustomerBlockInput): CustomerBlockResponse

  """Look up domestic sold tos"""
  searchSuggestionDomesticSoldTos(
    filter: DomesticSoldToFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): DomesticSoldToCountableConnection

  """Look up domestic ship to"""
  searchSuggestionDomesticShipTos(
    filter: PendingOrderReportShipTosFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): SoldToPartnerAddressMasterCountableConnection

  """Look up scg_contract by scg_customer ID"""
  customerContracts(
    """ID of an scg_customer"""
    customerId: Int!
    filter: ContractFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ContractCountableConnection

  """Look up scg_contract by contract ID"""
  customerContract(
    """ID of an contract"""
    id: ID!
  ): Contract

  """Look up order by customer"""
  ordersByCustomerId(
    """ID of an customer"""
    customerId: ID!

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): OrderByCustomerCountableConnection

  """Look up a material by ID"""
  material(
    """ID of material"""
    id: ID
  ): Material

  """Look up list material"""
  materials(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): MaterialCountableConnection

  """Look up material by product ID"""
  materialsByProduct(
    """ID of product"""
    productId: ID

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ProductVariantMaterialCountableConnection
  companies: [Company]
  divisions: [Division]
  offices: [Office]
  saleGroups: [AuthGroup]

  """look up customer by ID"""
  customer(
    """ID of customer"""
    id: ID!
  ): ScgUser

  """look up contracted customer by ID"""
  contractedCustomer(
    """ID of contracted customer"""
    id: ID!
  ): ScgUser

  """
  Look up a webhook by ID. Requires one of the following permissions: AppPermission.MANAGE_APPS, AuthorizationFilters.OWNER
  """
  webhook(
    """ID of the webhook."""
    id: ID!
  ): Webhook

  """
  List of all available webhook events. Requires one of the following permissions: MANAGE_APPS.
  """
  webhookEvents: [WebhookEvent!] @deprecated(reason: "This field will be removed in Saleor 4.0. Use `WebhookEventTypeAsyncEnum` and `WebhookEventTypeSyncEnum` to get available event types.")

  """
  Retrieve a sample payload for a given webhook event based on real data. It can be useful for some integrations where sample payload is required.
  """
  webhookSamplePayload(
    """Name of the requested event type."""
    eventType: WebhookSampleEventTypeEnum!
  ): JSONString

  """
  Look up a warehouse by ID. Requires one of the following permissions: MANAGE_PRODUCTS, MANAGE_ORDERS, MANAGE_SHIPPING.
  """
  warehouse(
    """ID of an warehouse"""
    id: ID!
  ): Warehouse

  """
  List of warehouses. Requires one of the following permissions: MANAGE_PRODUCTS, MANAGE_ORDERS, MANAGE_SHIPPING.
  """
  warehouses(
    filter: WarehouseFilterInput
    sortBy: WarehouseSortingInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): WarehouseCountableConnection

  """
  Returns a list of all translatable items of a given kind. Requires one of the following permissions: MANAGE_TRANSLATIONS.
  """
  translations(
    """Kind of objects to retrieve."""
    kind: TranslatableKinds!

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): TranslatableItemConnection

  """ Requires one of the following permissions: MANAGE_TRANSLATIONS."""
  translation(
    """ID of the object to retrieve."""
    id: ID!

    """Kind of the object to retrieve."""
    kind: TranslatableKinds!
  ): TranslatableItem

  """
  Look up a stock by ID Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  stock(
    """ID of an warehouse"""
    id: ID!
  ): Stock

  """
  List of stocks. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  stocks(
    filter: StockFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): StockCountableConnection

  """Return information about the shop."""
  shop: Shop!

  """
  Order related settings from site settings. Requires one of the following permissions: MANAGE_ORDERS.
  """
  orderSettings: OrderSettings

  """
  Gift card related settings from site settings. Requires one of the following permissions: MANAGE_GIFT_CARD.
  """
  giftCardSettings: GiftCardSettings!

  """
  Look up a shipping zone by ID. Requires one of the following permissions: MANAGE_SHIPPING.
  """
  shippingZone(
    """ID of the shipping zone."""
    id: ID!

    """Slug of a channel for which the data should be returned."""
    channel: String
  ): ShippingZone

  """
  List of the shop's shipping zones. Requires one of the following permissions: MANAGE_SHIPPING.
  """
  shippingZones(
    """Filtering options for shipping zones."""
    filter: ShippingZoneFilterInput

    """Slug of a channel for which the data should be returned."""
    channel: String

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ShippingZoneCountableConnection

  """
  Look up digital content by ID. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  digitalContent(
    """ID of the digital content."""
    id: ID!
  ): DigitalContent

  """
  List of digital content. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  digitalContents(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): DigitalContentCountableConnection

  """List of the shop's categories."""
  categories(
    """Filtering options for categories."""
    filter: CategoryFilterInput

    """Sort categories."""
    sortBy: CategorySortingInput

    """Filter categories by the nesting level in the category tree."""
    level: Int

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): CategoryCountableConnection

  """Look up a category by ID or slug."""
  category(
    """ID of the category."""
    id: ID

    """Slug of the category"""
    slug: String
  ): Category

  """
  Look up a collection by ID. Requires one of the following permissions to include the unpublished items: MANAGE_ORDERS, MANAGE_DISCOUNTS, MANAGE_PRODUCTS.
  """
  collection(
    """ID of the collection."""
    id: ID

    """Slug of the category"""
    slug: String

    """Slug of a channel for which the data should be returned."""
    channel: String
  ): Collection

  """
  List of the shop's collections. Requires one of the following permissions to include the unpublished items: MANAGE_ORDERS, MANAGE_DISCOUNTS, MANAGE_PRODUCTS.
  """
  collections(
    """Filtering options for collections."""
    filter: CollectionFilterInput

    """Sort collections."""
    sortBy: CollectionSortingInput

    """Slug of a channel for which the data should be returned."""
    channel: String

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): CollectionCountableConnection

  """
  Look up a product by ID. Requires one of the following permissions to include the unpublished items: MANAGE_ORDERS, MANAGE_DISCOUNTS, MANAGE_PRODUCTS.
  """
  product(
    """ID of the product."""
    id: ID

    """Slug of the product."""
    slug: String

    """Slug of a channel for which the data should be returned."""
    channel: String
  ): Product

  """
  List of the shop's products. Requires one of the following permissions to include the unpublished items: MANAGE_ORDERS, MANAGE_DISCOUNTS, MANAGE_PRODUCTS.
  """
  products(
    """Filtering options for products."""
    filter: ProductFilterInput

    """Sort products."""
    sortBy: ProductOrder

    """Slug of a channel for which the data should be returned."""
    channel: String

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ProductCountableConnection

  """Look up a product type by ID."""
  productType(
    """ID of the product type."""
    id: ID!
  ): ProductType

  """List of the shop's product types."""
  productTypes(
    """Filtering options for product types."""
    filter: ProductTypeFilterInput

    """Sort product types."""
    sortBy: ProductTypeSortingInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ProductTypeCountableConnection

  """
  Look up a product variant by ID or SKU. Requires one of the following permissions to include the unpublished items: MANAGE_ORDERS, MANAGE_DISCOUNTS, MANAGE_PRODUCTS.
  """
  productVariant(
    """ID of the product variant."""
    id: ID

    """Sku of the product variant."""
    sku: String

    """Slug of a channel for which the data should be returned."""
    channel: String
  ): ProductVariant

  """
  List of product variants. Requires one of the following permissions to include the unpublished items: MANAGE_ORDERS, MANAGE_DISCOUNTS, MANAGE_PRODUCTS.
  """
  productVariants(
    """Filter product variants by given IDs."""
    ids: [ID!]

    """Slug of a channel for which the data should be returned."""
    channel: String

    """Filtering options for product variant."""
    filter: ProductVariantFilterInput

    """Sort products variants."""
    sortBy: ProductVariantSortingInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ProductVariantCountableConnection

  """
  List of top selling products. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  reportProductSales(
    """Span of time."""
    period: ReportingPeriod!

    """Slug of a channel for which the data should be returned."""
    channel: String!

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ProductVariantCountableConnection

  """
  Look up a payment by ID. Requires one of the following permissions: MANAGE_ORDERS.
  """
  payment(
    """ID of the payment."""
    id: ID!
  ): Payment

  """
  List of payments. Requires one of the following permissions: MANAGE_ORDERS.
  """
  payments(
    """Filtering options for payments."""
    filter: PaymentFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): PaymentCountableConnection

  """Look up a page by ID or slug."""
  page(
    """ID of the page."""
    id: ID

    """The slug of the page."""
    slug: String
  ): Page

  """List of the shop's pages."""
  pages(
    """Sort pages."""
    sortBy: PageSortingInput

    """Filtering options for pages."""
    filter: PageFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): PageCountableConnection

  """Look up a page type by ID."""
  pageType(
    """ID of the page type."""
    id: ID!
  ): PageType

  """List of the page types."""
  pageTypes(
    """Sort page types."""
    sortBy: PageTypeSortingInput

    """Filtering options for page types."""
    filter: PageTypeFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): PageTypeCountableConnection

  """
  List of activity events to display on homepage (at the moment it only contains order-events). Requires one of the following permissions: MANAGE_ORDERS.
  """
  homepageEvents(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): OrderEventCountableConnection

  """
  Look up an order by ID. Requires one of the following permissions: MANAGE_ORDERS.
  """
  order(
    """ID of an order."""
    id: ID!
  ): Order

  """
  List of orders. Requires one of the following permissions: MANAGE_ORDERS.
  """
  orders(
    """Sort orders."""
    sortBy: OrderSortingInput

    """Filtering options for orders."""
    filter: OrderFilterInput

    """Slug of a channel for which the data should be returned."""
    channel: String

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): OrderCountableConnection

  """
  List of draft orders. Requires one of the following permissions: MANAGE_ORDERS.
  """
  draftOrders(
    """Sort draft orders."""
    sortBy: OrderSortingInput

    """Filtering options for draft orders."""
    filter: OrderDraftFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): OrderCountableConnection

  """
  Return the total sales amount from a specific period. Requires one of the following permissions: MANAGE_ORDERS.
  """
  ordersTotal(
    """A period of time."""
    period: ReportingPeriod

    """Slug of a channel for which the data should be returned."""
    channel: String
  ): TaxedMoney

  """{DEPRECATED_IN_3X_FIELD} Look up an order by token."""
  orderByToken(
    """The order's token."""
    token: UUID!
  ): Order

  """Look up a navigation menu by ID or name."""
  menu(
    """Slug of a channel for which the data should be returned."""
    channel: String

    """ID of the menu."""
    id: ID

    """The menu's name."""
    name: String

    """The menu's slug."""
    slug: String
  ): Menu

  """List of the storefront's menus."""
  menus(
    """Slug of a channel for which the data should be returned."""
    channel: String

    """Sort menus."""
    sortBy: MenuSortingInput

    """Filtering options for menus."""
    filter: MenuFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): MenuCountableConnection

  """Look up a menu item by ID."""
  menuItem(
    """ID of the menu item."""
    id: ID!

    """Slug of a channel for which the data should be returned."""
    channel: String
  ): MenuItem

  """List of the storefronts's menu items."""
  menuItems(
    """Slug of a channel for which the data should be returned."""
    channel: String

    """Sort menus items."""
    sortBy: MenuItemSortingInput

    """Filtering options for menu items."""
    filter: MenuItemFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): MenuItemCountableConnection

  """
  Look up a gift card by ID. Requires one of the following permissions: MANAGE_GIFT_CARD.
  """
  giftCard(
    """ID of the gift card."""
    id: ID!
  ): GiftCard

  """
  List of gift cards. Requires one of the following permissions: MANAGE_GIFT_CARD.
  """
  giftCards(
    """
    Added in Saleor 3.1. Sort gift cards. Note: this feature is in a preview state and can be subject to changes at later point.
    """
    sortBy: GiftCardSortingInput

    """
    Added in Saleor 3.1. Filtering options for gift cards. Note: this feature is in a preview state and can be subject to changes at later point.
    """
    filter: GiftCardFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): GiftCardCountableConnection

  """
  Added in Saleor 3.1. List of gift card currencies. Note: this feature is in a preview state and can be subject to changes at later point. Requires one of the following permissions: MANAGE_GIFT_CARD.
  """
  giftCardCurrencies: [String!]!

  """
  Added in Saleor 3.1. List of gift card tags. Note: this feature is in a preview state and can be subject to changes at later point. Requires one of the following permissions: MANAGE_GIFT_CARD.
  """
  giftCardTags(
    """Filtering options for gift card tags."""
    filter: GiftCardTagFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): GiftCardTagCountableConnection

  """
  Look up a plugin by ID. Requires one of the following permissions: MANAGE_PLUGINS.
  """
  plugin(
    """ID of the plugin."""
    id: ID!
  ): Plugin

  """
  List of plugins. Requires one of the following permissions: MANAGE_PLUGINS.
  """
  plugins(
    """Filtering options for plugins."""
    filter: PluginFilterInput

    """Sort plugins."""
    sortBy: PluginSortingInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): PluginCountableConnection

  """
  Look up a sale by ID. Requires one of the following permissions: MANAGE_DISCOUNTS.
  """
  sale(
    """ID of the sale."""
    id: ID!

    """Slug of a channel for which the data should be returned."""
    channel: String
  ): Sale

  """
  List of the shop's sales. Requires one of the following permissions: MANAGE_DISCOUNTS.
  """
  sales(
    """Filtering options for sales."""
    filter: SaleFilterInput

    """Sort sales."""
    sortBy: SaleSortingInput

    """
    Search sales by name, value or type. 
    
    DEPRECATED: this field will be removed in Saleor 4.0. Use `filter.search` input instead.
    """
    query: String

    """Slug of a channel for which the data should be returned."""
    channel: String

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): SaleCountableConnection

  """
  Look up a voucher by ID. Requires one of the following permissions: MANAGE_DISCOUNTS.
  """
  voucher(
    """ID of the voucher."""
    id: ID!

    """Slug of a channel for which the data should be returned."""
    channel: String
  ): Voucher

  """
  List of the shop's vouchers. Requires one of the following permissions: MANAGE_DISCOUNTS.
  """
  vouchers(
    """Filtering options for vouchers."""
    filter: VoucherFilterInput

    """Sort voucher."""
    sortBy: VoucherSortingInput

    """
    Search vouchers by name or code. 
    
    DEPRECATED: this field will be removed in Saleor 4.0. Use `filter.search` input instead.
    """
    query: String

    """Slug of a channel for which the data should be returned."""
    channel: String

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): VoucherCountableConnection

  """
  Look up a export file by ID. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  exportFile(
    """ID of the export file job."""
    id: ID!
  ): ExportFile

  """
  List of export files. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  exportFiles(
    """Filtering options for export files."""
    filter: ExportFileFilterInput

    """Sort export files."""
    sortBy: ExportFileSortingInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ExportFileCountableConnection

  """List of all tax rates available from tax gateway."""
  taxTypes: [TaxType!]

  """Look up a checkout by token and slug of channel."""
  checkout(
    """The checkout's token."""
    token: UUID
  ): Checkout

  """
  List of checkouts. Requires one of the following permissions: MANAGE_CHECKOUTS.
  """
  checkouts(
    """Added in Saleor 3.1. Sort checkouts."""
    sortBy: CheckoutSortingInput

    """Added in Saleor 3.1. Filtering options for checkouts."""
    filter: CheckoutFilterInput

    """Slug of a channel for which the data should be returned."""
    channel: String

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): CheckoutCountableConnection

  """
  List of checkout lines. Requires one of the following permissions: MANAGE_CHECKOUTS.
  """
  checkoutLines(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): CheckoutLineCountableConnection

  """
  Look up a channel by ID. Requires one of the following permissions: AUTHENTICATED_APP, AUTHENTICATED_STAFF_USER.
  """
  channel(
    """ID of the channel."""
    id: ID
  ): Channel

  """
  List of all channels. Requires one of the following permissions: AUTHENTICATED_APP, AUTHENTICATED_STAFF_USER.
  """
  channels: [Channel!]

  """List of the shop's attributes."""
  attributes(
    """Filtering options for attributes."""
    filter: AttributeFilterInput

    """Sorting options for attributes."""
    sortBy: AttributeSortingInput

    """Slug of a channel for which the data should be returned."""
    channel: String

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): AttributeCountableConnection

  """Look up an attribute by ID."""
  attribute(
    """ID of the attribute."""
    id: ID

    """Slug of the attribute."""
    slug: String
  ): Attribute

  """
  List of all apps installations Requires one of the following permissions: MANAGE_APPS.
  """
  appsInstallations: [AppInstallation!]!

  """
  List of the apps. Requires one of the following permissions: MANAGE_APPS.
  """
  apps(
    """Filtering options for apps."""
    filter: AppFilterInput

    """Sort apps."""
    sortBy: AppSortingInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): AppCountableConnection

  """
  Look up an app by ID. If ID is not provided, return the currently authenticated app. Requires one of the following permissions: AuthorizationFilters.OWNER, AppPermission.MANAGE_APPS.
  """
  app(
    """ID of the app."""
    id: ID
  ): App

  """
  Added in Saleor 3.1. List of all extensions. Note: this feature is in a preview state and can be subject to changes at later point. Requires one of the following permissions: AUTHENTICATED_STAFF_USER, AUTHENTICATED_APP.
  """
  appExtensions(
    """Filtering options for apps extensions."""
    filter: AppExtensionFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): AppExtensionCountableConnection

  """
  Added in Saleor 3.1. Look up an app extension by ID. Note: this feature is in a preview state and can be subject to changes at later point. Requires one of the following permissions: AUTHENTICATED_STAFF_USER, AUTHENTICATED_APP.
  """
  appExtension(
    """ID of the app extension."""
    id: ID!
  ): AppExtension

  """Returns address validation rules."""
  addressValidationRules(
    """Two-letter ISO 3166-1 country code."""
    countryCode: CountryCode!

    """Designation of a region, province or state."""
    countryArea: String

    """City or a town name."""
    city: String

    """Sublocality like a district."""
    cityArea: String
  ): AddressValidationData

  """Look up an address by ID."""
  address(
    """ID of an address."""
    id: ID!
  ): Address

  """
  List of the shop's customers. Requires one of the following permissions: MANAGE_ORDERS, MANAGE_USERS.
  """
  customers(
    """Filtering options for customers."""
    filter: CustomerFilterInput

    """Sort customers."""
    sortBy: UserSortingInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): UserCountableConnection

  """
  List of permission groups. Requires one of the following permissions: MANAGE_STAFF.
  """
  permissionGroups(
    """Filtering options for permission groups."""
    filter: PermissionGroupFilterInput

    """Sort permission groups."""
    sortBy: PermissionGroupSortingInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): GroupCountableConnection

  """
  Look up permission group by ID. Requires one of the following permissions: MANAGE_STAFF.
  """
  permissionGroup(
    """ID of the group."""
    id: ID!
  ): Group

  """Return the currently authenticated user."""
  me: User

  """
  List of the shop's staff users. Requires one of the following permissions: MANAGE_STAFF.
  """
  staffUsers(
    """Filtering options for staff users."""
    filter: StaffUserInput

    """Sort staff users."""
    sortBy: UserSortingInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): UserCountableConnection

  """
  Look up a user by ID or email address. Requires one of the following permissions: MANAGE_STAFF, MANAGE_USERS, MANAGE_ORDERS.
  """
  user(
    """ID of the user."""
    id: ID

    """Email address of the user."""
    email: String
  ): User
  _entities(representations: [_Any]): [_Entity]
  _service: _Service
}

type PlantResponse {
  plantCode: String
  plantName: String
}

type MaterialSearchSuggestionCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [MaterialSearchSuggestionCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

"""
The Relay compliant `PageInfo` type, containing data necessary to paginate this connection.
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type MaterialSearchSuggestionCountableEdge {
  """The item at the end of the edge."""
  node: MaterialSearchSuggestionResponse!

  """A cursor for use in pagination."""
  cursor: String!
}

type MaterialSearchSuggestionResponse {
  id: ID
  materialCode: String
  descriptionEn: String
  soldToMaterialCode: String
  displayText: String
}

input MaterialSearchFilterInput {
  metadata: [MetadataFilter!]
  matCode: String
  custMatCode: String
}

input MetadataFilter {
  """Key of a metadata item."""
  key: String!

  """Value of a metadata item."""
  value: String
}

enum SearchMaterialBy {
  CUST_MAT_CODE
  MAT_CODE
}

type PmtMatSearch {
  stockFg: String
  stockQa: String
  stockWip: String
  hold: String
  custName: String
  custId: String
  custCode: String
  pc: String
  materialNo: String
  partNo: String
  description: String
  saleText: String
  rate: Float
  flute: String
  board: String
  width: Int
  length: Int
  height: Int
  vendorName: String
  netPrice: String
  purTxt: String
  remark: String
  weightBox: Float
  plant: String
  saleOrg: String
  lastUpdate: String
  holdRemark: String
}

input PmtMatSearchInput {
  pc1: String
  pc2: String
  pc3: String
  pc4: String
  pc5: String
  pc6: String
  saleText: String
  description: String
  custId: String
  custName: String
  partNo: String
  matLength: Int
  matWidth: Int
  matHeight: Int
}

"""Sales data based on user login"""
type SalesDataResponse {
  salesOrganization: [SalesOrganization]
  defaultSalesOrganization: SalesOrganization
  distributionChannel: [DistributionChannel]
  division: [ScgDivision]
  defaultOtcSoldTo: SoldToMaster
}

type SalesOrganization {
  """ID of sales_organization"""
  id: ID

  """name of sales_organization"""
  name: String

  """code of sales_organization"""
  code: String
  businessUnit: BusinessUnit
  shortName: String
  fullName: String
  displayText: String
}

type BusinessUnit {
  """ID of business_unit"""
  id: ID

  """name of business_unit"""
  name: String

  """code of business_unit"""
  code: String
  companies: [CheckoutCompany]
}

type CheckoutCompany {
  """ID of company"""
  id: ID

  """Code of company"""
  code: String

  """Name of company"""
  name: String
  businessUnit: BusinessUnit
  users: [User]

  """Short name of company"""
  shortName: String

  """Full name of company"""
  fullName: String
}

"""Represents user data."""
type User implements Node & ObjectWithMetadata {
  id: ID!

  """List of private metadata items. Requires staff permissions to access."""
  privateMetadata: [MetadataItem!]!

  """
  A single key from private metadata. Requires staff permissions to access.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafield(key: String!): String

  """
  Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafields(keys: [String!]): Metadata

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem!]!

  """
  A single key from public metadata.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafield(key: String!): String

  """
  Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafields(keys: [String!]): Metadata
  email: String!
  firstName: String!
  lastName: String!
  isStaff: Boolean!
  isActive: Boolean!
  displayName: String
  isSuperuser: Boolean

  """List of all user's addresses."""
  addresses: [Address!]

  """Returns the last open checkout of this user."""
  checkout: Checkout @deprecated(reason: "This field will be removed in Saleor 4.0. Use the `checkoutTokens` field to fetch the user checkouts.")

  """Returns the checkout UUID's assigned to this user."""
  checkoutTokens(
    """Slug of a channel for which the data should be returned."""
    channel: String
  ): [UUID!]

  """List of the user gift cards."""
  giftCards(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): GiftCardCountableConnection

  """
  A note about the customer. Requires one of the following permissions: MANAGE_USERS, MANAGE_STAFF.
  """
  note: String

  """
  List of user's orders. Requires one of the following permissions: AccountPermissions.MANAGE_STAFF, AuthorizationFilters.OWNER
  """
  orders(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): OrderCountableConnection

  """List of user's permissions."""
  userPermissions: [UserPermission!]

  """List of user's permission groups."""
  permissionGroups: [Group!]

  """List of user's permission groups which user can manage."""
  editableGroups: [Group!]
  avatar(
    """Size of the avatar."""
    size: Int
  ): Image

  """
  List of events associated with the user. Requires one of the following permissions: MANAGE_USERS, MANAGE_STAFF.
  """
  events: [CustomerEvent!]

  """List of stored payment sources."""
  storedPaymentSources(
    """Slug of a channel for which the data should be returned."""
    channel: String
  ): [PaymentSource!]

  """User language code."""
  languageCode: LanguageCodeEnum!
  defaultShippingAddress: Address
  defaultBillingAddress: Address
  lastLogin: DateTime
  dateJoined: DateTime!
  updatedAt: DateTime!
  company: Company
  distributionChannel: Channel
  division: Division
  office: Office
}

"""An object with an ID"""
interface Node {
  """The ID of the object."""
  id: ID!
}

interface ObjectWithMetadata {
  """List of private metadata items. Requires staff permissions to access."""
  privateMetadata: [MetadataItem!]!

  """
  A single key from private metadata. Requires staff permissions to access.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafield(key: String!): String

  """
  Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafields(keys: [String!]): Metadata

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem!]!

  """
  A single key from public metadata.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafield(key: String!): String

  """
  Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafields(keys: [String!]): Metadata
}

type MetadataItem {
  """Key of a metadata item."""
  key: String!

  """Value of a metadata item."""
  value: String!
}

"""
Metadata is a map of key-value pairs, both keys and values are `String`.

Example:
```
{
    "key1": "value1",
    "key2": "value2"
}
```
"""
scalar Metadata

"""Represents user address data."""
type Address implements Node {
  id: ID!
  firstName: String!
  lastName: String!
  companyName: String!
  streetAddress1: String!
  streetAddress2: String!
  city: String!
  cityArea: String!
  postalCode: String!

  """Shop's default country."""
  country: CountryDisplay!
  countryArea: String!
  phone: String

  """Address is user's default shipping address."""
  isDefaultShippingAddress: Boolean

  """Address is user's default billing address."""
  isDefaultBillingAddress: Boolean
}

type CountryDisplay {
  """Country code."""
  code: String!

  """Country name."""
  country: String!

  """Country tax."""
  vat: VAT
}

"""Represents a VAT rate for a country."""
type VAT {
  """Country code."""
  countryCode: String!

  """Standard VAT rate in percent."""
  standardRate: Float

  """Country's VAT rate exceptions for specific types of goods."""
  reducedRates: [ReducedRate!]!
}

"""Represents a reduced VAT rate for a particular type of goods."""
type ReducedRate {
  """Reduced VAT rate in percent."""
  rate: Float!

  """A type of goods."""
  rateType: String!
}

"""Checkout object."""
type Checkout implements Node & ObjectWithMetadata {
  id: ID!

  """List of private metadata items. Requires staff permissions to access."""
  privateMetadata: [MetadataItem!]!

  """
  A single key from private metadata. Requires staff permissions to access.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafield(key: String!): String

  """
  Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafields(keys: [String!]): Metadata

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem!]!

  """
  A single key from public metadata.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafield(key: String!): String

  """
  Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafields(keys: [String!]): Metadata
  created: DateTime!
  lastChange: DateTime!
  user: User
  channel: Channel!
  billingAddress: Address
  shippingAddress: Address
  note: String!
  discount: Money
  discountName: String
  translatedDiscountName: String
  voucherCode: String

  """Shipping methods that can be used with this checkout."""
  availableShippingMethods: [ShippingMethod!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `shippingMethods` instead.")

  """Shipping methods that can be used with this checkout."""
  shippingMethods: [ShippingMethod!]!

  """
  Added in Saleor 3.1. Collection points that can be used for this order. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  availableCollectionPoints: [Warehouse!]!

  """List of available payment gateways."""
  availablePaymentGateways: [PaymentGateway!]!

  """Email of a customer."""
  email: String

  """List of gift cards associated with this checkout."""
  giftCards: [GiftCard!]!

  """Returns True, if checkout requires shipping."""
  isShippingRequired: Boolean!

  """The number of items purchased."""
  quantity: Int!

  """
  Added in Saleor 3.1. Date when oldest stock reservation for this checkout  expires or null if no stock is reserved.
  """
  stockReservationExpires: DateTime

  """
  A list of checkout lines, each containing information about an item in the checkout.
  """
  lines: [CheckoutLine!]!

  """The price of the shipping, with all the taxes included."""
  shippingPrice: TaxedMoney!

  """The shipping method related with checkout."""
  shippingMethod: ShippingMethod @deprecated(reason: "This field will be removed in Saleor 4.0. Use `deliveryMethod` instead.")

  """
  Added in Saleor 3.1. The delivery method selected for this checkout. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  deliveryMethod: DeliveryMethod

  """The price of the checkout before shipping, with taxes included."""
  subtotalPrice: TaxedMoney!

  """The checkout's token."""
  token: UUID!

  """
  The sum of the the checkout line prices, with all the taxes,shipping costs, and discounts included.
  """
  totalPrice: TaxedMoney!

  """Checkout language code."""
  languageCode: LanguageCodeEnum!
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

"""Represents channel."""
type Channel implements Node {
  id: ID!
  name: String!
  isActive: Boolean!
  currencyCode: String!
  slug: String!

  """
  Whether a channel has associated orders. Requires one of the following permissions: MANAGE_CHANNELS.
  """
  hasOrders: Boolean!

  """
  Added in Saleor 3.1. Default country for the channel. Default country can be used in checkout to determine the stock quantities or calculate taxes when the country was not explicitly provided.
  """
  defaultCountry: CountryDisplay!
}

"""Represents amount of money in specific currency."""
type Money {
  """Currency code."""
  currency: String!

  """Amount of money."""
  amount: Float!
}

"""
Shipping methods that can be used as means of shipping for orders and checkouts.
"""
type ShippingMethod implements Node & ObjectWithMetadata {
  """Unique ID of ShippingMethod available for Order."""
  id: ID!

  """List of private metadata items. Requires staff permissions to access."""
  privateMetadata: [MetadataItem!]!

  """
  A single key from private metadata. Requires staff permissions to access.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafield(key: String!): String

  """
  Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafields(keys: [String!]): Metadata

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem!]!

  """
  A single key from public metadata.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafield(key: String!): String

  """
  Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafields(keys: [String!]): Metadata

  """Type of the shipping method."""
  type: ShippingMethodTypeEnum @deprecated(reason: "This field will be removed in Saleor 4.0.")

  """Shipping method name."""
  name: String!

  """Shipping method description (JSON)."""
  description: JSONString

  """Maximum delivery days for this shipping method."""
  maximumDeliveryDays: Int

  """Minimum delivery days for this shipping method."""
  minimumDeliveryDays: Int

  """Maximum order weight for this shipping method."""
  maximumOrderWeight: Weight @deprecated(reason: "This field will be removed in Saleor 4.0.")

  """Minimum order weight for this shipping method."""
  minimumOrderWeight: Weight @deprecated(reason: "This field will be removed in Saleor 4.0.")

  """Returns translated shipping method fields for the given language code."""
  translation(
    """A language code to return the translation for shipping method."""
    languageCode: LanguageCodeEnum!
  ): ShippingMethodTranslation

  """The price of selected shipping method."""
  price: Money!

  """Maximum order price for this shipping method."""
  maximumOrderPrice: Money

  """Minimal order price for this shipping method."""
  minimumOrderPrice: Money

  """Describes if this shipping method is active and can be selected."""
  active: Boolean!

  """Message connected to this shipping method."""
  message: String
}

"""An enumeration."""
enum ShippingMethodTypeEnum {
  PRICE
  WEIGHT
}

scalar JSONString

"""Represents weight value in a specific weight unit."""
type Weight {
  """Weight unit."""
  unit: WeightUnitsEnum!

  """Weight value."""
  value: Float!
}

"""An enumeration."""
enum WeightUnitsEnum {
  G
  LB
  OZ
  KG
  TONNE
}

type ShippingMethodTranslation implements Node {
  id: ID!

  """Translation language."""
  language: LanguageDisplay!
  name: String
  description: JSONString
}

type LanguageDisplay {
  """ISO 639 representation of the language name."""
  code: LanguageCodeEnum!

  """Full name of the language."""
  language: String!
}

"""An enumeration."""
enum LanguageCodeEnum {
  AF
  AF_NA
  AF_ZA
  AGQ
  AGQ_CM
  AK
  AK_GH
  AM
  AM_ET
  AR
  AR_AE
  AR_BH
  AR_DJ
  AR_DZ
  AR_EG
  AR_EH
  AR_ER
  AR_IL
  AR_IQ
  AR_JO
  AR_KM
  AR_KW
  AR_LB
  AR_LY
  AR_MA
  AR_MR
  AR_OM
  AR_PS
  AR_QA
  AR_SA
  AR_SD
  AR_SO
  AR_SS
  AR_SY
  AR_TD
  AR_TN
  AR_YE
  AS
  AS_IN
  ASA
  ASA_TZ
  AST
  AST_ES
  AZ
  AZ_CYRL
  AZ_CYRL_AZ
  AZ_LATN
  AZ_LATN_AZ
  BAS
  BAS_CM
  BE
  BE_BY
  BEM
  BEM_ZM
  BEZ
  BEZ_TZ
  BG
  BG_BG
  BM
  BM_ML
  BN
  BN_BD
  BN_IN
  BO
  BO_CN
  BO_IN
  BR
  BR_FR
  BRX
  BRX_IN
  BS
  BS_CYRL
  BS_CYRL_BA
  BS_LATN
  BS_LATN_BA
  CA
  CA_AD
  CA_ES
  CA_ES_VALENCIA
  CA_FR
  CA_IT
  CCP
  CCP_BD
  CCP_IN
  CE
  CE_RU
  CEB
  CEB_PH
  CGG
  CGG_UG
  CHR
  CHR_US
  CKB
  CKB_IQ
  CKB_IR
  CS
  CS_CZ
  CU
  CU_RU
  CY
  CY_GB
  DA
  DA_DK
  DA_GL
  DAV
  DAV_KE
  DE
  DE_AT
  DE_BE
  DE_CH
  DE_DE
  DE_IT
  DE_LI
  DE_LU
  DJE
  DJE_NE
  DSB
  DSB_DE
  DUA
  DUA_CM
  DYO
  DYO_SN
  DZ
  DZ_BT
  EBU
  EBU_KE
  EE
  EE_GH
  EE_TG
  EL
  EL_CY
  EL_GR
  EN
  EN_AE
  EN_AG
  EN_AI
  EN_AS
  EN_AT
  EN_AU
  EN_BB
  EN_BE
  EN_BI
  EN_BM
  EN_BS
  EN_BW
  EN_BZ
  EN_CA
  EN_CC
  EN_CH
  EN_CK
  EN_CM
  EN_CX
  EN_CY
  EN_DE
  EN_DG
  EN_DK
  EN_DM
  EN_ER
  EN_FI
  EN_FJ
  EN_FK
  EN_FM
  EN_GB
  EN_GD
  EN_GG
  EN_GH
  EN_GI
  EN_GM
  EN_GU
  EN_GY
  EN_HK
  EN_IE
  EN_IL
  EN_IM
  EN_IN
  EN_IO
  EN_JE
  EN_JM
  EN_KE
  EN_KI
  EN_KN
  EN_KY
  EN_LC
  EN_LR
  EN_LS
  EN_MG
  EN_MH
  EN_MO
  EN_MP
  EN_MS
  EN_MT
  EN_MU
  EN_MW
  EN_MY
  EN_NA
  EN_NF
  EN_NG
  EN_NL
  EN_NR
  EN_NU
  EN_NZ
  EN_PG
  EN_PH
  EN_PK
  EN_PN
  EN_PR
  EN_PW
  EN_RW
  EN_SB
  EN_SC
  EN_SD
  EN_SE
  EN_SG
  EN_SH
  EN_SI
  EN_SL
  EN_SS
  EN_SX
  EN_SZ
  EN_TC
  EN_TK
  EN_TO
  EN_TT
  EN_TV
  EN_TZ
  EN_UG
  EN_UM
  EN_US
  EN_VC
  EN_VG
  EN_VI
  EN_VU
  EN_WS
  EN_ZA
  EN_ZM
  EN_ZW
  EO
  ES
  ES_AR
  ES_BO
  ES_BR
  ES_BZ
  ES_CL
  ES_CO
  ES_CR
  ES_CU
  ES_DO
  ES_EA
  ES_EC
  ES_ES
  ES_GQ
  ES_GT
  ES_HN
  ES_IC
  ES_MX
  ES_NI
  ES_PA
  ES_PE
  ES_PH
  ES_PR
  ES_PY
  ES_SV
  ES_US
  ES_UY
  ES_VE
  ET
  ET_EE
  EU
  EU_ES
  EWO
  EWO_CM
  FA
  FA_AF
  FA_IR
  FF
  FF_ADLM
  FF_ADLM_BF
  FF_ADLM_CM
  FF_ADLM_GH
  FF_ADLM_GM
  FF_ADLM_GN
  FF_ADLM_GW
  FF_ADLM_LR
  FF_ADLM_MR
  FF_ADLM_NE
  FF_ADLM_NG
  FF_ADLM_SL
  FF_ADLM_SN
  FF_LATN
  FF_LATN_BF
  FF_LATN_CM
  FF_LATN_GH
  FF_LATN_GM
  FF_LATN_GN
  FF_LATN_GW
  FF_LATN_LR
  FF_LATN_MR
  FF_LATN_NE
  FF_LATN_NG
  FF_LATN_SL
  FF_LATN_SN
  FI
  FI_FI
  FIL
  FIL_PH
  FO
  FO_DK
  FO_FO
  FR
  FR_BE
  FR_BF
  FR_BI
  FR_BJ
  FR_BL
  FR_CA
  FR_CD
  FR_CF
  FR_CG
  FR_CH
  FR_CI
  FR_CM
  FR_DJ
  FR_DZ
  FR_FR
  FR_GA
  FR_GF
  FR_GN
  FR_GP
  FR_GQ
  FR_HT
  FR_KM
  FR_LU
  FR_MA
  FR_MC
  FR_MF
  FR_MG
  FR_ML
  FR_MQ
  FR_MR
  FR_MU
  FR_NC
  FR_NE
  FR_PF
  FR_PM
  FR_RE
  FR_RW
  FR_SC
  FR_SN
  FR_SY
  FR_TD
  FR_TG
  FR_TN
  FR_VU
  FR_WF
  FR_YT
  FUR
  FUR_IT
  FY
  FY_NL
  GA
  GA_GB
  GA_IE
  GD
  GD_GB
  GL
  GL_ES
  GSW
  GSW_CH
  GSW_FR
  GSW_LI
  GU
  GU_IN
  GUZ
  GUZ_KE
  GV
  GV_IM
  HA
  HA_GH
  HA_NE
  HA_NG
  HAW
  HAW_US
  HE
  HE_IL
  HI
  HI_IN
  HR
  HR_BA
  HR_HR
  HSB
  HSB_DE
  HU
  HU_HU
  HY
  HY_AM
  IA
  ID
  ID_ID
  IG
  IG_NG
  II
  II_CN
  IS
  IS_IS
  IT
  IT_CH
  IT_IT
  IT_SM
  IT_VA
  JA
  JA_JP
  JGO
  JGO_CM
  JMC
  JMC_TZ
  JV
  JV_ID
  KA
  KA_GE
  KAB
  KAB_DZ
  KAM
  KAM_KE
  KDE
  KDE_TZ
  KEA
  KEA_CV
  KHQ
  KHQ_ML
  KI
  KI_KE
  KK
  KK_KZ
  KKJ
  KKJ_CM
  KL
  KL_GL
  KLN
  KLN_KE
  KM
  KM_KH
  KN
  KN_IN
  KO
  KO_KP
  KO_KR
  KOK
  KOK_IN
  KS
  KS_ARAB
  KS_ARAB_IN
  KSB
  KSB_TZ
  KSF
  KSF_CM
  KSH
  KSH_DE
  KU
  KU_TR
  KW
  KW_GB
  KY
  KY_KG
  LAG
  LAG_TZ
  LB
  LB_LU
  LG
  LG_UG
  LKT
  LKT_US
  LN
  LN_AO
  LN_CD
  LN_CF
  LN_CG
  LO
  LO_LA
  LRC
  LRC_IQ
  LRC_IR
  LT
  LT_LT
  LU
  LU_CD
  LUO
  LUO_KE
  LUY
  LUY_KE
  LV
  LV_LV
  MAI
  MAI_IN
  MAS
  MAS_KE
  MAS_TZ
  MER
  MER_KE
  MFE
  MFE_MU
  MG
  MG_MG
  MGH
  MGH_MZ
  MGO
  MGO_CM
  MI
  MI_NZ
  MK
  MK_MK
  ML
  ML_IN
  MN
  MN_MN
  MNI
  MNI_BENG
  MNI_BENG_IN
  MR
  MR_IN
  MS
  MS_BN
  MS_ID
  MS_MY
  MS_SG
  MT
  MT_MT
  MUA
  MUA_CM
  MY
  MY_MM
  MZN
  MZN_IR
  NAQ
  NAQ_NA
  NB
  NB_NO
  NB_SJ
  ND
  ND_ZW
  NDS
  NDS_DE
  NDS_NL
  NE
  NE_IN
  NE_NP
  NL
  NL_AW
  NL_BE
  NL_BQ
  NL_CW
  NL_NL
  NL_SR
  NL_SX
  NMG
  NMG_CM
  NN
  NN_NO
  NNH
  NNH_CM
  NUS
  NUS_SS
  NYN
  NYN_UG
  OM
  OM_ET
  OM_KE
  OR
  OR_IN
  OS
  OS_GE
  OS_RU
  PA
  PA_ARAB
  PA_ARAB_PK
  PA_GURU
  PA_GURU_IN
  PCM
  PCM_NG
  PL
  PL_PL
  PRG
  PS
  PS_AF
  PS_PK
  PT
  PT_AO
  PT_BR
  PT_CH
  PT_CV
  PT_GQ
  PT_GW
  PT_LU
  PT_MO
  PT_MZ
  PT_PT
  PT_ST
  PT_TL
  QU
  QU_BO
  QU_EC
  QU_PE
  RM
  RM_CH
  RN
  RN_BI
  RO
  RO_MD
  RO_RO
  ROF
  ROF_TZ
  RU
  RU_BY
  RU_KG
  RU_KZ
  RU_MD
  RU_RU
  RU_UA
  RW
  RW_RW
  RWK
  RWK_TZ
  SAH
  SAH_RU
  SAQ
  SAQ_KE
  SAT
  SAT_OLCK
  SAT_OLCK_IN
  SBP
  SBP_TZ
  SD
  SD_ARAB
  SD_ARAB_PK
  SD_DEVA
  SD_DEVA_IN
  SE
  SE_FI
  SE_NO
  SE_SE
  SEH
  SEH_MZ
  SES
  SES_ML
  SG
  SG_CF
  SHI
  SHI_LATN
  SHI_LATN_MA
  SHI_TFNG
  SHI_TFNG_MA
  SI
  SI_LK
  SK
  SK_SK
  SL
  SL_SI
  SMN
  SMN_FI
  SN
  SN_ZW
  SO
  SO_DJ
  SO_ET
  SO_KE
  SO_SO
  SQ
  SQ_AL
  SQ_MK
  SQ_XK
  SR
  SR_CYRL
  SR_CYRL_BA
  SR_CYRL_ME
  SR_CYRL_RS
  SR_CYRL_XK
  SR_LATN
  SR_LATN_BA
  SR_LATN_ME
  SR_LATN_RS
  SR_LATN_XK
  SU
  SU_LATN
  SU_LATN_ID
  SV
  SV_AX
  SV_FI
  SV_SE
  SW
  SW_CD
  SW_KE
  SW_TZ
  SW_UG
  TA
  TA_IN
  TA_LK
  TA_MY
  TA_SG
  TE
  TE_IN
  TEO
  TEO_KE
  TEO_UG
  TG
  TG_TJ
  TH
  TH_TH
  TI
  TI_ER
  TI_ET
  TK
  TK_TM
  TO
  TO_TO
  TR
  TR_CY
  TR_TR
  TT
  TT_RU
  TWQ
  TWQ_NE
  TZM
  TZM_MA
  UG
  UG_CN
  UK
  UK_UA
  UR
  UR_IN
  UR_PK
  UZ
  UZ_ARAB
  UZ_ARAB_AF
  UZ_CYRL
  UZ_CYRL_UZ
  UZ_LATN
  UZ_LATN_UZ
  VAI
  VAI_LATN
  VAI_LATN_LR
  VAI_VAII
  VAI_VAII_LR
  VI
  VI_VN
  VO
  VUN
  VUN_TZ
  WAE
  WAE_CH
  WO
  WO_SN
  XH
  XH_ZA
  XOG
  XOG_UG
  YAV
  YAV_CM
  YI
  YO
  YO_BJ
  YO_NG
  YUE
  YUE_HANS
  YUE_HANS_CN
  YUE_HANT
  YUE_HANT_HK
  ZGH
  ZGH_MA
  ZH
  ZH_HANS
  ZH_HANS_CN
  ZH_HANS_HK
  ZH_HANS_MO
  ZH_HANS_SG
  ZH_HANT
  ZH_HANT_HK
  ZH_HANT_MO
  ZH_HANT_TW
  ZU
  ZU_ZA
}

"""Represents warehouse."""
type Warehouse implements Node & ObjectWithMetadata {
  id: ID!

  """List of private metadata items. Requires staff permissions to access."""
  privateMetadata: [MetadataItem!]!

  """
  A single key from private metadata. Requires staff permissions to access.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafield(key: String!): String

  """
  Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafields(keys: [String!]): Metadata

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem!]!

  """
  A single key from public metadata.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafield(key: String!): String

  """
  Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafields(keys: [String!]): Metadata
  name: String!
  slug: String!
  email: String!
  isPrivate: Boolean!
  address: Address!

  """Warehouse company name."""
  companyName: String! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `Address.companyName` instead.")

  """
  Added in Saleor 3.1. Click and collect options: local, all or disabled. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  clickAndCollectOption: WarehouseClickAndCollectOptionEnum!
  shippingZones(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ShippingZoneCountableConnection!
}

"""An enumeration."""
enum WarehouseClickAndCollectOptionEnum {
  DISABLED
  LOCAL
  ALL
}

type ShippingZoneCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [ShippingZoneCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type ShippingZoneCountableEdge {
  """The item at the end of the edge."""
  node: ShippingZone!

  """A cursor for use in pagination."""
  cursor: String!
}

"""
Represents a shipping zone in the shop. Zones are the concept used only for grouping shipping methods in the dashboard, and are never exposed to the customers directly.
"""
type ShippingZone implements Node & ObjectWithMetadata {
  id: ID!

  """List of private metadata items. Requires staff permissions to access."""
  privateMetadata: [MetadataItem!]!

  """
  A single key from private metadata. Requires staff permissions to access.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafield(key: String!): String

  """
  Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafields(keys: [String!]): Metadata

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem!]!

  """
  A single key from public metadata.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafield(key: String!): String

  """
  Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafields(keys: [String!]): Metadata
  name: String!
  default: Boolean!

  """Lowest and highest prices for the shipping."""
  priceRange: MoneyRange

  """List of countries available for the method."""
  countries: [CountryDisplay!]!

  """
  List of shipping methods available for orders shipped to countries within this shipping zone.
  """
  shippingMethods: [ShippingMethodType!]

  """List of warehouses for shipping zone."""
  warehouses: [Warehouse!]!

  """List of channels for shipping zone."""
  channels: [Channel!]!

  """Description of a shipping zone."""
  description: String
}

"""Represents a range of amounts of money."""
type MoneyRange {
  """Lower bound of a price range."""
  start: Money

  """Upper bound of a price range."""
  stop: Money
}

"""
Shipping method are the methods you'll use to get customer's orders to them. They are directly exposed to the customers.
"""
type ShippingMethodType implements Node & ObjectWithMetadata {
  """Shipping method ID."""
  id: ID!

  """List of private metadata items. Requires staff permissions to access."""
  privateMetadata: [MetadataItem!]!

  """
  A single key from private metadata. Requires staff permissions to access.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafield(key: String!): String

  """
  Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafields(keys: [String!]): Metadata

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem!]!

  """
  A single key from public metadata.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafield(key: String!): String

  """
  Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafields(keys: [String!]): Metadata

  """Shipping method name."""
  name: String!

  """Shipping method description."""
  description: JSONString

  """Type of the shipping method."""
  type: ShippingMethodTypeEnum

  """Returns translated shipping method fields for the given language code."""
  translation(
    """A language code to return the translation for shipping method."""
    languageCode: LanguageCodeEnum!
  ): ShippingMethodTranslation

  """
  List of channels available for the method. Requires one of the following permissions: MANAGE_SHIPPING.
  """
  channelListings: [ShippingMethodChannelListing!]

  """The price of the cheapest variant (including discounts)."""
  maximumOrderPrice: Money

  """The price of the cheapest variant (including discounts)."""
  minimumOrderPrice: Money

  """
  Postal code ranges rule of exclusion or inclusion of the shipping method.
  """
  postalCodeRules: [ShippingMethodPostalCodeRule!]

  """
  List of excluded products for the shipping method. Requires one of the following permissions: MANAGE_SHIPPING.
  """
  excludedProducts(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ProductCountableConnection

  """Minimum order weight to use this shipping method."""
  minimumOrderWeight: Weight

  """Maximum order weight to use this shipping method."""
  maximumOrderWeight: Weight

  """Maximum number of days for delivery."""
  maximumDeliveryDays: Int

  """Minimal number of days for delivery."""
  minimumDeliveryDays: Int
}

"""Represents shipping method channel listing."""
type ShippingMethodChannelListing implements Node {
  id: ID!
  channel: Channel!
  maximumOrderPrice: Money
  minimumOrderPrice: Money
  price: Money
}

"""Represents shipping method postal code rule."""
type ShippingMethodPostalCodeRule implements Node {
  """The ID of the object."""
  id: ID!

  """Start address range."""
  start: String

  """End address range."""
  end: String

  """Inclusion type of the postal code rule."""
  inclusionType: PostalCodeRuleInclusionTypeEnum
}

"""An enumeration."""
enum PostalCodeRuleInclusionTypeEnum {
  INCLUDE
  EXCLUDE
}

type ProductCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [ProductCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type ProductCountableEdge {
  """The item at the end of the edge."""
  node: Product!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Represents an individual item for sale in the storefront."""
type Product implements Node & ObjectWithMetadata {
  id: ID!

  """List of private metadata items. Requires staff permissions to access."""
  privateMetadata: [MetadataItem!]!

  """
  A single key from private metadata. Requires staff permissions to access.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafield(key: String!): String

  """
  Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafields(keys: [String!]): Metadata

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem!]!

  """
  A single key from public metadata.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafield(key: String!): String

  """
  Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafields(keys: [String!]): Metadata
  seoTitle: String
  seoDescription: String
  name: String!
  description: JSONString
  productType: ProductType!
  slug: String!
  category: Category
  created: DateTime!
  updatedAt: DateTime!
  chargeTaxes: Boolean!
  weight: Weight
  defaultVariant: ProductVariant
  rating: Float

  """
  Channel given to retrieve this product. Also used by federation gateway to resolve this object in a federated query.
  """
  channel: String

  """Description of the product (JSON)."""
  descriptionJson: JSONString @deprecated(reason: "This field will be removed in Saleor 4.0. Use the `description` field instead.")

  """The main thumbnail for a product."""
  thumbnail(
    """Size of thumbnail."""
    size: Int
  ): Image

  """
  Lists the storefront product's pricing, the current price and discounts, only meant for displaying.
  """
  pricing(
    """
    Destination address used to find warehouses where stock availability for this product is checked. If address is empty, uses `Shop.companyAddress` or fallbacks to server's `settings.DEFAULT_COUNTRY` configuration.
    """
    address: AddressInput
  ): ProductPricingInfo

  """Whether the product is in stock and visible or not."""
  isAvailable(
    """
    Destination address used to find warehouses where stock availability for this product is checked. If address is empty, uses `Shop.companyAddress` or fallbacks to server's `settings.DEFAULT_COUNTRY` configuration.
    """
    address: AddressInput
  ): Boolean

  """A type of tax. Assigned by enabled tax gateway"""
  taxType: TaxType

  """List of attributes assigned to this product."""
  attributes: [SelectedAttribute!]!

  """
  List of availability in channels for the product. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  channelListings: [ProductChannelListing!]

  """Get a single product media by ID."""
  mediaById(
    """ID of a product media."""
    id: ID
  ): ProductMedia

  """Get a single product image by ID."""
  imageById(
    """ID of a product image."""
    id: ID
  ): ProductImage @deprecated(reason: "This field will be removed in Saleor 4.0. Use the `mediaById` field instead.")

  """
  List of variants for the product. Requires the following permissions to include the unpublished items: MANAGE_ORDERS, MANAGE_DISCOUNTS, MANAGE_PRODUCTS.
  """
  variants: [ProductVariant!]

  """List of media for the product."""
  media: [ProductMedia!]

  """List of images for the product."""
  images: [ProductImage!] @deprecated(reason: "This field will be removed in Saleor 4.0. Use the `media` field instead.")

  """
  List of collections for the product. Requires the following permissions to include the unpublished items: MANAGE_ORDERS, MANAGE_DISCOUNTS, MANAGE_PRODUCTS.
  """
  collections: [Collection!]

  """Returns translated product fields for the given language code."""
  translation(
    """A language code to return the translation for product."""
    languageCode: LanguageCodeEnum!
  ): ProductTranslation

  """Date when product is available for purchase."""
  availableForPurchase: Date @deprecated(reason: "This field will be removed in Saleor 4.0. Use the `availableForPurchaseAt` field to fetch the available for purchase date.")

  """Date when product is available for purchase."""
  availableForPurchaseAt: DateTime

  """Whether the product is available for purchase."""
  isAvailableForPurchase: Boolean
}

"""
Represents a type of product. It defines what attributes are available to products of this type.
"""
type ProductType implements Node & ObjectWithMetadata {
  id: ID!

  """List of private metadata items. Requires staff permissions to access."""
  privateMetadata: [MetadataItem!]!

  """
  A single key from private metadata. Requires staff permissions to access.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafield(key: String!): String

  """
  Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafields(keys: [String!]): Metadata

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem!]!

  """
  A single key from public metadata.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafield(key: String!): String

  """
  Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafields(keys: [String!]): Metadata
  name: String!
  slug: String!
  hasVariants: Boolean!
  isShippingRequired: Boolean!
  isDigital: Boolean!
  weight: Weight

  """The product type kind."""
  kind: ProductTypeKindEnum!

  """List of products of this type."""
  products(
    """Slug of a channel for which the data should be returned."""
    channel: String

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ProductCountableConnection @deprecated(reason: "This field will be removed in Saleor 4.0. Use the top-level `products` query with the `productTypes` filter.")

  """A type of tax. Assigned by enabled tax gateway"""
  taxType: TaxType

  """Variant attributes of that product type."""
  variantAttributes(
    """Define scope of returned attributes."""
    variantSelection: VariantAttributeScope
  ): [Attribute!] @deprecated(reason: "This field will be removed in Saleor 4.0. Use `assignedVariantAttributes` instead.")

  """
  Added in Saleor 3.1. Variant attributes of that product type with attached variant selection.
  """
  assignedVariantAttributes(
    """Define scope of returned attributes."""
    variantSelection: VariantAttributeScope
  ): [AssignedVariantAttribute!]

  """Product attributes of that product type."""
  productAttributes: [Attribute!]

  """
  List of attributes which can be assigned to this product type. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  availableAttributes(
    filter: AttributeFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): AttributeCountableConnection
}

"""An enumeration."""
enum ProductTypeKindEnum {
  NORMAL
  GIFT_CARD
}

"""Representation of tax types fetched from tax gateway."""
type TaxType {
  """Description of the tax type."""
  description: String

  """External tax code used to identify given tax group."""
  taxCode: String
}

"""
Custom attribute of a product. Attributes can be assigned to products and variants at the product type level.
"""
type Attribute implements Node & ObjectWithMetadata {
  id: ID!

  """List of private metadata items. Requires staff permissions to access."""
  privateMetadata: [MetadataItem!]!

  """
  A single key from private metadata. Requires staff permissions to access.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafield(key: String!): String

  """
  Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafields(keys: [String!]): Metadata

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem!]!

  """
  A single key from public metadata.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafield(key: String!): String

  """
  Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafields(keys: [String!]): Metadata

  """The input type to use for entering attribute values in the dashboard."""
  inputType: AttributeInputTypeEnum

  """The entity type which can be used as a reference."""
  entityType: AttributeEntityTypeEnum

  """Name of an attribute displayed in the interface."""
  name: String

  """Internal representation of an attribute name."""
  slug: String

  """The attribute type."""
  type: AttributeTypeEnum

  """The unit of attribute values."""
  unit: MeasurementUnitsEnum

  """List of attribute's values."""
  choices(
    """Sort attribute choices."""
    sortBy: AttributeChoicesSortingInput

    """Filtering options for attribute choices."""
    filter: AttributeValueFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): AttributeValueCountableConnection

  """
  Whether the attribute requires values to be passed or not. Requires one of the following permissions: PagePermissions.MANAGE_PAGES, PageTypePermissions.MANAGE_PAGE_TYPES_AND_ATTRIBUTES, ProductPermissions.MANAGE_PRODUCTS, ProductTypePermissions.MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
  """
  valueRequired: Boolean!

  """
  Whether the attribute should be visible or not in storefront. Requires one of the following permissions: PagePermissions.MANAGE_PAGES, PageTypePermissions.MANAGE_PAGE_TYPES_AND_ATTRIBUTES, ProductPermissions.MANAGE_PRODUCTS, ProductTypePermissions.MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
  """
  visibleInStorefront: Boolean!

  """
  Whether the attribute can be filtered in storefront. Requires one of the following permissions: PagePermissions.MANAGE_PAGES, PageTypePermissions.MANAGE_PAGE_TYPES_AND_ATTRIBUTES, ProductPermissions.MANAGE_PRODUCTS, ProductTypePermissions.MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
  """
  filterableInStorefront: Boolean!

  """
  Whether the attribute can be filtered in dashboard. Requires one of the following permissions: PagePermissions.MANAGE_PAGES, PageTypePermissions.MANAGE_PAGE_TYPES_AND_ATTRIBUTES, ProductPermissions.MANAGE_PRODUCTS, ProductTypePermissions.MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
  """
  filterableInDashboard: Boolean!

  """
  Whether the attribute can be displayed in the admin product list. Requires one of the following permissions: PagePermissions.MANAGE_PAGES, PageTypePermissions.MANAGE_PAGE_TYPES_AND_ATTRIBUTES, ProductPermissions.MANAGE_PRODUCTS, ProductTypePermissions.MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
  """
  availableInGrid: Boolean!

  """
  The position of the attribute in the storefront navigation (0 by default). Requires one of the following permissions: PagePermissions.MANAGE_PAGES, PageTypePermissions.MANAGE_PAGE_TYPES_AND_ATTRIBUTES, ProductPermissions.MANAGE_PRODUCTS, ProductTypePermissions.MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
  """
  storefrontSearchPosition: Int!

  """Returns translated attribute fields for the given language code."""
  translation(
    """A language code to return the translation for attribute."""
    languageCode: LanguageCodeEnum!
  ): AttributeTranslation

  """Flag indicating that attribute has predefined choices."""
  withChoices: Boolean!
  productTypes(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ProductTypeCountableConnection!
  productVariantTypes(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ProductTypeCountableConnection!
}

"""An enumeration."""
enum AttributeInputTypeEnum {
  DROPDOWN
  MULTISELECT
  FILE
  REFERENCE
  NUMERIC
  RICH_TEXT
  SWATCH
  BOOLEAN
  DATE
  DATE_TIME
}

"""An enumeration."""
enum AttributeEntityTypeEnum {
  PAGE
  PRODUCT
}

"""An enumeration."""
enum AttributeTypeEnum {
  PRODUCT_TYPE
  PAGE_TYPE
}

"""An enumeration."""
enum MeasurementUnitsEnum {
  CM
  M
  KM
  FT
  YD
  INCH
  SQ_CM
  SQ_M
  SQ_KM
  SQ_FT
  SQ_YD
  SQ_INCH
  CUBIC_MILLIMETER
  CUBIC_CENTIMETER
  CUBIC_DECIMETER
  CUBIC_METER
  LITER
  CUBIC_FOOT
  CUBIC_INCH
  CUBIC_YARD
  QT
  PINT
  FL_OZ
  ACRE_IN
  ACRE_FT
  G
  LB
  OZ
  KG
  TONNE
}

type AttributeValueCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [AttributeValueCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type AttributeValueCountableEdge {
  """The item at the end of the edge."""
  node: AttributeValue!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Represents a value of an attribute."""
type AttributeValue implements Node {
  id: ID!

  """Name of a value displayed in the interface."""
  name: String

  """Internal representation of a value (unique per attribute)."""
  slug: String

  """
  Represent value of the attribute value (e.g. color values for swatch attributes).
  """
  value: String

  """Returns translated attribute value fields for the given language code."""
  translation(
    """A language code to return the translation for attribute value."""
    languageCode: LanguageCodeEnum!
  ): AttributeValueTranslation

  """The input type to use for entering attribute values in the dashboard."""
  inputType: AttributeInputTypeEnum

  """The ID of the attribute reference."""
  reference: ID

  """Represents file URL and content type (if attribute value is a file)."""
  file: File

  """Represents the text (JSON) of the attribute value."""
  richText: JSONString

  """Represents the boolean value of the attribute value."""
  boolean: Boolean

  """Represents the date value of the attribute value."""
  date: Date

  """Represents the date/time value of the attribute value."""
  dateTime: DateTime
}

type AttributeValueTranslation implements Node {
  id: ID!

  """Translation language."""
  language: LanguageDisplay!
  name: String!
  richText: JSONString
}

type File {
  """The URL of the file."""
  url: String!

  """Content type of the file."""
  contentType: String
}

"""
The `Date` scalar type represents a Date
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Date

input AttributeChoicesSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort attribute choices by the selected field."""
  field: AttributeChoicesSortField!
}

enum OrderDirection {
  """Specifies an ascending sort order."""
  ASC

  """Specifies a descending sort order."""
  DESC
}

enum AttributeChoicesSortField {
  """Sort attribute choice by name."""
  NAME

  """Sort attribute choice by slug."""
  SLUG
}

input AttributeValueFilterInput {
  search: String
  ids: [ID!]
}

type AttributeTranslation implements Node {
  id: ID!

  """Translation language."""
  language: LanguageDisplay!
  name: String!
}

type ProductTypeCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [ProductTypeCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type ProductTypeCountableEdge {
  """The item at the end of the edge."""
  node: ProductType!

  """A cursor for use in pagination."""
  cursor: String!
}

enum VariantAttributeScope {
  ALL
  VARIANT_SELECTION
  NOT_VARIANT_SELECTION
}

"""
Added in Saleor 3.1. Represents assigned attribute to variant with variant selection attached.
"""
type AssignedVariantAttribute {
  """Attribute assigned to variant."""
  attribute: Attribute!

  """
  Determines, whether assigned attribute is allowed for variant selection. Supported variant types for variant selection are: ['dropdown', 'boolean', 'swatch', 'numeric']
  """
  variantSelection: Boolean!
}

type AttributeCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [AttributeCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type AttributeCountableEdge {
  """The item at the end of the edge."""
  node: Attribute!

  """A cursor for use in pagination."""
  cursor: String!
}

input AttributeFilterInput {
  valueRequired: Boolean
  isVariantOnly: Boolean
  visibleInStorefront: Boolean
  filterableInStorefront: Boolean
  filterableInDashboard: Boolean
  availableInGrid: Boolean
  metadata: [MetadataFilter!]
  search: String
  ids: [ID!]
  type: AttributeTypeEnum
  inCollection: ID
  inCategory: ID

  """
  Specifies the channel by which the data should be filtered. 
  
  DEPRECATED: this field will be removed in Saleor 4.0. Use root-level channel argument instead.
  """
  channel: String
}

"""
Represents a single category of products. Categories allow to organize products in a tree-hierarchies which can be used for navigation in the storefront.
"""
type Category implements Node & ObjectWithMetadata {
  id: ID!

  """List of private metadata items. Requires staff permissions to access."""
  privateMetadata: [MetadataItem!]!

  """
  A single key from private metadata. Requires staff permissions to access.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafield(key: String!): String

  """
  Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafields(keys: [String!]): Metadata

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem!]!

  """
  A single key from public metadata.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafield(key: String!): String

  """
  Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafields(keys: [String!]): Metadata
  seoTitle: String
  seoDescription: String
  name: String!
  description: JSONString
  slug: String!
  parent: Category
  level: Int!

  """Description of the category (JSON)."""
  descriptionJson: JSONString @deprecated(reason: "This field will be removed in Saleor 4.0. Use the `description` field instead.")

  """List of ancestors of the category."""
  ancestors(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): CategoryCountableConnection

  """
  List of products in the category. Requires the following permissions to include the unpublished items: MANAGE_ORDERS, MANAGE_DISCOUNTS, MANAGE_PRODUCTS.
  """
  products(
    """Slug of a channel for which the data should be returned."""
    channel: String

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ProductCountableConnection

  """List of children of the category."""
  children(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): CategoryCountableConnection
  backgroundImage(
    """Size of the image."""
    size: Int
  ): Image

  """Returns translated category fields for the given language code."""
  translation(
    """A language code to return the translation for category."""
    languageCode: LanguageCodeEnum!
  ): CategoryTranslation
}

type CategoryCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [CategoryCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type CategoryCountableEdge {
  """The item at the end of the edge."""
  node: Category!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Represents an image."""
type Image {
  """The URL of the image."""
  url: String!

  """Alt text for an image."""
  alt: String
}

type CategoryTranslation implements Node {
  id: ID!

  """Translation language."""
  language: LanguageDisplay!
  seoTitle: String
  seoDescription: String
  name: String
  description: JSONString

  """Translated description of the product (JSON)."""
  descriptionJson: JSONString @deprecated(reason: "This field will be removed in Saleor 4.0. Use the `description` field instead.")
}

"""Represents a version of a product such as different size or color."""
type ProductVariant implements Node & ObjectWithMetadata {
  id: ID!

  """List of private metadata items. Requires staff permissions to access."""
  privateMetadata: [MetadataItem!]!

  """
  A single key from private metadata. Requires staff permissions to access.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafield(key: String!): String

  """
  Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafields(keys: [String!]): Metadata

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem!]!

  """
  A single key from public metadata.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafield(key: String!): String

  """
  Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafields(keys: [String!]): Metadata
  name: String!
  sku: String
  product: Product!
  trackInventory: Boolean!
  quantityLimitPerCustomer: Int
  weight: Weight

  """
  Channel given to retrieve this product variant. Also used by federation gateway to resolve this object in a federated query.
  """
  channel: String

  """
  List of price information in channels for the product. Requires one of the following permissions: AUTHENTICATED_APP, AUTHENTICATED_STAFF_USER.
  """
  channelListings: [ProductVariantChannelListing!]

  """
  Lists the storefront variant's pricing, the current price and discounts, only meant for displaying.
  """
  pricing(
    """
    Destination address used to find warehouses where stock availability for this product is checked. If address is empty, uses `Shop.companyAddress` or fallbacks to server's `settings.DEFAULT_COUNTRY` configuration.
    """
    address: AddressInput
  ): VariantPricingInfo

  """List of attributes assigned to this variant."""
  attributes(
    """Define scope of returned attributes."""
    variantSelection: VariantAttributeScope
  ): [SelectedAttribute!]!

  """Gross margin percentage value."""
  margin: Int

  """
  Total quantity ordered. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  quantityOrdered: Int

  """
  Total revenue generated by a variant in given period of time. Note: this field should be queried using `reportProductSales` query as it uses optimizations suitable for such calculations. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  revenue(period: ReportingPeriod): TaxedMoney

  """List of images for the product variant."""
  images: [ProductImage!] @deprecated(reason: "This field will be removed in Saleor 4.0. Use the `media` field instead.")

  """List of media for the product variant."""
  media: [ProductMedia!]

  """Returns translated product variant fields for the given language code."""
  translation(
    """A language code to return the translation for product variant."""
    languageCode: LanguageCodeEnum!
  ): ProductVariantTranslation

  """
  Digital content for the product variant. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  digitalContent: DigitalContent

  """
  Stocks for the product variant. Requires one of the following permissions: MANAGE_PRODUCTS, MANAGE_ORDERS.
  """
  stocks(
    """
    Destination address used to find warehouses where stock availability for this product is checked. If address is empty, uses `Shop.companyAddress` or fallbacks to server's `settings.DEFAULT_COUNTRY` configuration.
    """
    address: AddressInput

    """
    Two-letter ISO 3166-1 country code. 
    
    DEPRECATED: this field will be removed in Saleor 4.0. Use `address` argument instead.
    """
    countryCode: CountryCode
  ): [Stock!]

  """
  Quantity of a product available for sale in one checkout. Field value will be `null` when no `limitQuantityPerCheckout` in global settings has been set, and `productVariant` stocks are not tracked.
  """
  quantityAvailable(
    """
    Destination address used to find warehouses where stock availability for this product is checked. If address is empty, uses `Shop.companyAddress` or fallbacks to server's `settings.DEFAULT_COUNTRY` configuration.
    """
    address: AddressInput

    """
    Two-letter ISO 3166-1 country code. When provided, the exact quantity from a warehouse operating in shipping zones that contain this country will be returned. Otherwise, it will return the maximum quantity from all shipping zones. 
    
    DEPRECATED: this field will be removed in Saleor 4.0. Use `address` argument instead.
    """
    countryCode: CountryCode
  ): Int

  """
  Added in Saleor 3.1. Preorder data for product variant. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  preorder: PreorderData
  created: DateTime!
  updatedAt: DateTime!
}

"""Represents product varaint channel listing."""
type ProductVariantChannelListing implements Node {
  id: ID!
  channel: Channel!
  price: Money

  """Cost price of the variant."""
  costPrice: Money

  """
  Gross margin percentage value. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  margin: Int

  """
  Added in Saleor 3.1. Preorder variant data. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  preorderThreshold: PreorderThreshold
}

"""Represents preorder variant data for channel."""
type PreorderThreshold {
  """Preorder threshold for product variant in this channel."""
  quantity: Int

  """Number of sold product variant in this channel."""
  soldUnits: Int!
}

"""Represents availability of a variant in the storefront."""
type VariantPricingInfo {
  """Whether it is in sale or not."""
  onSale: Boolean

  """The discount amount if in sale (null otherwise)."""
  discount: TaxedMoney

  """The discount amount in the local currency."""
  discountLocalCurrency: TaxedMoney

  """The price, with any discount subtracted."""
  price: TaxedMoney

  """The price without any discount."""
  priceUndiscounted: TaxedMoney

  """The discounted price in the local currency."""
  priceLocalCurrency: TaxedMoney
}

"""
Represents a monetary value with taxes. In cases where taxes were not applied, net and gross values will be equal.
"""
type TaxedMoney {
  """Currency code."""
  currency: String!

  """Amount of money including taxes."""
  gross: Money!

  """Amount of money without taxes."""
  net: Money!

  """Amount of taxes."""
  tax: Money!
}

input AddressInput {
  """Given name."""
  firstName: String

  """Family name."""
  lastName: String

  """Company or organization."""
  companyName: String

  """Address."""
  streetAddress1: String

  """Address."""
  streetAddress2: String

  """City."""
  city: String

  """District."""
  cityArea: String

  """Postal code."""
  postalCode: String

  """Country."""
  country: CountryCode

  """State or province."""
  countryArea: String

  """Phone number."""
  phone: String
}

"""An enumeration."""
enum CountryCode {
  AF
  AX
  AL
  DZ
  AS
  AD
  AO
  AI
  AQ
  AG
  AR
  AM
  AW
  AU
  AT
  AZ
  BS
  BH
  BD
  BB
  BY
  BE
  BZ
  BJ
  BM
  BT
  BO
  BQ
  BA
  BW
  BV
  BR
  IO
  BN
  BG
  BF
  BI
  CV
  KH
  CM
  CA
  KY
  CF
  TD
  CL
  CN
  CX
  CC
  CO
  KM
  CG
  CD
  CK
  CR
  CI
  HR
  CU
  CW
  CY
  CZ
  DK
  DJ
  DM
  DO
  EC
  EG
  SV
  GQ
  ER
  EE
  SZ
  ET
  EU
  FK
  FO
  FJ
  FI
  FR
  GF
  PF
  TF
  GA
  GM
  GE
  DE
  GH
  GI
  GR
  GL
  GD
  GP
  GU
  GT
  GG
  GN
  GW
  GY
  HT
  HM
  VA
  HN
  HK
  HU
  IS
  IN
  ID
  IR
  IQ
  IE
  IM
  IL
  IT
  JM
  JP
  JE
  JO
  KZ
  KE
  KI
  KW
  KG
  LA
  LV
  LB
  LS
  LR
  LY
  LI
  LT
  LU
  MO
  MG
  MW
  MY
  MV
  ML
  MT
  MH
  MQ
  MR
  MU
  YT
  MX
  FM
  MD
  MC
  MN
  ME
  MS
  MA
  MZ
  MM
  NA
  NR
  NP
  NL
  NC
  NZ
  NI
  NE
  NG
  NU
  NF
  KP
  MK
  MP
  NO
  OM
  PK
  PW
  PS
  PA
  PG
  PY
  PE
  PH
  PN
  PL
  PT
  PR
  QA
  RE
  RO
  RU
  RW
  BL
  SH
  KN
  LC
  MF
  PM
  VC
  WS
  SM
  ST
  SA
  SN
  RS
  SC
  SL
  SG
  SX
  SK
  SI
  SB
  SO
  ZA
  GS
  KR
  SS
  ES
  LK
  SD
  SR
  SJ
  SE
  CH
  SY
  TW
  TJ
  TZ
  TH
  TL
  TG
  TK
  TO
  TT
  TN
  TR
  TM
  TC
  TV
  UG
  UA
  AE
  GB
  UM
  US
  UY
  UZ
  VU
  VE
  VN
  VG
  VI
  WF
  EH
  YE
  ZM
  ZW
}

"""Represents a custom attribute."""
type SelectedAttribute {
  """Name of an attribute displayed in the interface."""
  attribute: Attribute!

  """Values of an attribute."""
  values: [AttributeValue!]!
}

enum ReportingPeriod {
  TODAY
  THIS_MONTH
}

"""Represents a product image."""
type ProductImage {
  """The ID of the image."""
  id: ID!

  """The alt text of the image."""
  alt: String

  """
  The new relative sorting position of the item (from -inf to +inf). 1 moves the item one position forward, -1 moves the item one position backward, 0 leaves the item unchanged.
  """
  sortOrder: Int

  """The URL of the image."""
  url(
    """Size of the image."""
    size: Int
  ): String!
}

"""Represents a product media."""
type ProductMedia implements Node {
  id: ID!
  sortOrder: Int
  alt: String!
  type: ProductMediaType!
  oembedData: JSONString!

  """The URL of the media."""
  url(
    """Size of the image."""
    size: Int
  ): String!
}

"""An enumeration."""
enum ProductMediaType {
  IMAGE
  VIDEO
}

type ProductVariantTranslation implements Node {
  id: ID!

  """Translation language."""
  language: LanguageDisplay!
  name: String!
}

type DigitalContent implements Node & ObjectWithMetadata {
  id: ID!

  """List of private metadata items. Requires staff permissions to access."""
  privateMetadata: [MetadataItem!]!

  """
  A single key from private metadata. Requires staff permissions to access.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafield(key: String!): String

  """
  Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafields(keys: [String!]): Metadata

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem!]!

  """
  A single key from public metadata.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafield(key: String!): String

  """
  Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafields(keys: [String!]): Metadata
  useDefaultSettings: Boolean!
  automaticFulfillment: Boolean!
  contentFile: String!
  maxDownloads: Int
  urlValidDays: Int

  """List of URLs for the digital variant."""
  urls: [DigitalContentUrl!]

  """Product variant assigned to digital content."""
  productVariant: ProductVariant!
}

type DigitalContentUrl implements Node {
  id: ID!
  content: DigitalContent!
  created: DateTime!
  downloadNum: Int!

  """URL for digital content."""
  url: String

  """UUID of digital content."""
  token: UUID!
}

scalar UUID

"""Represents stock."""
type Stock implements Node {
  id: ID!
  warehouse: Warehouse!
  productVariant: ProductVariant!

  """
  Quantity of a product in the warehouse's possession, including the allocated stock that is waiting for shipment. Requires one of the following permissions: MANAGE_PRODUCTS, MANAGE_ORDERS.
  """
  quantity: Int!

  """
  Quantity allocated for orders. Requires one of the following permissions: MANAGE_PRODUCTS, MANAGE_ORDERS.
  """
  quantityAllocated: Int!

  """
  Quantity reserved for checkouts. Requires one of the following permissions: MANAGE_PRODUCTS, MANAGE_ORDERS.
  """
  quantityReserved: Int!
}

"""Represents preorder settings for product variant."""
type PreorderData {
  """
  The global preorder threshold for product variant. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  globalThreshold: Int

  """
  Total number of sold product variant during preorder. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  globalSoldUnits: Int!

  """Preorder end date."""
  endDate: DateTime
}

"""Represents availability of a product in the storefront."""
type ProductPricingInfo {
  """Whether it is in sale or not."""
  onSale: Boolean

  """The discount amount if in sale (null otherwise)."""
  discount: TaxedMoney

  """The discount amount in the local currency."""
  discountLocalCurrency: TaxedMoney

  """The discounted price range of the product variants."""
  priceRange: TaxedMoneyRange

  """The undiscounted price range of the product variants."""
  priceRangeUndiscounted: TaxedMoneyRange

  """
  The discounted price range of the product variants in the local currency.
  """
  priceRangeLocalCurrency: TaxedMoneyRange
}

"""Represents a range of monetary values."""
type TaxedMoneyRange {
  """Lower bound of a price range."""
  start: TaxedMoney

  """Upper bound of a price range."""
  stop: TaxedMoney
}

"""Represents product channel listing."""
type ProductChannelListing implements Node {
  id: ID!
  publicationDate: Date @deprecated(reason: "This field will be removed in Saleor 4.0. Use the `publishedAt` field to fetch the publication date.")

  """Added in Saleor 3.3. The product publication date time."""
  publishedAt: DateTime
  isPublished: Boolean!
  channel: Channel!
  visibleInListings: Boolean!
  availableForPurchase: Date @deprecated(reason: "This field will be removed in Saleor 4.0. Use the `availableForPurchaseAt` field to fetch the available for purchase date.")

  """Added in Saleor 3.3. The product available for purchase date time."""
  availableForPurchaseAt: DateTime

  """The price of the cheapest variant (including discounts)."""
  discountedPrice: Money

  """
  Purchase cost of product. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  purchaseCost: MoneyRange

  """
  Range of margin percentage value. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  margin: Margin

  """Whether the product is available for purchase."""
  isAvailableForPurchase: Boolean

  """
  Lists the storefront product's pricing, the current price and discounts, only meant for displaying.
  """
  pricing(
    """
    Destination address used to find warehouses where stock availability for this product is checked. If address is empty, uses `Shop.companyAddress` or fallbacks to server's `settings.DEFAULT_COUNTRY` configuration.
    """
    address: AddressInput
  ): ProductPricingInfo
}

type Margin {
  start: Int
  stop: Int
}

"""Represents a collection of products."""
type Collection implements Node & ObjectWithMetadata {
  id: ID!

  """List of private metadata items. Requires staff permissions to access."""
  privateMetadata: [MetadataItem!]!

  """
  A single key from private metadata. Requires staff permissions to access.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafield(key: String!): String

  """
  Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafields(keys: [String!]): Metadata

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem!]!

  """
  A single key from public metadata.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafield(key: String!): String

  """
  Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafields(keys: [String!]): Metadata
  seoTitle: String
  seoDescription: String
  name: String!
  description: JSONString
  slug: String!

  """
  Channel given to retrieve this collection. Also used by federation gateway to resolve this object in a federated query.
  """
  channel: String

  """Description of the collection (JSON)."""
  descriptionJson: JSONString @deprecated(reason: "This field will be removed in Saleor 4.0. Use the `description` field instead.")

  """List of products in this collection."""
  products(
    """Filtering options for products."""
    filter: ProductFilterInput

    """Sort products."""
    sortBy: ProductOrder

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ProductCountableConnection
  backgroundImage(
    """Size of the image."""
    size: Int
  ): Image

  """Returns translated collection fields for the given language code."""
  translation(
    """A language code to return the translation for collection."""
    languageCode: LanguageCodeEnum!
  ): CollectionTranslation

  """
  List of channels in which the collection is available. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  channelListings: [CollectionChannelListing!]
}

input ProductFilterInput {
  isPublished: Boolean
  collections: [ID!]
  categories: [ID!]
  hasCategory: Boolean
  attributes: [AttributeInput!]
  stockAvailability: StockAvailability
  stocks: ProductStockFilterInput
  search: String
  metadata: [MetadataFilter!]
  price: PriceRangeInput
  minimalPrice: PriceRangeInput
  updatedAt: DateTimeRangeInput
  productTypes: [ID!]
  giftCard: Boolean
  ids: [ID!]
  hasPreorderedVariants: Boolean

  """
  Specifies the channel by which the data should be filtered. 
  
  DEPRECATED: this field will be removed in Saleor 4.0. Use root-level channel argument instead.
  """
  channel: String
}

input AttributeInput {
  """Internal representation of an attribute name."""
  slug: String!

  """Internal representation of a value (unique per attribute)."""
  values: [String!]

  """The range that the returned values should be in."""
  valuesRange: IntRangeInput

  """The date/time range that the returned values should be in."""
  dateTime: DateTimeRangeInput

  """
  The date range that the returned values should be in. In case of date/time attributes, the UTC midnight of the given date is used.
  """
  date: DateRangeInput

  """The boolean value of the attribute."""
  boolean: Boolean
}

input IntRangeInput {
  """Value greater than or equal to."""
  gte: Int

  """Value less than or equal to."""
  lte: Int
}

input DateTimeRangeInput {
  """Start date."""
  gte: DateTime

  """End date."""
  lte: DateTime
}

input DateRangeInput {
  """Start date."""
  gte: Date

  """End date."""
  lte: Date
}

enum StockAvailability {
  IN_STOCK
  OUT_OF_STOCK
}

input ProductStockFilterInput {
  warehouseIds: [ID!]
  quantity: IntRangeInput
}

input PriceRangeInput {
  """Price greater than or equal to."""
  gte: Float

  """Price less than or equal to."""
  lte: Float
}

input ProductOrder {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """
  Specifies the channel in which to sort the data.
  
  DEPRECATED: this field will be removed in Saleor 4.0. Use root-level channel argument instead.
  """
  channel: String

  """
  Sort product by the selected attribute's values.
  Note: this doesn't take translations into account yet.
  """
  attributeId: ID

  """Sort products by the selected field."""
  field: ProductOrderField
}

enum ProductOrderField {
  """Sort products by name."""
  NAME

  """
  Sort products by rank. Note: This option is available only with the `search` filter.
  """
  RANK

  """Sort products by price."""
  PRICE

  """Sort products by a minimal price of a product's variant."""
  MINIMAL_PRICE

  """Sort products by update date."""
  LAST_MODIFIED

  """Sort products by update date."""
  DATE

  """Sort products by type."""
  TYPE

  """Sort products by publication status."""
  PUBLISHED

  """Sort products by publication date."""
  PUBLICATION_DATE

  """Sort products by publication date."""
  PUBLISHED_AT

  """Sort products by update date."""
  LAST_MODIFIED_AT

  """
  Sort products by collection. Note: This option is available only for the `Collection.products` query.
  """
  COLLECTION

  """Sort products by rating."""
  RATING
}

type CollectionTranslation implements Node {
  id: ID!

  """Translation language."""
  language: LanguageDisplay!
  seoTitle: String
  seoDescription: String
  name: String
  description: JSONString

  """Translated description of the product (JSON)."""
  descriptionJson: JSONString @deprecated(reason: "This field will be removed in Saleor 4.0. Use the `description` field instead.")
}

"""Represents collection channel listing."""
type CollectionChannelListing implements Node {
  id: ID!
  publicationDate: Date @deprecated(reason: "This field will be removed in Saleor 4.0. Use the `publishedAt` field to fetch the publication date.")

  """Added in Saleor 3.3. The collection publication date."""
  publishedAt: DateTime
  isPublished: Boolean!
  channel: Channel!
}

type ProductTranslation implements Node {
  id: ID!

  """Translation language."""
  language: LanguageDisplay!
  seoTitle: String
  seoDescription: String
  name: String
  description: JSONString

  """Translated description of the product (JSON)."""
  descriptionJson: JSONString @deprecated(reason: "This field will be removed in Saleor 4.0. Use the `description` field instead.")
}

"""
Available payment gateway backend with configuration necessary to setup client.
"""
type PaymentGateway {
  """Payment gateway name."""
  name: String!

  """Payment gateway ID."""
  id: ID!

  """Payment gateway client configuration."""
  config: [GatewayConfigLine!]!

  """Payment gateway supported currencies."""
  currencies: [String!]!
}

"""Payment gateway client configuration key and value pair."""
type GatewayConfigLine {
  """Gateway config key."""
  field: String!

  """Gateway config value for key."""
  value: String
}

"""
A gift card is a prepaid electronic payment card accepted in stores. They can be used during checkout by providing a valid gift card codes.
"""
type GiftCard implements Node & ObjectWithMetadata {
  id: ID!

  """List of private metadata items. Requires staff permissions to access."""
  privateMetadata: [MetadataItem!]!

  """
  A single key from private metadata. Requires staff permissions to access.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafield(key: String!): String

  """
  Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafields(keys: [String!]): Metadata

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem!]!

  """
  A single key from public metadata.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafield(key: String!): String

  """
  Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafields(keys: [String!]): Metadata

  """Code in format which allows displaying in a user interface."""
  displayCode: String!

  """Last 4 characters of gift card code."""
  last4CodeChars: String!

  """
  Gift card code. Can be fetched by a staff member with GiftcardPermissions.MANAGE_GIFT_CARD when gift card wasn't yet used and by the gift card owner.
  """
  code: String!
  created: DateTime!

  """
  Added in Saleor 3.1. The user who bought or issued a gift card. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  createdBy: User

  """
  Added in Saleor 3.1. The customer who used a gift card. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  usedBy: User

  """
  Added in Saleor 3.1. Email address of the user who bought or issued gift card. Requires one of the following permissions: AccountPermissions.MANAGE_USERS, AuthorizationFilters.OWNER. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  createdByEmail: String

  """
  Added in Saleor 3.1. Email address of the customer who used a gift card. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  usedByEmail: String
  lastUsedOn: DateTime
  expiryDate: Date

  """
  Added in Saleor 3.1. App which created the gift card. Requires one of the following permissions: AppPermission.MANAGE_APPS, AuthorizationFilters.OWNER. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  app: App

  """
  Added in Saleor 3.1. Related gift card product. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  product: Product

  """
  Added in Saleor 3.1. List of events associated with the gift card. Note: this feature is in a preview state and can be subject to changes at later point. Requires one of the following permissions: MANAGE_GIFT_CARD.
  """
  events(
    """Filtering options for gift card events."""
    filter: GiftCardEventFilterInput
  ): [GiftCardEvent!]!

  """
  Added in Saleor 3.1. The gift card tag. Note: this feature is in a preview state and can be subject to changes at later point. Requires one of the following permissions: MANAGE_GIFT_CARD.
  """
  tags: [GiftCardTag!]!

  """
  Added in Saleor 3.1. Slug of the channel where the gift card was bought. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  boughtInChannel: String
  isActive: Boolean!
  initialBalance: Money
  currentBalance: Money

  """The customer who bought a gift card."""
  user: User @deprecated(reason: "This field will be removed in Saleor 4.0. Use `createdBy` field instead.")

  """End date of gift card."""
  endDate: DateTime @deprecated(reason: "This field will be removed in Saleor 4.0. Use `expiryDate` field instead.")

  """Start date of gift card."""
  startDate: DateTime @deprecated(reason: "This field will be removed in Saleor 4.0.")
}

"""Represents app data."""
type App implements Node & ObjectWithMetadata {
  id: ID!

  """List of private metadata items. Requires staff permissions to access."""
  privateMetadata: [MetadataItem!]!

  """
  A single key from private metadata. Requires staff permissions to access.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafield(key: String!): String

  """
  Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafields(keys: [String!]): Metadata

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem!]!

  """
  A single key from public metadata.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafield(key: String!): String

  """
  Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafields(keys: [String!]): Metadata

  """List of the app's permissions."""
  permissions: [Permission!]

  """The date and time when the app was created."""
  created: DateTime

  """Determine if app will be set active or not."""
  isActive: Boolean

  """Name of the app."""
  name: String

  """Type of the app."""
  type: AppTypeEnum

  """Last 4 characters of the tokens."""
  tokens: [AppToken!]

  """List of webhooks assigned to this app."""
  webhooks: [Webhook!]

  """Description of this app."""
  aboutApp: String

  """Description of the data privacy defined for this app."""
  dataPrivacy: String

  """Url to details about the privacy policy on the app owner page."""
  dataPrivacyUrl: String

  """Homepage of the app."""
  homepageUrl: String

  """Support page for the app."""
  supportUrl: String

  """Url to iframe with the configuration for the app."""
  configurationUrl: String

  """Url to iframe with the app."""
  appUrl: String

  """Version number of the app."""
  version: String

  """JWT token used to authenticate by thridparty app."""
  accessToken: String

  """
  Added in Saleor 3.1. App's dashboard extensions. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  extensions: [AppExtension!]!
}

"""Represents a permission object in a friendly form."""
type Permission {
  """Internal code for permission."""
  code: PermissionEnum!

  """Describe action(s) allowed to do by permission."""
  name: String!
}

"""An enumeration."""
enum PermissionEnum {
  MANAGE_USERS
  MANAGE_STAFF
  IMPERSONATE_USER
  MANAGE_APPS
  MANAGE_CHANNELS
  MANAGE_DISCOUNTS
  MANAGE_PLUGINS
  MANAGE_GIFT_CARD
  MANAGE_MENUS
  MANAGE_ORDERS
  MANAGE_PAGES
  MANAGE_PAGE_TYPES_AND_ATTRIBUTES
  HANDLE_PAYMENTS
  MANAGE_PRODUCTS
  MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES
  MANAGE_SHIPPING
  MANAGE_SETTINGS
  MANAGE_TRANSLATIONS
  MANAGE_CHECKOUTS
  HANDLE_CHECKOUTS
  VIEW_ORDER_CUSTOMER
  CREATE_ORDER_CUSTOMER
  CHANGE_ORDER_CUSTOMER
  VIEW_ORDER_DOMESTIC
  CREATE_ORDER_DOMESTIC
  CHANGE_ORDER_DOMESTIC
  VIEW_ORDER_EXPORT
  CREATE_ORDER_EXPORT
  CHANGE_ORDER_EXPORT
  CREATE_ORDER_DOMESTIC_PACKAGING
  VIEW_DUMMY
  CREATE_DUMMY
  CHANGE_DUMMY
  APPROVE_DUMMY
  MAINTAIN_USER
  MAINTAIN_USER_GROUP
  MAINTAIN_ROLE
  MAINTAIN_ROLE_PERMISSION
  MAINTAIN_ORGANIZATION
  MAINTAIN_ALT_MATERIAL
  MAINTAIN_PO_UPLOAD
  MAINTAIN_EMAIL
  MAINTAIN_EMAIL_EO_UPLOAD
  MAINTAIN_CUSTOMER_MATERIAL
  VIEW_PENDING_ORDER_TRACKING
  VIEW_SALE_ORDER_TRACKING
  VIEW_ORDER_CONFIRM_REPORT
  ALL_UPLOAD_PO_CUSTOMER
  ALL_UPLOAD_PO_ADMIN
  ALL_CONTRACT
  ALL_REPORT_CUSTOMER
  ALL_REPORT_ADMIN
  ALL_REPORT_DOMESTIC
  ALL_REPORT_EXPORT
  VIEW_STOCK
  VIEW_DRAFT_ORDER
  MAINTAIN_EXCEL_UPLOAD
}

"""Enum determining type of your App."""
enum AppTypeEnum {
  """
  Local Saleor App. The app is fully manageable from dashboard. You can change assigned permissions, add webhooks, or authentication token
  """
  LOCAL

  """
  Third party external App. Installation is fully automated. Saleor uses a defined App manifest to gather all required information.
  """
  THIRDPARTY
}

"""Represents token data."""
type AppToken implements Node {
  id: ID!

  """Name of the authenticated token."""
  name: String

  """Last 4 characters of the token."""
  authToken: String
}

"""Webhook."""
type Webhook implements Node {
  id: ID!
  name: String!

  """List of webhook events."""
  events: [WebhookEvent!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `asyncEvents` or `syncEvents` instead.")

  """List of synchronous webhook events."""
  syncEvents: [WebhookEventSync!]!

  """List of asynchronous webhook events."""
  asyncEvents: [WebhookEventAsync!]!
  app: App!

  """Event deliveries."""
  eventDeliveries(
    """Event delivery sorter."""
    sortBy: EventDeliverySortingInput

    """Event delivery filter options."""
    filter: EventDeliveryFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): EventDeliveryCountableConnection

  """Target URL for webhook."""
  targetUrl: String!

  """Informs if webhook is activated."""
  isActive: Boolean!

  """Used to create a hash signature with each payload."""
  secretKey: String

  """Used to define payloads for specific events."""
  subscriptionQuery: String
}

"""Webhook event."""
type WebhookEvent {
  """Display name of the event."""
  name: String!

  """Internal name of the event type."""
  eventType: WebhookEventTypeEnum!
}

"""Enum determining type of webhook."""
enum WebhookEventTypeEnum {
  """All the events."""
  ANY_EVENTS

  """A new category created."""
  CATEGORY_CREATED

  """A category is updated."""
  CATEGORY_UPDATED

  """A category is deleted."""
  CATEGORY_DELETED

  """A new channel created."""
  CHANNEL_CREATED

  """A channel is updated."""
  CHANNEL_UPDATED

  """A channel is deleted."""
  CHANNEL_DELETED

  """A channel status is changed."""
  CHANNEL_STATUS_CHANGED

  """A new gift card created."""
  GIFT_CARD_CREATED

  """A gift card is updated."""
  GIFT_CARD_UPDATED

  """A gift card is deleted."""
  GIFT_CARD_DELETED

  """A gift card status is changed."""
  GIFT_CARD_STATUS_CHANGED

  """A new order is placed."""
  ORDER_CREATED

  """
  An order is confirmed (status change unconfirmed -> unfulfilled) by a staff user using the OrderConfirm mutation. It also triggers when the user completes the checkout and the shop setting `automatically_confirm_all_new_orders` is enabled.
  """
  ORDER_CONFIRMED

  """Payment is made and an order is fully paid."""
  ORDER_FULLY_PAID

  """
  An order is updated; triggered for all changes related to an order; covers all other order webhooks, except for ORDER_CREATED.
  """
  ORDER_UPDATED

  """An order is cancelled."""
  ORDER_CANCELLED

  """An order is fulfilled."""
  ORDER_FULFILLED
  DRAFT_ORDER_CREATED
  DRAFT_ORDER_UPDATED
  DRAFT_ORDER_DELETED
  SALE_CREATED
  SALE_UPDATED
  SALE_DELETED

  """An invoice for order requested."""
  INVOICE_REQUESTED

  """An invoice is deleted."""
  INVOICE_DELETED

  """Invoice has been sent."""
  INVOICE_SENT

  """A new customer account is created."""
  CUSTOMER_CREATED

  """A customer account is updated."""
  CUSTOMER_UPDATED

  """A new collection is created."""
  COLLECTION_CREATED

  """A collection is updated."""
  COLLECTION_UPDATED

  """A collection is deleted."""
  COLLECTION_DELETED

  """A new product is created."""
  PRODUCT_CREATED

  """A product is updated."""
  PRODUCT_UPDATED

  """A product is deleted."""
  PRODUCT_DELETED

  """A new product variant is created."""
  PRODUCT_VARIANT_CREATED

  """A product variant is updated."""
  PRODUCT_VARIANT_UPDATED

  """A product variant is deleted."""
  PRODUCT_VARIANT_DELETED
  PRODUCT_VARIANT_OUT_OF_STOCK
  PRODUCT_VARIANT_BACK_IN_STOCK

  """A new checkout is created."""
  CHECKOUT_CREATED

  """
  A checkout is updated. It also triggers all updates related to the checkout.
  """
  CHECKOUT_UPDATED

  """A new fulfillment is created."""
  FULFILLMENT_CREATED

  """A fulfillment is cancelled."""
  FULFILLMENT_CANCELED

  """User notification triggered."""
  NOTIFY_USER

  """A new page is created."""
  PAGE_CREATED

  """A page is updated."""
  PAGE_UPDATED

  """A page is deleted."""
  PAGE_DELETED

  """A new shipping price is created."""
  SHIPPING_PRICE_CREATED

  """A shipping price is updated."""
  SHIPPING_PRICE_UPDATED

  """A shipping price is deleted."""
  SHIPPING_PRICE_DELETED

  """A new shipping zone is created."""
  SHIPPING_ZONE_CREATED

  """A shipping zone is updated."""
  SHIPPING_ZONE_UPDATED

  """A shipping zone is deleted."""
  SHIPPING_ZONE_DELETED
  TRANSLATION_CREATED
  TRANSLATION_UPDATED
  PAYMENT_AUTHORIZE
  PAYMENT_CAPTURE
  PAYMENT_CONFIRM
  PAYMENT_LIST_GATEWAYS
  PAYMENT_PROCESS
  PAYMENT_REFUND
  PAYMENT_VOID
  SHIPPING_LIST_METHODS_FOR_CHECKOUT
  ORDER_FILTER_SHIPPING_METHODS
  CHECKOUT_FILTER_SHIPPING_METHODS
}

"""Synchronous webhook event."""
type WebhookEventSync {
  """Display name of the event."""
  name: String!

  """Internal name of the event type."""
  eventType: WebhookEventTypeSyncEnum!
}

"""Enum determining type of webhook."""
enum WebhookEventTypeSyncEnum {
  PAYMENT_AUTHORIZE
  PAYMENT_CAPTURE
  PAYMENT_CONFIRM
  PAYMENT_LIST_GATEWAYS
  PAYMENT_PROCESS
  PAYMENT_REFUND
  PAYMENT_VOID
  SHIPPING_LIST_METHODS_FOR_CHECKOUT
  ORDER_FILTER_SHIPPING_METHODS
  CHECKOUT_FILTER_SHIPPING_METHODS
}

"""Asynchronous webhook event."""
type WebhookEventAsync {
  """Display name of the event."""
  name: String!

  """Internal name of the event type."""
  eventType: WebhookEventTypeAsyncEnum!
}

"""Enum determining type of webhook."""
enum WebhookEventTypeAsyncEnum {
  """All the events."""
  ANY_EVENTS

  """A new category created."""
  CATEGORY_CREATED

  """A category is updated."""
  CATEGORY_UPDATED

  """A category is deleted."""
  CATEGORY_DELETED

  """A new channel created."""
  CHANNEL_CREATED

  """A channel is updated."""
  CHANNEL_UPDATED

  """A channel is deleted."""
  CHANNEL_DELETED

  """A channel status is changed."""
  CHANNEL_STATUS_CHANGED

  """A new gift card created."""
  GIFT_CARD_CREATED

  """A gift card is updated."""
  GIFT_CARD_UPDATED

  """A gift card is deleted."""
  GIFT_CARD_DELETED

  """A gift card status is changed."""
  GIFT_CARD_STATUS_CHANGED

  """A new order is placed."""
  ORDER_CREATED

  """
  An order is confirmed (status change unconfirmed -> unfulfilled) by a staff user using the OrderConfirm mutation. It also triggers when the user completes the checkout and the shop setting `automatically_confirm_all_new_orders` is enabled.
  """
  ORDER_CONFIRMED

  """Payment is made and an order is fully paid."""
  ORDER_FULLY_PAID

  """
  An order is updated; triggered for all changes related to an order; covers all other order webhooks, except for ORDER_CREATED.
  """
  ORDER_UPDATED

  """An order is cancelled."""
  ORDER_CANCELLED

  """An order is fulfilled."""
  ORDER_FULFILLED
  DRAFT_ORDER_CREATED
  DRAFT_ORDER_UPDATED
  DRAFT_ORDER_DELETED
  SALE_CREATED
  SALE_UPDATED
  SALE_DELETED

  """An invoice for order requested."""
  INVOICE_REQUESTED

  """An invoice is deleted."""
  INVOICE_DELETED

  """Invoice has been sent."""
  INVOICE_SENT

  """A new customer account is created."""
  CUSTOMER_CREATED

  """A customer account is updated."""
  CUSTOMER_UPDATED

  """A new collection is created."""
  COLLECTION_CREATED

  """A collection is updated."""
  COLLECTION_UPDATED

  """A collection is deleted."""
  COLLECTION_DELETED

  """A new product is created."""
  PRODUCT_CREATED

  """A product is updated."""
  PRODUCT_UPDATED

  """A product is deleted."""
  PRODUCT_DELETED

  """A new product variant is created."""
  PRODUCT_VARIANT_CREATED

  """A product variant is updated."""
  PRODUCT_VARIANT_UPDATED

  """A product variant is deleted."""
  PRODUCT_VARIANT_DELETED
  PRODUCT_VARIANT_OUT_OF_STOCK
  PRODUCT_VARIANT_BACK_IN_STOCK

  """A new checkout is created."""
  CHECKOUT_CREATED

  """
  A checkout is updated. It also triggers all updates related to the checkout.
  """
  CHECKOUT_UPDATED

  """A new fulfillment is created."""
  FULFILLMENT_CREATED

  """A fulfillment is cancelled."""
  FULFILLMENT_CANCELED

  """User notification triggered."""
  NOTIFY_USER

  """A new page is created."""
  PAGE_CREATED

  """A page is updated."""
  PAGE_UPDATED

  """A page is deleted."""
  PAGE_DELETED

  """A new shipping price is created."""
  SHIPPING_PRICE_CREATED

  """A shipping price is updated."""
  SHIPPING_PRICE_UPDATED

  """A shipping price is deleted."""
  SHIPPING_PRICE_DELETED

  """A new shipping zone is created."""
  SHIPPING_ZONE_CREATED

  """A shipping zone is updated."""
  SHIPPING_ZONE_UPDATED

  """A shipping zone is deleted."""
  SHIPPING_ZONE_DELETED
  TRANSLATION_CREATED
  TRANSLATION_UPDATED
}

type EventDeliveryCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [EventDeliveryCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type EventDeliveryCountableEdge {
  """The item at the end of the edge."""
  node: EventDelivery!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Event delivery."""
type EventDelivery implements Node {
  id: ID!
  createdAt: DateTime!

  """Event delivery status."""
  status: EventDeliveryStatusEnum!

  """Webhook event type."""
  eventType: WebhookEventTypeEnum!

  """Event delivery attempts."""
  attempts(
    """Event delivery sorter"""
    sortBy: EventDeliveryAttemptSortingInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): EventDeliveryAttemptCountableConnection

  """Event payload."""
  payload: String
}

enum EventDeliveryStatusEnum {
  PENDING
  SUCCESS
  FAILED
}

type EventDeliveryAttemptCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [EventDeliveryAttemptCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type EventDeliveryAttemptCountableEdge {
  """The item at the end of the edge."""
  node: EventDeliveryAttempt!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Event delivery attempts."""
type EventDeliveryAttempt implements Node {
  id: ID!

  """Event delivery creation date and time."""
  createdAt: DateTime!

  """Task id for delivery attempt."""
  taskId: String

  """Delivery attempt duration."""
  duration: Float

  """Delivery attempt response content."""
  response: String

  """Response headers for delivery attempt."""
  responseHeaders: String

  """Delivery attempt response status code."""
  responseStatusCode: Int

  """Request headers for delivery attempt."""
  requestHeaders: String

  """Event delivery status."""
  status: EventDeliveryStatusEnum!
}

input EventDeliveryAttemptSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort attempts by the selected field."""
  field: EventDeliveryAttemptSortField!
}

enum EventDeliveryAttemptSortField {
  """Sort event delivery attempts by created at."""
  CREATED_AT
}

input EventDeliverySortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort deliveries by the selected field."""
  field: EventDeliverySortField!
}

enum EventDeliverySortField {
  """Sort event deliveries by created at."""
  CREATED_AT
}

input EventDeliveryFilterInput {
  status: EventDeliveryStatusEnum
  eventType: WebhookEventTypeEnum
}

"""Represents app data."""
type AppExtension implements Node {
  id: ID!

  """List of the app extension's permissions."""
  permissions: [Permission!]!

  """Label of the extension to show in the dashboard."""
  label: String!

  """URL of a view where extension's iframe is placed."""
  url: String!

  """Place where given extension will be mounted."""
  mount: AppExtensionMountEnum!

  """Type of way how app extension will be opened."""
  target: AppExtensionTargetEnum!
  app: App!

  """JWT token used to authenticate by thridparty app extension."""
  accessToken: String
}

"""All places where app extension can be mounted."""
enum AppExtensionMountEnum {
  PRODUCT_OVERVIEW_CREATE
  PRODUCT_OVERVIEW_MORE_ACTIONS
  PRODUCT_DETAILS_MORE_ACTIONS
  NAVIGATION_CATALOG
  NAVIGATION_ORDERS
  NAVIGATION_CUSTOMERS
  NAVIGATION_DISCOUNTS
  NAVIGATION_TRANSLATIONS
  NAVIGATION_PAGES
}

"""
All available ways of opening an app extension.

    POPUP - app's extension will be mounted as a popup window
    APP_PAGE - redirect to app's page
"""
enum AppExtensionTargetEnum {
  POPUP
  APP_PAGE
}

"""
Added in Saleor 3.1. History log of the gift card. Note: this feature is in a preview state and can be subject to changes at later point.
"""
type GiftCardEvent implements Node {
  id: ID!

  """Date when event happened at in ISO 8601 format."""
  date: DateTime

  """Gift card event type."""
  type: GiftCardEventsEnum

  """
  User who performed the action. Requires one of the following permissions: AccountPermissions.MANAGE_USERS, AccountPermissions.MANAGE_STAFF, AuthorizationFilters.OWNER.
  """
  user: User

  """
  App that performed the action. Requires one of the following permissions: AppPermission.MANAGE_APPS, AuthorizationFilters.OWNER.
  """
  app: App

  """Content of the event."""
  message: String

  """Email of the customer."""
  email: String

  """The order ID where gift card was used or bought."""
  orderId: ID

  """User-friendly number of an order where gift card was used or bought."""
  orderNumber: String

  """The list of gift card tags."""
  tags: [String!]

  """The list of old gift card tags."""
  oldTags: [String!]

  """The gift card balance."""
  balance: GiftCardEventBalance

  """The gift card expiry date."""
  expiryDate: Date

  """Previous gift card expiry date."""
  oldExpiryDate: Date
}

"""An enumeration."""
enum GiftCardEventsEnum {
  ISSUED
  BOUGHT
  UPDATED
  ACTIVATED
  DEACTIVATED
  BALANCE_RESET
  EXPIRY_DATE_UPDATED
  TAGS_UPDATED
  SENT_TO_CUSTOMER
  RESENT
  NOTE_ADDED
  USED_IN_ORDER
}

type GiftCardEventBalance {
  """Initial balance of the gift card."""
  initialBalance: Money

  """Current balance of the gift card."""
  currentBalance: Money!

  """Previous initial balance of the gift card."""
  oldInitialBalance: Money

  """Previous current balance of the gift card."""
  oldCurrentBalance: Money
}

input GiftCardEventFilterInput {
  type: GiftCardEventsEnum
  orders: [ID!]
}

"""
Added in Saleor 3.1. The gift card tag. Note: this feature is in a preview state and can be subject to changes at later point.
"""
type GiftCardTag implements Node {
  id: ID!
  name: String!
}

"""Represents an item in the checkout."""
type CheckoutLine implements Node {
  id: ID!
  variant: ProductVariant!
  quantity: Int!

  """The sum of the checkout line price, taxes and discounts."""
  totalPrice: TaxedMoney!

  """Indicates whether the item need to be delivered."""
  requiresShipping: Boolean!
}

"""
Added in Saleor 3.1. Represents a delivery method chosen for the checkout. `Warehouse` type is used when checkout is marked as "click and collect" and `ShippingMethod` otherwise. Note: this feature is in a preview state and can be subject to changes at later point.
"""
union DeliveryMethod = Warehouse | ShippingMethod

type GiftCardCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [GiftCardCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type GiftCardCountableEdge {
  """The item at the end of the edge."""
  node: GiftCard!

  """A cursor for use in pagination."""
  cursor: String!
}

type OrderCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [OrderCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type OrderCountableEdge {
  """The item at the end of the edge."""
  node: Order!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Represents an order in the shop."""
type Order implements Node & ObjectWithMetadata {
  id: ID!

  """List of private metadata items. Requires staff permissions to access."""
  privateMetadata: [MetadataItem!]!

  """
  A single key from private metadata. Requires staff permissions to access.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafield(key: String!): String

  """
  Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafields(keys: [String!]): Metadata

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem!]!

  """
  A single key from public metadata.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafield(key: String!): String

  """
  Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafields(keys: [String!]): Metadata
  created: DateTime!
  updatedAt: DateTime!
  status: OrderStatus!

  """
  User who placed the order. This field is set only for orders placed by authenticated users. Requires one of the following permissions: AccountPermissions.MANAGE_USERS, OrderPermissions.MANAGE_ORDERS, AuthorizationFilters.OWNER.
  """
  user: User
  trackingClientId: String!

  """
  Billing address. Requires one of the following permissions to view the full data: OrderPermissions.MANAGE_ORDERS, AuthorizationFilters.OWNER.
  """
  billingAddress: Address

  """
  Shipping address. Requires one of the following permissions to view the full data: OrderPermissions.MANAGE_ORDERS, AuthorizationFilters.OWNER.
  """
  shippingAddress: Address
  shippingMethodName: String
  collectionPointName: String
  channel: Channel!

  """List of shipments for the order."""
  fulfillments: [Fulfillment!]!

  """List of order lines."""
  lines: [OrderLine!]!

  """
  List of actions that can be performed in the current state of an order.
  """
  actions: [OrderAction!]!

  """Shipping methods that can be used with this order."""
  availableShippingMethods: [ShippingMethod!] @deprecated(reason: "Use `shippingMethods`, this field will be removed in 4.0")

  """Shipping methods related to this order."""
  shippingMethods: [ShippingMethod!]!

  """
  Added in Saleor 3.1. Collection points that can be used for this order. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  availableCollectionPoints: [Warehouse!]!

  """
  List of order invoices. Requires one of the following permissions: OrderPermissions.MANAGE_ORDERS, AuthorizationFilters.OWNER.
  """
  invoices: [Invoice!]!

  """User-friendly number of an order."""
  number: String!

  """The ID of the order that was the base for this order."""
  original: ID

  """The order origin."""
  origin: OrderOriginEnum!

  """Informs if an order is fully paid."""
  isPaid: Boolean!

  """Internal payment status."""
  paymentStatus: PaymentChargeStatusEnum!

  """User-friendly payment status."""
  paymentStatusDisplay: String!

  """List of payments for the order."""
  payments: [Payment!]!

  """Total amount of the order."""
  total: TaxedMoney!

  """Undiscounted total amount of the order."""
  undiscountedTotal: TaxedMoney!

  """Shipping method for this order."""
  shippingMethod: ShippingMethod @deprecated(reason: "This field will be removed in Saleor 4.0. Use `deliveryMethod` instead.")

  """Total price of shipping."""
  shippingPrice: TaxedMoney!
  shippingTaxRate: Float!
  token: String! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `id` instead.")
  voucher: Voucher

  """List of user gift cards."""
  giftCards: [GiftCard!]!
  displayGrossPrices: Boolean!
  customerNote: String!
  weight: Weight!
  redirectUrl: String

  """The sum of line prices not including shipping."""
  subtotal: TaxedMoney!

  """User-friendly order status."""
  statusDisplay: String!

  """
  Informs whether a draft order can be finalized(turned into a regular order).
  """
  canFinalize: Boolean!

  """Amount authorized for the order."""
  totalAuthorized: Money!

  """Amount captured by payment."""
  totalCaptured: Money!

  """
  List of events associated with the order. Requires one of the following permissions: MANAGE_ORDERS.
  """
  events: [OrderEvent!]!

  """The difference between the paid and the order total amount."""
  totalBalance: Money!

  """
  Email address of the customer. Requires the following permissions to access the full data: OrderPermissions.MANAGE_ORDERS, AuthorizationFilters.OWNER
  """
  userEmail: String

  """Returns True, if order requires shipping."""
  isShippingRequired: Boolean!

  """
  Added in Saleor 3.1. The delivery method selected for this checkout. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  deliveryMethod: DeliveryMethod
  languageCode: String! @deprecated(reason: "This field will be removed in Saleor 4.0. Use the `languageCodeEnum` field to fetch the language code. ")

  """Order language code."""
  languageCodeEnum: LanguageCodeEnum!

  """Returns applied discount."""
  discount: Money @deprecated(reason: "This field will be removed in Saleor 4.0. Use the `discounts` field instead.")

  """Discount name."""
  discountName: String @deprecated(reason: "This field will be removed in Saleor 4.0. Use the `discounts` field instead.")

  """Translated discount name."""
  translatedDiscountName: String @deprecated(reason: "This field will be removed in Saleor 4.0. Use the `discounts` field instead. ")

  """List of all discounts assigned to the order."""
  discounts: [OrderDiscount!]!

  """List of errors that occurred during order validation."""
  errors: [OrderError!]!
}

"""An enumeration."""
enum OrderStatus {
  DRAFT
  UNCONFIRMED
  UNFULFILLED
  PARTIALLY_FULFILLED
  PARTIALLY_RETURNED
  RETURNED
  FULFILLED
  CANCELED
}

"""Represents order fulfillment."""
type Fulfillment implements Node & ObjectWithMetadata {
  id: ID!

  """List of private metadata items. Requires staff permissions to access."""
  privateMetadata: [MetadataItem!]!

  """
  A single key from private metadata. Requires staff permissions to access.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafield(key: String!): String

  """
  Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafields(keys: [String!]): Metadata

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem!]!

  """
  A single key from public metadata.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafield(key: String!): String

  """
  Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafields(keys: [String!]): Metadata
  fulfillmentOrder: Int!
  status: FulfillmentStatus!
  trackingNumber: String!
  created: DateTime!

  """List of lines for the fulfillment."""
  lines: [FulfillmentLine!]

  """User-friendly fulfillment status."""
  statusDisplay: String

  """Warehouse from fulfillment was fulfilled."""
  warehouse: Warehouse
}

"""An enumeration."""
enum FulfillmentStatus {
  FULFILLED
  REFUNDED
  RETURNED
  REPLACED
  REFUNDED_AND_RETURNED
  CANCELED
  WAITING_FOR_APPROVAL
}

"""Represents line of the fulfillment."""
type FulfillmentLine implements Node {
  id: ID!
  quantity: Int!
  orderLine: OrderLine
}

"""Represents order line of particular order."""
type OrderLine implements Node {
  id: ID!
  productName: String!
  variantName: String!
  productSku: String
  productVariantId: String
  isShippingRequired: Boolean!
  quantity: Int!
  quantityFulfilled: Int!
  unitDiscountReason: String
  taxRate: Float!
  digitalContentUrl: DigitalContentUrl

  """The main thumbnail for the ordered product."""
  thumbnail(
    """Size of thumbnail."""
    size: Int
  ): Image

  """Price of the single item in the order line."""
  unitPrice: TaxedMoney!

  """
  Price of the single item in the order line without applied an order line discount.
  """
  undiscountedUnitPrice: TaxedMoney!

  """The discount applied to the single order line."""
  unitDiscount: Money!

  """Value of the discount. Can store fixed value or percent value"""
  unitDiscountValue: PositiveDecimal!

  """Price of the order line."""
  totalPrice: TaxedMoney!

  """
  A purchased product variant. Note: this field may be null if the variant has been removed from stock at all. Requires one of the following permissions to include the unpublished items: MANAGE_ORDERS, MANAGE_DISCOUNTS, MANAGE_PRODUCTS.
  """
  variant: ProductVariant

  """Product name in the customer's language"""
  translatedProductName: String!

  """Variant name in the customer's language"""
  translatedVariantName: String!

  """
  List of allocations across warehouses. Requires one of the following permissions: MANAGE_PRODUCTS, MANAGE_ORDERS.
  """
  allocations: [Allocation!]

  """Added in Saleor 3.1. A quantity of items remaining to be fulfilled."""
  quantityToFulfill: Int!

  """Type of the discount: fixed or percent"""
  unitDiscountType: DiscountValueTypeEnum
}

"""
Positive Decimal scalar implementation.

Should be used in places where value must be positive.
"""
scalar PositiveDecimal

"""Represents allocation."""
type Allocation implements Node {
  id: ID!

  """
  Quantity allocated for orders. Requires one of the following permissions: MANAGE_PRODUCTS, MANAGE_ORDERS.
  """
  quantity: Int!

  """
  The warehouse were items were allocated. Requires one of the following permissions: MANAGE_PRODUCTS, MANAGE_ORDERS.
  """
  warehouse: Warehouse!
}

enum DiscountValueTypeEnum {
  FIXED
  PERCENTAGE
}

enum OrderAction {
  """Represents the capture action."""
  CAPTURE

  """Represents a mark-as-paid action."""
  MARK_AS_PAID

  """Represents a refund action."""
  REFUND

  """Represents a void action."""
  VOID
}

"""Represents an Invoice."""
type Invoice implements ObjectWithMetadata & Job & Node {
  """List of private metadata items. Requires staff permissions to access."""
  privateMetadata: [MetadataItem!]!

  """
  A single key from private metadata. Requires staff permissions to access.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafield(key: String!): String

  """
  Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafields(keys: [String!]): Metadata

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem!]!

  """
  A single key from public metadata.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafield(key: String!): String

  """
  Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafields(keys: [String!]): Metadata

  """Job status."""
  status: JobStatusEnum!
  createdAt: DateTime!
  updatedAt: DateTime!
  message: String

  """The ID of the object."""
  id: ID!
  number: String
  externalUrl: String

  """URL to download an invoice."""
  url: String
}

interface Job {
  """Job status."""
  status: JobStatusEnum!

  """Created date time of job in ISO 8601 format."""
  createdAt: DateTime!

  """Date time of job last update in ISO 8601 format."""
  updatedAt: DateTime!

  """Job message."""
  message: String
}

"""An enumeration."""
enum JobStatusEnum {
  PENDING
  SUCCESS
  FAILED
  DELETED
}

"""An enumeration."""
enum OrderOriginEnum {
  CHECKOUT
  DRAFT
  REISSUE
}

"""An enumeration."""
enum PaymentChargeStatusEnum {
  NOT_CHARGED
  PENDING
  PARTIALLY_CHARGED
  FULLY_CHARGED
  PARTIALLY_REFUNDED
  FULLY_REFUNDED
  REFUSED
  CANCELLED
}

"""Represents a payment of a given type."""
type Payment implements Node & ObjectWithMetadata {
  id: ID!

  """List of private metadata items. Requires staff permissions to access."""
  privateMetadata: [MetadataItem!]!

  """
  A single key from private metadata. Requires staff permissions to access.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafield(key: String!): String

  """
  Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafields(keys: [String!]): Metadata

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem!]!

  """
  A single key from public metadata.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafield(key: String!): String

  """
  Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafields(keys: [String!]): Metadata
  gateway: String!
  isActive: Boolean!
  created: DateTime!
  modified: DateTime!
  token: String!
  checkout: Checkout
  order: Order
  paymentMethodType: String!

  """
  IP address of the user who created the payment. Requires one of the following permissions: MANAGE_ORDERS.
  """
  customerIpAddress: String

  """Internal payment status."""
  chargeStatus: PaymentChargeStatusEnum!

  """
  List of actions that can be performed in the current state of a payment. Requires one of the following permissions: MANAGE_ORDERS.
  """
  actions: [OrderAction!]!

  """Total amount of the payment."""
  total: Money

  """Total amount captured for this payment."""
  capturedAmount: Money

  """
  List of all transactions within this payment. Requires one of the following permissions: MANAGE_ORDERS.
  """
  transactions: [Transaction!]

  """
  Maximum amount of money that can be captured. Requires one of the following permissions: MANAGE_ORDERS.
  """
  availableCaptureAmount: Money

  """
  Maximum amount of money that can be refunded. Requires one of the following permissions: MANAGE_ORDERS.
  """
  availableRefundAmount: Money

  """The details of the card used for this payment."""
  creditCard: CreditCard
}

"""An object representing a single payment."""
type Transaction implements Node {
  id: ID!
  created: DateTime!
  payment: Payment!
  token: String!
  kind: TransactionKind!
  isSuccess: Boolean!
  error: String
  gatewayResponse: JSONString!

  """Total amount of the transaction."""
  amount: Money
}

"""An enumeration."""
enum TransactionKind {
  EXTERNAL
  AUTH
  PENDING
  ACTION_TO_CONFIRM
  REFUND
  REFUND_ONGOING
  CAPTURE
  VOID
  CONFIRM
  CANCEL
}

type CreditCard {
  """Card brand."""
  brand: String!

  """First 4 digits of the card number."""
  firstDigits: String

  """Last 4 digits of the card number."""
  lastDigits: String!

  """Two-digit number representing expiration month of the card."""
  expMonth: Int

  """Four-digit number representing expiration year of the card."""
  expYear: Int
}

"""
Vouchers allow giving discounts to particular customers on categories, collections or specific products. They can be used during checkout by providing valid voucher codes.
"""
type Voucher implements Node & ObjectWithMetadata {
  id: ID!

  """List of private metadata items. Requires staff permissions to access."""
  privateMetadata: [MetadataItem!]!

  """
  A single key from private metadata. Requires staff permissions to access.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafield(key: String!): String

  """
  Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafields(keys: [String!]): Metadata

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem!]!

  """
  A single key from public metadata.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafield(key: String!): String

  """
  Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafields(keys: [String!]): Metadata
  name: String
  code: String!
  usageLimit: Int
  used: Int!
  startDate: DateTime!
  endDate: DateTime
  applyOncePerOrder: Boolean!
  applyOncePerCustomer: Boolean!
  onlyForStaff: Boolean!
  minCheckoutItemsQuantity: Int

  """List of categories this voucher applies to."""
  categories(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): CategoryCountableConnection

  """
  List of collections this voucher applies to. Requires one of the following permissions: MANAGE_DISCOUNTS.
  """
  collections(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): CollectionCountableConnection

  """
  List of products this voucher applies to. Requires one of the following permissions: MANAGE_DISCOUNTS.
  """
  products(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ProductCountableConnection

  """
  Added in Saleor 3.1. List of product variants this voucher applies to. Requires one of the following permissions: MANAGE_DISCOUNTS.
  """
  variants(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ProductVariantCountableConnection

  """List of countries available for the shipping voucher."""
  countries: [CountryDisplay!]

  """Returns translated voucher fields for the given language code."""
  translation(
    """A language code to return the translation for voucher."""
    languageCode: LanguageCodeEnum!
  ): VoucherTranslation

  """Determines a type of discount for voucher - value or percentage"""
  discountValueType: DiscountValueTypeEnum!

  """Voucher value."""
  discountValue: Float

  """Currency code for voucher."""
  currency: String

  """Minimum order value to apply voucher."""
  minSpent: Money

  """Determines a type of voucher."""
  type: VoucherTypeEnum!

  """
  List of availability in channels for the voucher. Requires one of the following permissions: MANAGE_DISCOUNTS.
  """
  channelListings: [VoucherChannelListing!]
}

type CollectionCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [CollectionCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type CollectionCountableEdge {
  """The item at the end of the edge."""
  node: Collection!

  """A cursor for use in pagination."""
  cursor: String!
}

type ProductVariantCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [ProductVariantCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type ProductVariantCountableEdge {
  """The item at the end of the edge."""
  node: ProductVariant!

  """A cursor for use in pagination."""
  cursor: String!
}

type VoucherTranslation implements Node {
  id: ID!

  """Translation language."""
  language: LanguageDisplay!
  name: String
}

enum VoucherTypeEnum {
  SHIPPING
  ENTIRE_ORDER
  SPECIFIC_PRODUCT
}

"""Represents voucher channel listing."""
type VoucherChannelListing implements Node {
  id: ID!
  channel: Channel!
  discountValue: Float!
  currency: String!
  minSpent: Money
}

"""History log of the order."""
type OrderEvent implements Node {
  id: ID!

  """Date when event happened at in ISO 8601 format."""
  date: DateTime

  """Order event type."""
  type: OrderEventsEnum

  """User who performed the action."""
  user: User

  """
  App that performed the action. Requires of of the following permissions: AppPermission.MANAGE_APPS, OrderPermissions.MANAGE_ORDERS, AuthorizationFilters.OWNER.
  """
  app: App

  """Content of the event."""
  message: String

  """Email of the customer."""
  email: String

  """Type of an email sent to the customer."""
  emailType: OrderEventsEmailsEnum

  """Amount of money."""
  amount: Float

  """The payment ID from the payment gateway."""
  paymentId: String

  """The payment gateway of the payment."""
  paymentGateway: String

  """Number of items."""
  quantity: Int

  """Composed ID of the Fulfillment."""
  composedId: String

  """User-friendly number of an order."""
  orderNumber: String

  """Number of an invoice related to the order."""
  invoiceNumber: String

  """List of oversold lines names."""
  oversoldItems: [String!]

  """The concerned lines."""
  lines: [OrderEventOrderLineObject!]

  """The lines fulfilled."""
  fulfilledItems: [FulfillmentLine!]

  """The warehouse were items were restocked."""
  warehouse: Warehouse

  """The transaction reference of captured payment."""
  transactionReference: String

  """Define if shipping costs were included to the refund."""
  shippingCostsIncluded: Boolean

  """The order which is related to this order."""
  relatedOrder: Order

  """The discount applied to the order."""
  discount: OrderEventDiscountObject
}

"""An enumeration."""
enum OrderEventsEnum {
  DRAFT_CREATED
  DRAFT_CREATED_FROM_REPLACE
  ADDED_PRODUCTS
  REMOVED_PRODUCTS
  PLACED
  PLACED_FROM_DRAFT
  OVERSOLD_ITEMS
  CANCELED
  ORDER_MARKED_AS_PAID
  ORDER_FULLY_PAID
  ORDER_REPLACEMENT_CREATED
  ORDER_DISCOUNT_ADDED
  ORDER_DISCOUNT_AUTOMATICALLY_UPDATED
  ORDER_DISCOUNT_UPDATED
  ORDER_DISCOUNT_DELETED
  ORDER_LINE_DISCOUNT_UPDATED
  ORDER_LINE_DISCOUNT_REMOVED
  ORDER_LINE_PRODUCT_DELETED
  ORDER_LINE_VARIANT_DELETED
  UPDATED_ADDRESS
  EMAIL_SENT
  CONFIRMED
  PAYMENT_AUTHORIZED
  PAYMENT_CAPTURED
  EXTERNAL_SERVICE_NOTIFICATION
  PAYMENT_REFUNDED
  PAYMENT_VOIDED
  PAYMENT_FAILED
  INVOICE_REQUESTED
  INVOICE_GENERATED
  INVOICE_UPDATED
  INVOICE_SENT
  FULFILLMENT_CANCELED
  FULFILLMENT_RESTOCKED_ITEMS
  FULFILLMENT_FULFILLED_ITEMS
  FULFILLMENT_REFUNDED
  FULFILLMENT_RETURNED
  FULFILLMENT_REPLACED
  FULFILLMENT_AWAITS_APPROVAL
  TRACKING_UPDATED
  NOTE_ADDED
  OTHER
}

"""An enumeration."""
enum OrderEventsEmailsEnum {
  PAYMENT_CONFIRMATION
  CONFIRMED
  SHIPPING_CONFIRMATION
  TRACKING_UPDATED
  ORDER_CONFIRMATION
  ORDER_CANCEL
  ORDER_REFUND
  FULFILLMENT_CONFIRMATION
  DIGITAL_LINKS
}

type OrderEventOrderLineObject {
  """The variant quantity."""
  quantity: Int

  """The order line."""
  orderLine: OrderLine

  """The variant name."""
  itemName: String

  """The discount applied to the order line."""
  discount: OrderEventDiscountObject
}

type OrderEventDiscountObject {
  """Type of the discount: fixed or percent."""
  valueType: DiscountValueTypeEnum!

  """Value of the discount. Can store fixed value or percent value."""
  value: PositiveDecimal!

  """Explanation for the applied discount."""
  reason: String

  """Returns amount of discount."""
  amount: Money

  """Type of the discount: fixed or percent."""
  oldValueType: DiscountValueTypeEnum

  """Value of the discount. Can store fixed value or percent value."""
  oldValue: PositiveDecimal

  """Returns amount of discount."""
  oldAmount: Money
}

"""Contains all details related to the applied discount to the order."""
type OrderDiscount implements Node {
  id: ID!
  type: OrderDiscountType!
  name: String
  translatedName: String

  """Type of the discount: fixed or percent"""
  valueType: DiscountValueTypeEnum!

  """Value of the discount. Can store fixed value or percent value"""
  value: PositiveDecimal!

  """
  Explanation for the applied discount. Requires one of the following permissions: MANAGE_ORDERS.
  """
  reason: String

  """Returns amount of discount."""
  amount: Money!
}

"""An enumeration."""
enum OrderDiscountType {
  VOUCHER
  MANUAL
}

type OrderError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: OrderErrorCode!

  """Warehouse ID which causes the error."""
  warehouse: ID

  """List of order line IDs that cause the error."""
  orderLines: [ID!]

  """List of product variants that are associated with the error"""
  variants: [ID!]

  """A type of address that causes the error."""
  addressType: AddressTypeEnum
}

"""An enumeration."""
enum OrderErrorCode {
  BILLING_ADDRESS_NOT_SET
  CANNOT_CANCEL_FULFILLMENT
  CANNOT_CANCEL_ORDER
  CANNOT_DELETE
  CANNOT_DISCOUNT
  CANNOT_REFUND
  CANNOT_FULFILL_UNPAID_ORDER
  CAPTURE_INACTIVE_PAYMENT
  GIFT_CARD_LINE
  NOT_EDITABLE
  FULFILL_ORDER_LINE
  GRAPHQL_ERROR
  INVALID
  PRODUCT_NOT_PUBLISHED
  PRODUCT_UNAVAILABLE_FOR_PURCHASE
  NOT_FOUND
  ORDER_NO_SHIPPING_ADDRESS
  PAYMENT_ERROR
  PAYMENT_MISSING
  REQUIRED
  SHIPPING_METHOD_NOT_APPLICABLE
  SHIPPING_METHOD_REQUIRED
  TAX_ERROR
  UNIQUE
  VOID_INACTIVE_PAYMENT
  ZERO_QUANTITY
  INVALID_QUANTITY
  INSUFFICIENT_STOCK
  DUPLICATED_INPUT_ITEM
  NOT_AVAILABLE_IN_CHANNEL
  CHANNEL_INACTIVE
}

"""An enumeration."""
enum AddressTypeEnum {
  BILLING
  SHIPPING
}

type UserPermission {
  """Internal code for permission."""
  code: PermissionEnum!

  """Describe action(s) allowed to do by permission."""
  name: String!

  """List of user permission groups which contains this permission."""
  sourcePermissionGroups(
    """ID of user whose groups should be returned."""
    userId: ID!
  ): [Group!]
}

"""Represents permission group data."""
type Group implements Node {
  id: ID!
  name: String!

  """
  List of group users Requires one of the following permissions: MANAGE_STAFF.
  """
  users: [User!]

  """List of group permissions"""
  permissions: [Permission!]

  """
  True, if the currently authenticated user has rights to manage a group.
  """
  userCanManage: Boolean!
}

"""History log of the customer."""
type CustomerEvent implements Node {
  id: ID!

  """Date when event happened at in ISO 8601 format."""
  date: DateTime

  """Customer event type."""
  type: CustomerEventsEnum

  """User who performed the action."""
  user: User

  """App that performed the action."""
  app: App

  """Content of the event."""
  message: String

  """Number of objects concerned by the event."""
  count: Int

  """The concerned order."""
  order: Order

  """The concerned order line."""
  orderLine: OrderLine
}

"""An enumeration."""
enum CustomerEventsEnum {
  ACCOUNT_CREATED
  PASSWORD_RESET_LINK_SENT
  PASSWORD_RESET
  EMAIL_CHANGED_REQUEST
  PASSWORD_CHANGED
  EMAIL_CHANGED
  PLACED_ORDER
  NOTE_ADDED_TO_ORDER
  DIGITAL_LINK_DOWNLOADED
  CUSTOMER_DELETED
  NAME_ASSIGNED
  EMAIL_ASSIGNED
  NOTE_ADDED
}

"""
Represents a payment source stored for user in payment gateway, such as credit card.
"""
type PaymentSource {
  """Payment gateway name."""
  gateway: String!

  """ID of stored payment method."""
  paymentMethodId: String

  """Stored credit card details if available."""
  creditCardInfo: CreditCard

  """
  Added in Saleor 3.1. List of public metadata items. Can be accessed without permissions.
  """
  metadata: [MetadataItem!]!
}

type Company {
  id: ID!
  name: String!
  address: String
}

type Division {
  id: ID!
  name: String!
  company: Company
  office: Office
}

type Office {
  id: ID!
  name: String!
  company: Company
}

type DistributionChannel {
  """ID of distribution_channel"""
  id: ID

  """name of distribution_channel"""
  name: String

  """code of distribution_channel"""
  code: String
  displayText: String
}

type ScgDivision {
  """ID of division"""
  id: ID

  """name of division"""
  name: String

  """code of division"""
  code: String
}

type SoldToMaster {
  id: ID
  soldToCode: String
  soldToName: String
  accountGroupCode: String
  accountGroupName: String
  customerClass: String
  customerClassDesc: String
  status: String
  customerBlock: String
  customerBlockDesc: String
  deleteFlag: String
  language: String
  code: String
  name: String
  addressText: String
  displayText: String
  representatives: [ScgpUser]
  internalCommentsToWarehouse: String
  externalCommentsToCustomer: String
  showPoUpload: Boolean
  domesticSoldToSearchFilterDisplayText: String
}

"""ScgpUser extend data."""
type ScgpUser {
  id: ID
  email: String!
  firstName: String!
  lastName: String!
  isStaff: Boolean!
  isActive: Boolean!
  displayName: String
  isSuperuser: Boolean

  """List of all user's addresses."""
  addresses: [Address!]

  """Returns the last open checkout of this user."""
  checkout: Checkout @deprecated(reason: "This field will be removed in Saleor 4.0. Use the `checkoutTokens` field to fetch the user checkouts.")

  """Returns the checkout UUID's assigned to this user."""
  checkoutTokens(
    """Slug of a channel for which the data should be returned."""
    channel: String
  ): [UUID!]

  """List of the user gift cards."""
  giftCards(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): GiftCardCountableConnection

  """
  A note about the customer. Requires one of the following permissions: MANAGE_USERS, MANAGE_STAFF.
  """
  note: String

  """
  List of user's orders. Requires one of the following permissions: AccountPermissions.MANAGE_STAFF, AuthorizationFilters.OWNER
  """
  orders(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): OrderCountableConnection

  """List of user's permissions."""
  userPermissions: [UserPermission!]
  permissionGroups: [ScgpGroup]

  """List of user's permission groups which user can manage."""
  editableGroups: [Group!]
  avatar(
    """Size of the avatar."""
    size: Int
  ): Image

  """
  List of events associated with the user. Requires one of the following permissions: MANAGE_USERS, MANAGE_STAFF.
  """
  events: [CustomerEvent!]

  """List of stored payment sources."""
  storedPaymentSources(
    """Slug of a channel for which the data should be returned."""
    channel: String
  ): [PaymentSource!]

  """User language code."""
  languageCode: LanguageCodeEnum!
  defaultShippingAddress: Address
  defaultBillingAddress: Address
  lastLogin: DateTime
  dateJoined: DateTime!
  updatedAt: DateTime!
  company: Company
  distributionChannel: Channel
  division: Division
  office: Office
  soldTos: [SoldToMaster]
  extendData: ScgpUserExtend
}

"""Scgp Group."""
type ScgpGroup {
  id: ID
  name: String!

  """
  List of group users Requires one of the following permissions: MANAGE_STAFF.
  """
  users: [User!]

  """List of group permissions"""
  permissions: [Permission!]

  """
  True, if the currently authenticated user has rights to manage a group.
  """
  userCanManage: Boolean!
}

"""ScgpUser extend data."""
type ScgpUserExtend {
  id: ID
  userParentGroup: ParentGroup
  adUser: String
  employeeId: String
  saleId: String
  customerType: String
  companyEmail: String
  displayName: String
  username: String
  scgpBus: [BusinessUnits]
  scgpSalesOrganizations: [SalesOrganizationMaster]
  scgpSalesOrganizationsAll: [SalesOrganizationMaster]
  scgpSalesGroups: [SalesGroupMaster]
  scgpDistributionChannels: [DistributionChannelMaster]
  scgpDivisions: [DivisionMaster]
  scgpSalesOffices: [SalesOfficeMaster]
  defaultBusinessUnit: BusinessUnits
  defaultSalesOrganizations: SalesOrganizationMaster
  createdBy: User
  updatedBy: User
  updatedAt: DateTime
  sapId: String
  salesOrgByBuAndUser: [SalesOrgByBu]
  salesOrgByBu: [SalesOrgByBu]
}

type ParentGroup {
  id: ID
  name: String
  code: String

  """List of role group"""
  groups: [ScgpGroup]
  description: String
}

type BusinessUnits {
  id: ID
  code: String
  name: String
}

type SalesOrganizationMaster {
  id: ID
  code: String
  name: String
  businessUnit: BusinessUnits
  shortName: String
}

type SalesGroupMaster {
  id: ID
  code: String
  name: String
  salesOrganization: SalesOrganizationMaster
}

type DistributionChannelMaster {
  id: ID
  code: String
  name: String
}

type DivisionMaster {
  id: ID
  code: String
  name: String
}

type SalesOfficeMaster {
  id: ID
  code: String
  name: String
  salesOrganization: SalesOrganizationMaster
}

type SalesOrgByBu {
  businessUnit: String
  salesOrganizations: [SalesOrganizationMaster]
}

enum DistributionChannelType {
  DOMESTIC
  EXPORT
}

type DomesticSoldToCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [DomesticSoldToCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type DomesticSoldToCountableEdge {
  """The item at the end of the edge."""
  node: SoldToMaster!

  """A cursor for use in pagination."""
  cursor: String!
}

input DomesticSoldToFilterInput {
  """"""
  id: Float
  metadata: [MetadataFilter!]
  soldTo: String
  search: String
}

type TempTransportation {
  """ID of scg_contract"""
  id: ID
  countryCode: String
  transportZoneCode: String
  transportZoneName: String
}

type TempCountryMaster {
  countryCode: String
  countryName: String
}

type CipTempOrder {
  id: ID
  soldTo: SoldToMaster
  customer: SoldToMaster
  poDate: Date
  poNumber: String
  shipTo: String
  billTo: String
  unloadingPoint: String
  orderType: String
  requestDate: Date
  saleOrganization: SalesOrganization
  distributionChannel: DistributionChannel
  division: ScgDivision
  saleOffice: SalesOffice
  salesGroup: SalesGroup
  totalPrice: Float
  orderLines: [CipTempOrderLine]
  status: String
  orderNo: String
  scgpSalesEmployee: ScgpSalesEmployee
  createdBy: User
  createdAt: DateTime
  updatedAt: DateTime
  updateBy: User
  soNo: String
  type: String
  company: SapMigrationCompany
  paymentTerm: String
  creditStatus: String
  orderDate: Date
  statusSap: String
  customerGroup: CustomerGroupMaster
  customerGroup1: CustomerGroup1Master
  customerGroup2: CustomerGroup2Master
  customerGroup3: CustomerGroup3Master
  customerGroup4: CustomerGroup4Master
  dpNo: String
  invoiceNo: String
  deliveryBlock: String
  incoterm: String
  incoterms1: Incoterms1Master
  shippingPoint: String
  route: String
  poNo: String
  totalPriceIncTax: Float
  taxAmount: Float
  currency: Currency
  shipToAddress: String
  soldToAddress: String
  billToAddress: String
  taxPercent: Float
  orderAmtBeforeVat: String
  orderAmtVat: String
  orderAmtAfterVat: String
  itemCategory: String
  routeId: String
  routeName: String
  internalCommentsToWarehouse: String
  internalCommentsToLogistic: String
  externalCommentsToCustomer: String
  productInformation: String
  paymentTermKey: String
  paymentTermDescTh: String
  poUploadFileName: String
  orderTypeDesc: String
  orderExtension: OrderExtension
  salesEmployee: String
}

type SalesOffice {
  """ID of sales_office"""
  id: ID

  """name of sales_office"""
  name: String

  """code of sales_office"""
  code: String
}

type SalesGroup {
  """ID of sales_group"""
  id: ID

  """name of sales_group"""
  name: String

  """code of sales_group"""
  code: String
  salesOrganization: SalesOrganization
  company: SapMigrationCompany
}

type SapMigrationCompany {
  id: ID
  name: String
  code: String
  businessUnit: BusinessUnit
}

type CipTempOrderLine {
  id: ID
  materialCode: String
  materialType: String
  materialDescription: String
  quantity: Float
  customerMatCode: String
  plant: String
  requestDate: Date
  paymentTermItem: String
  productionFlag: String
  itemNo: String
  priceCurrency: String
  weight: Float
  salesUnit: String
  weightUnit: String
  overDeliveryTol: Float
  underDeliveryTol: Float
  prcGroup1: String
  bomFlag: Boolean
  parentId: ID
  parentItemNo: String
  batchNo: String
  salesUnitList: [CipConversion2Master]
  batchFlag: Boolean
  netPrice: Float
  price: Float
  internalCommentsToWarehouse: String
  additionalRemark: String
  remark: String
  shipTo: String
  productInformation: String
  paymentTerm: String
  confirmedDate: Date
  overdue1: Boolean
  overdue2: Boolean
  attentionType: String
  dtr: String
  dtp: String
  originalRequestDate: Date
  delivery: String
  actualGiDate: Date
  giStatus: String
  billTo: String
  externalCommentsToCustomer: String
  internalCommentsToLogistic: String
  shippingPoint: String
  route: String
  itemCategory: String
  deliveryTolUnlimited: Boolean
  poNo: String
  poDate: Date
  priceDate: Date
  requestDateChangeReason: String
  poNoExternal: String
  paymentCondition: String
  unit: String
  status: String
  orderQuantityTon: Float
  splitItems: [CipTempOrderLine]
  weightUnitTon: String
  netWeightTon: String
  atpCtpStatus: String
  itemStatusEn: String
  itemStatusTh: String
  assignedQuantity: Float
  inquiryMethod: String
  nonConfirmQuantity: Float
  confirmQuantity: Float
  sapConfirmStatus: String
  descriptionEn: String
  remaining: Float
  shippingMark: String
  poItemNo: String
  saleText1: String
  saleText2: String
  saleText3: String
  saleText4: String
  batchChoiceFlag: Boolean
  itemNote: String
  lotNo: String
  prItemText: String
  productionMemo: String
  otcShipTo: OrderOtcPartner
  bomUnitQuantity: Float
  deliveryTolUnder: Float
  deliveryTolOver: Float
}

type CipConversion2Master {
  toUnit: String
  fromUnit: String
  calculation: Float
}

type OrderOtcPartner {
  id: ID
  soldToCode: String
  partnerRole: String
  address: OrderOtcPartnerAddress
}

type OrderOtcPartnerAddress {
  addressCode: String
  name1: String
  name2: String
  name3: String
  name4: String
  city: String
  postalCode: String
  district: String
  street1: String
  street2: String
  street3: String
  street4: String
  location: String
  transportZoneCode: String
  transportZoneName: String
  countryCode: String
  countryName: String
  telephoneNo: String
  telephoneExtension: String
  mobileNo: String
  faxNo: String
  faxNoExt: String
  email: String
  language: String
  taxNumber1: String
  taxNumber2: String
  taxId: String
  branchId: String
}

type ScgpSalesEmployee {
  id: ID
  name: String
  code: String
}

type CustomerGroupMaster {
  id: ID
  code: String
  name: String
}

type CustomerGroup1Master {
  id: ID
  code: String
  name: String
}

type CustomerGroup2Master {
  id: ID
  code: String
  name: String
}

type CustomerGroup3Master {
  id: ID
  code: String
  name: String
}

type CustomerGroup4Master {
  id: ID
  code: String
  name: String
}

type Incoterms1Master {
  id: ID
  code: String
  description: String
}

type Currency {
  code: String
  name: String
}

type OrderExtension {
  additionalTxtFromHeader: String
  additionalTxtHeaderNote1: String
  additionalTxtCash: String
  taxClass: String
  otcSoldTo: OrderOtcPartner
  otcBillTo: OrderOtcPartner
  otcShipTo: OrderOtcPartner
  tempOrderNo: String
}

type CipPreviewOrderResponse {
  previewHeaderData: PreviewHeaderResponse
  previewItemData: [PreviewItemResponse]
  previewFooterData: PreviewItemFooterResponse
}

type PreviewHeaderResponse {
  soNo: String
  poNumber: String
  orderDate: String
  paymentTerm: String
  saleOrganization: String
  saleEmployee: String
  customerName: String
  shipTo: String
  billTo: String
}

type PreviewItemResponse {
  itemNo: String
  materialCode: String
  materialDescription: String
  quantity: Float
  salesUnit: String
  weight: Float
  weightUnit: String
  pricePerUnit: Float
  netPrice: Float
  requestDate: String
  confirmedDate: String
  plant: String
  confirmedPlant: String
  bomFlag: Boolean
  parentItemNo: String
  itemStatusEn: String
  itemStatusTh: String
}

type PreviewItemFooterResponse {
  netTotalPrice: Float
  totalVat: Float
  orderAmountAfterVat: Float
  currency: String
}

"""Response Object SoldToHeaderInfoType"""
type SoldToHeaderInfoType {
  soldTo: SoldToMaster
  orderType: String
  taxClassification: String
  shipTo: [SoldToPartnerAddressMaster]
  billTo: [SoldToPartnerAddressMaster]
  paymentTerm: [PaymentTermData]
  unloadingPoints: [CustomerUnloadingPoint]
  saleEmployee: String
  saleOrganization: SalesOrganizationMaster
  saleGroup: [SalesGroupMaster]
  saleOffice: SalesOfficeMaster
  division: DivisionMaster
  distributionChannel: DistributionChannelMaster
  defaultSaleGroup: SalesGroupMaster
  defaultUnloadingPoint: CustomerUnloadingPoint
  defaultShipTo: SoldToPartnerAddressMaster
  defaultBillTo: SoldToPartnerAddressMaster
  defaultPaymentTerm: PaymentTermData
  headerNote1En: SoldToTextMaster
  commentsToWarehouseEn: SoldToTextMaster
  headerNote1Th: SoldToTextMaster
  commentsToWarehouseTh: SoldToTextMaster
}

type SoldToPartnerAddressMaster {
  soldToCode: String
  partnerCode: String
  addressCode: String
  name1: String
  name2: String
  name3: String
  name4: String
  city: String
  postalCode: String
  district: String
  street: String
  streetSup1: String
  streetSup2: String
  streetSup3: String
  location: String
  transportZoneCode: String
  transportZoneName: String
  countryCode: String
  countryName: String
  telephoneNo: String
  telephoneExtension: String
  mobileNo: String
  faxNo: String
  email: String
  soldTo: SoldToMaster
  displayCodeName: String
  name: String
  addressText: String
  displayText: String
  code: String
}

"""Payment Term Object"""
type PaymentTermData {
  code: String
  name: String
  displayText: String
}

type CustomerUnloadingPoint {
  id: ID
  soldToCode: String
  factoryCalendar: String
  factoryCalendarDesc: String
  unloadingPoint: String
}

type SoldToTextMaster {
  soldToCode: String
  textId: String
  textIdDesc: String
  language: String
  textLine: String
}

type UnloadingPointForShipTo {
  shipTo: String
  unloadingPoints: [CustomerUnloadingPoint]
  defaultUnloadingPoint: CustomerUnloadingPoint
}

type SoldToPartnerAddressMasterCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [SoldToPartnerAddressMasterCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int

  """Item in last page."""
  latestPageItemNumber: Int
}

type SoldToPartnerAddressMasterCountableEdge {
  """The item at the end of the edge."""
  node: SoldToPartnerAddressMaster!

  """A cursor for use in pagination."""
  cursor: String!
}

input CipHeaderShipTosFilterInput {
  """"""
  id: Float
  metadata: [MetadataFilter!]
  search: String
}

type CipOrderViewData {
  id: ID
  soNo: String
  poNo: String
  distributionChannelCode: String
  distributionChannelName: String
  salesOrgCode: String
  salesOrgName: String
  salesOrgShortName: String
  salesOrgDisplayText: String
  salesOff: String
  salesOffName: String
  divisionCode: String
  divisionName: String
  priceDate: String
  status: String
  orderAmtBeforeVat: String
  orderAmtVat: String
  orderAmtAfterVat: String
  currency: String
  requestDate: String
  paymentTerms: String
  paymentTermsDisplayText: String
  salesEmployeeDisplayText: String
  orderDate: String
  salesGroupCode: String
  salesGroupName: String
  salesEmployee: String
  soldToCode: String
  soldToDisplayText: String
  billToDisplayText: String
  shipToDisplayText: String
  internalCommentsToLogistic: String
  internalCommentsToWarehouse: String
  externalCommentsToCustomer: String
  productionInformation: String
  formHeader: String
  headerNote1: String
  cash: String
  unloadingPoint: String
  dp: [DPNo]
  invoice: [InvoiceNo]
  orderPartners: [OrderPartners]
  otcOrderPartners: [OrderPartners]
  orderItems: [CipGetChangeOrderItemData]
  orderCondition: [OrderCondition]
  orderText: [OrderText]
  itemNoLatest: String
  poDate: String
  orderType: String
  orderTypeDesc: String
  taxClass: String
  paymentTermList: [String]
  oneTimeFlag: Boolean
}

type DPNo {
  dpNo: String
}

type InvoiceNo {
  invoiceNo: String
}

type OrderPartners {
  partnerRole: String
  partnerNo: String
  addrLink: String
  payerName: String
  address: [PartnersAddress]
  itemNo: String
  oneTimeFlag: Boolean
}

type PartnersAddress {
  addrNo: String
  name: String
  city: String
  postCode: String
  district: String
  street: String
  transpzone: String
  country: String
  nameForPartners: String
  location: String
  strSuppl1: String
  strSuppl2: String
  strSuppl3: String
  telNoList: [TelNoList]
  mobileNo: String
  faxNo: String
  faxNoExt: String
  language: String
  orderTaxNumber: OrderTaxNumber
  countryName: String
}

type TelNoList {
  telNo: String
  telNoExt: String
}

type OrderTaxNumber {
  taxNumber1: String
  taxNumber2: String
  taxId: String
  branchId: String
}

type CipGetChangeOrderItemData {
  id: ID
  itemNo: String
  materialCode: String
  materialDescription: String
  quantity: String
  bomFlag: Boolean
  manualPriceFlag: Boolean
  materialType: String
  customerMatCode: String
  salesUnit: String
  plant: String
  paymentTerm: String
  paymentTermDescTh: String
  poNo: String
  poItemNumber: String
  prNoOs: String
  prItemOs: String
  poNoOs: String
  poItemNoOs: String
  grStatusOs: String
  itemStatusEn: String
  itemStatusTh: String
  productionFlag: String
  priceDate: String
  saleQtyFactor: Int
  saleQtyDivision: String
  weightUnit: String
  baseUnit: String
  deliveryBlock: Boolean
  shippingPoint: String
  overDeliveryTol: Float
  underDeliveryTol: Float
  deliveryTolUnlimited: String
  shipTo: String
  internalCommentsToWarehouse: String
  externalCommentsToCustomer: String
  saleText1: String
  saleText2: String
  saleText3: String
  saleText4: String
  remark: String
  itemNote: String
  prItemText: String
  lotNo: String
  productionMemo: String
  itemCategory: String
  materialGroup1: String
  routeId: String
  routeName: String
  requestDate: String
  originalRequestDate: String
  weightPerUnit: String
  orderQty: String
  confirmQty: String
  deliveryQty: String
  assignQuantity: Float
  deliveryStatus: String
  prdHierachy: String
  poDate: String
  reasonReject: String
  confirmedDate: String
  weight: Float
  refPiStock: String
  netValue: Float
  requestDateChangeReason: String
  weightDisplay: String
  poStatus: String
  materialGroup1Desc: String
  parentItemNo: String
  pricePerUnit: String
  netWeight: String
  priceCurrency: String
  grossWeight: String
  isSplitEnabled: Boolean
  batchNo: String
  batchFlag: Boolean
  batchChoiceFlag: Boolean
  salesUnitList: [CipConversion2Master]
  bomUnitQuantity: Float
}

type OrderCondition {
  itemNo: String
  conditionType: String
  conditionRate: String
  currency: String
  conditionUnit: String
  conditionPriceUnit: String
  conditionPriceOrder: String
  conditionBaseValue: String
}

type OrderText {
  itemNo: String
  textId: String
  language: String
  textLine: [TextLine]
}

type TextLine {
  text: String
}

type OrderEmailRecipient {
  to: String
  cc: String
}

type EmailPendingOrder {
  soldToName: String
  to: String
  cc: String
}

type OrderTypeResponse {
  value: String
  label: String
  bu: String
}

type GetSaleOrgDistChannelBySoldToRes {
  salesOrganization: [SalesOrganization]
  distributionChannel: [DistributionChannel]
  salesOrgByDistChannel: [SaleOrgByDistChannelRes]
  distChannelBySalesOrg: [DistChannelBySalesOrgRes]
}

type SaleOrgByDistChannelRes {
  salesOrg: String
  distributionChannel: [DistributionChannel]
}

type DistChannelBySalesOrgRes {
  distributionChannel: String
  salesOrg: [SalesOrganization]
}

type ContractCheckoutLine {
  """ID of checkout line"""
  id: ID
  quantity: Float
  price: Float
  product: TempProduct
  variant: TempProductVariant
  contractProduct: TempContractProduct
  selected: Boolean
}

type TempProduct {
  """ID of product"""
  id: ID

  """name of product"""
  name: String

  """unit of product"""
  salesUnit: String
  variants: [TempProductVariant]

  """Full code of product"""
  code: String
  grade: String
  gram: String

  """Short code of product"""
  gradeGram: String

  """Dia of product"""
  dia: String

  """Base unit of product"""
  baseUnit: String
  purchaseUnit: String
  description: String
  orderUnit: String
  descriptionEn: String
  materialType: String
  limitQuantity: Float
  weight: Float

  """material code of product"""
  materialCode: String
}

type TempProductVariant {
  """ID of product variant"""
  id: ID

  """code of product variant"""
  code: String

  """name of product variant"""
  name: String

  """weight per unit"""
  weight: String
  descriptionTh: String
  descriptionEn: String
  type: String
  salesUnit: String
  status: String
  determineType: String
  keyCombination: String
  validFrom: Date
  validTo: Date
  proposeReason: String
  grade: String
  basisWeight: String
  diameter: String
  gradeGram: String
  dia: String
  gram: String
  widthOfRoll: String
  lengthOfRoll: String
  variantType: String
  limitQuantity: Float
}

type TempContractProduct {
  """ID of contract product"""
  id: ID

  """name of product"""
  name: String
  price: Float
  total: Float
  remain: Float
  salesUnit: String

  """ID of material"""
  productId: ID
  product: TempProduct

  """ID of contract"""
  contractId: ID
  contract: TempContract
  plant: String
  deliveryUnder: Float
  deliveryOver: Float
  currency: String
  weight: Float
  weightUnit: String
  materialDescription: String
  itemNo: String
  matGroup1: String
  prcGroup1: String
  matGroup1Desc: String

  """material code of product"""
  materialCode: String
}

type TempContract {
  """ID of scg_contract"""
  id: ID

  """SO number of the order"""
  soNo: String
  contractNo: String
  company: CheckoutCompany
  projectName: String
  startDate: Date
  endDate: Date
  paymentTerm: String
  products(sortBy: ProductSortingInput): [TempContractProduct]
  customer: SoldToMaster
  poDate: Date
  prcGroup1: String
  shipTo: String
  billTo: String
  externalCommentsToCustomer: String
  productInformation: String
  salesOrganization: SalesOrganization
  distributionChannel: DistributionChannel
  division: ScgDivision
  salesGroup: SalesGroup
  salesOffice: SalesOffice
  internalCommentsToWarehouse: String
  currency: String
  paymentTermKey: String
  paymentTermDescTh: String
  remark: String
}

input ProductSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Specifies the field in which to sort products."""
  field: ScgProductOrderField!
}

enum ScgProductOrderField {
  TOTAL_QUANTITY
  REMAINING_QUANTITY
  PRICE_PER_UNIT
}

type StockOnHandReport {
  productCode: String
  totalUr: Float
  customerOrderQuantity: Float
  consignmentQuantity: Float
  freeQuantity: Float
  unit: String
  summaryAsOf: String
  customerOrderList: [CustomerOrderList]
  consignmentList: [ConsignmentList]
  freeStockList: [FreeStockList]
  allPlant: [String]
}

type CustomerOrderList {
  customer: String
  soNoSlashItem: String
  quantity: Float
  pendingQuantity: Float
  requestDate: String
  plant: String
  soNo: String
  createDate: String
  createBy: ScgpUser
  saleRep: String
  poNo: String
}

type ConsignmentList {
  customerSession: String
  quantity: Float
  futureDummyStock: Float
  plant: String
}

type FreeStockList {
  plant: String
  quantity: Float
}

input GetOnHandReportInput {
  code: String
  unit: String
  type: String
}

type MaterialCodeDescriptionCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [MaterialCodeDescriptionCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type MaterialCodeDescriptionCountableEdge {
  """The item at the end of the edge."""
  node: TempProductVariant!

  """A cursor for use in pagination."""
  cursor: String!
}

input MaterialCodeDescriptionFilterInput {
  """"""
  id: Float
  metadata: [MetadataFilter!]
  material: String
}

type LmsReportCustomer {
  dpNo: String
  poNo: String
  soNo: String
  itemNo: String
  departurePlacePositions: String
  materialDescription: String
  quantity: Float
  shipTo: String
  giDate: DateTime
  carRegistrationNo: String
  estimateDateTime: DateTime
  transportStatus: String
  currentPosition: String
  remainingDistanceAsKilometer: String
  estimatedArrivalDatetime: String
  saleUnit: String
  gpsTracking: CustomerGpsTracking
}

type CustomerGpsTracking {
  carRegistrationNo: String
  currentPosition: String
  carrier: String
  velocity: Float
  lastSignalReceivedDatetime: DateTime
  paymentNumber: String
  deliveryPlace: String
  carStatus: String
  destinationReachTime: Time
  estimatedToCustomerFromCurrentLocation: Time
  remainingDistanceAsKilometer: String
  estimateArrivalTime: Time
  distanceFromFactoryToCustomer: Float
  isssuanceOfInvoiceDate: DateTime
  deliveryDeadline: DateTime
  shipmentNo: String
  estimatedTime: String
}

"""
The `Time` scalar type represents a Time value as
specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Time

input CustomerLmsReportInput {
  soldTo: [String]
  materialNo: [String]
  poNo: String
  soNo: String
  saleOrganization: String
  deliveryDate: CustomerLmsReportDateInput
}

input CustomerLmsReportDateInput {
  gte: Date
  lte: Date
}

type RouteCountTableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [RouteCountTableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int

  """Item in last page."""
  latestPageItemNumber: Int
}

type RouteCountTableEdge {
  """The item at the end of the edge."""
  node: Route!

  """A cursor for use in pagination."""
  cursor: String!
}

type Route {
  id: Int
  routeCode: String
  routeDescription: String
}

input RouteFilterInput {
  routeCode: String
  routeDescription: String
}

type MaterialSaleMaster {
  materialCode: String
  salesOrganizationCode: String
  distributionChannelCode: String
  salesUnit: String
  taxClass1: String
  taxClass1Desc: String
  materialGroup1: String
  materialGroup1Desc: String
  materialGroup2: String
  materialGroup2Desc: String
  materialGroup3: String
  materialGroup3Desc: String
  materialGroup4: String
  materialGroup4Desc: String
  materialGroup5: String
  materialGroup5Desc: String
  deliveryPlant: String
  deliveryPlantDesc: String
  prodh: String
  prodhDesc: String
  prodh1: String
  prodh1Desc: String
  prodh2: String
  prodh2Desc: String
  prodh3: String
  prodh3Desc: String
  prodh4: String
  prodh4Desc: String
  prodh5: String
  prodh5Desc: String
  prodh6: String
  prodh6Desc: String
  materialPriceGroup: String
  materialPriceGroupDesc: String
  itemCategoryGroup: String
  itemCategoryGroupDesc: String
  status: String
  saleText1Th: String
  saleText2Th: String
  saleText3Th: String
  saleText4Th: String
  saleText1En: String
  saleText2En: String
  saleText3En: String
  saleText4En: String
  xchannelStatus: String
  xchannelStatusDesc: String
  xchannelStatusValidFrom: String
  distributionChannelStatus: String
  distributionChannelStatusDesc: String
  distributionChannelStatusValidFrom: String
  acctAsssmtGrpMat: String
}

type ReportListOfSalesOrderCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [ReportListOfSalesOrderCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int

  """Item in last page."""
  latestPageItemNumber: Int
}

type ReportListOfSalesOrderCountableEdge {
  """The item at the end of the edge."""
  node: ReportListOfSalesOrder!

  """A cursor for use in pagination."""
  cursor: String!
}

type ReportListOfSalesOrder {
  id: ID
  soldToCode: String
  soldToName: String
  salesOrder(
    """Sort_by"""
    sortBy: [InputSalesOrder]
    filter: SalesOrderFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): SalesOrderCountableConnection
  summary(
    filter: SalesOrderFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): SummaryCountableConnection
}

type SalesOrderCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [SalesOrderCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int

  """Item in last page."""
  latestPageItemNumber: Int
}

type SalesOrderCountableEdge {
  """The item at the end of the edge."""
  node: SalesOrder!

  """A cursor for use in pagination."""
  cursor: String!
}

type SalesOrder {
  id: ID
  requireAttentionFlag: String
  createBy: String
  createDateTime: DateTime
  saleGroup: String
  salesOrg: String
  soldTo: String
  poNo: String
  originalRequestDate: Date
  createDate: Date
  reqDeliveryDate: Date
  confirmDate: Date
  orderNo: String
  orderItem: String
  materialCodeDescription: String
  materialCode: String
  orderQty: Float
  confirmOrderQty: Float
  deliveryQty: Float
  pendingQty: Float
  unit: String
  plant: String
  shippingPoint: String
  orderWeight: Float
  deliveryWeight: Float
  pendingWeight: Float
  weightUnit: String
  netPrice: Float
  netValue: Float
  currency: String
  rejection: String
  deliveryBlock: String
  overdue1: Boolean
  overdue2: Boolean
  orderId: ID
}

input InputSalesOrder {
  soldToId: ID!
  direction: SalesOrderSortingInput!
}

input SalesOrderSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort salesOrder by the selected field."""
  field: SalesOrderSortField!
}

enum SalesOrderSortField {
  CREATE_DATE
  PO_NO
  ORDER_NO
  REQUEST_DATE
}

input SalesOrderFilterInput {
  """"""
  id: Float
  metadata: [MetadataFilter!]
  saleOrg: String
  channel: String
  orderType: String
  saleGroup: String
  soldTo: [[String]!]
  createDate: DateRangeInput
  requestDeliveryDate: DateRangeInput
  saleOrderNo: String
  purchaseOrderNo: String
  salesEmployeeNo: String
  materialNoMaterialDescription: [String!]
  materialPricingGroup: MaterialPricingGroupEnum
  plant: String
  materialGroup1: [[String]!]
  deliveryBlock: DeliveryBlock09Enum
  createBy: String
  status: SaleOrderStatusEnum
  requireAttentionFlag: ScgpRequireAttentionTypeData
}

enum MaterialPricingGroupEnum {
  STANDARD
  NON_STANDARD
}

enum DeliveryBlock09Enum {
  BLOCK
  UNBLOCK
}

enum SaleOrderStatusEnum {
  ALL
  PENDING
  COMPLETE
}

enum ScgpRequireAttentionTypeData {
  ALL
  R1
  R2
  R3
  R4
  R5
}

type SummaryCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [SummaryCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int

  """Item in last page."""
  latestPageItemNumber: Int
}

type SummaryCountableEdge {
  """The item at the end of the edge."""
  node: Summary!

  """A cursor for use in pagination."""
  cursor: String!
}

type Summary {
  orderQty: Float
  confirmOrderQty: Float
  deliveryQty: Float
  pendingQty: Float
  unit: String
  orderWeight: Float
  deliveryWeight: Float
  pendingWeight: Float
  weightUnit: String
  netPrice: Float
  netValue: Float
  currency: String
}

type RequireAttentionFlag {
  key: String
  value: String
}

type SourceOfApp {
  key: String
  value: String
}

type ExportOrder {
  id: ID
  pi: SapContract
  totalPrice: Float
  taxAmount: Float
  currency: String
  status: String
  requestDeliveryDate: Date
  orderType: String
  salesOrganization: SalesOrganizationMaster
  distributionChannel: DistributionChannelMaster
  division: DivisionMaster
  salesOffice: SalesOfficeMaster
  salesGroup: SalesGroupMaster
  shipTo: String
  billTo: String
  poDate: Date
  poNo: String
  requestDate: Date
  refPiNo: String
  netPrice: Float
  docCurrency: String
  paymentTerm: String
  incoterm: String
  usage: String
  unloadingPoint: String
  placeOfDelivery: String
  portOfDischarge: String
  portOfLoading: String
  noOfContainers: String
  shippingMark: String
  uom: String
  gwUom: String
  etd: String
  eta: String
  dlcExpiryDate: Date
  dlcNo: String
  dlcLatestDeliveryDate: Date
  description: String
  payer: String
  endCustomer: String
  contactPerson: String
  salesEmployee: String
  author: String
  paymentInstruction: String
  remark: String
  productionInformation: String
  internalCommentToWarehouse: String
  createdBy: ScgUser
  createdAt: DateTime
  updatedAt: DateTime
  lines: [ExportOrderLine]
  eoNo: String
  statusSap: String
  orderNo: String
  scgpSalesEmployee: ScgpSalesEmployee
  contractType: String
  soldToAddress: String
  soNo: String
  taxPercent: Float
  incoterms2: String
}

type SapContract {
  id: ID
  code: String
  poNo: String
  soldToCode: String
  projectName: String
  startDate: Date
  endDate: Date
  paymentTerm: String
  incoterm: String
  companyCode: String
  soldTo: SoldToMaster
  businessUnit: BusinessUnits
  company: CompanyMaster
  soldToName: String
  shipToName: String
  shipToCountry: String
  piProducts(
    sortBy: ExportPIProductsSortingInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ContractMaterialCountTableConnection
  allPiProducts: [ContractMaterial]
  poDate: Date
  shipTo: String
  billTo: String
  externalCommentsToCustomer: String
  productInformation: String
  salesOrganization: SalesOrganizationMaster
  distributionChannel: DistributionChannelMaster
  division: DivisionMaster
  salesGroup: SalesGroupMaster
  salesOffice: SalesOfficeMaster
  internalCommentsToWarehouse: String
  currency: String
  paymentTermKey: String
  etd: Date
  eta: Date
  placeOfDelivery: String
}

type CompanyMaster {
  id: Int
  code: String
  name: String
  businessUnit: BusinessUnits
  user: User
  shortName: String
  fullName: String
}

type ContractMaterialCountTableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [ContractMaterialCountTableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int

  """Item in last page."""
  latestPageItemNumber: Int
}

type ContractMaterialCountTableEdge {
  """The item at the end of the edge."""
  node: ContractMaterial!

  """A cursor for use in pagination."""
  cursor: String!
}

type ContractMaterial {
  id: ID
  itemNo: String
  materialCode: String
  contractNo: String
  totalQuantity: Float
  remainingQuantity: Float
  remainingQuantityEx: Float
  pricePerUnit: Float
  quantityUnit: String
  currency: String
  weightUnit: String
  weight: Float
  deliveryOver: Float
  deliveryUnder: Float
  plant: String
  contract: SapContract
  material: MaterialMaster
  product: MaterialMaster
  conditionGroup1: String
  commission: String
  commissionAmount: String
  comUnit: String
  calculation: String
  limitQuantity: Float
  matGroup1: String
}

type MaterialMaster {
  id: ID
  materialCode: String
  description: String
  descriptionTh: String
  descriptionEn: String
  materialGroup: String
  materialType: String
  materialTypeDesc: String
  baseUnit: String
  baseUnitDesc: String
  deleteFlag: String
  netWeight: Float
  grossWeight: Float
  weightUnit: String
  name: String
  salesUnit: String
  purchaseUnit: String
  widthOfRoll: String
  lengthOfRoll: String
  limitQuantity: Float
  code: String
}

input ExportPIProductsSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort exportPiProducts by the selected field."""
  field: ExportPIProductsSortField!
}

enum ExportPIProductsSortField {
  REMAINING_QUANTITY
  TOTAL_QUANTITY
  PRICE_PER_UNIT
  ITEM_NO
}

"""Represents user data."""
type ScgUser implements Node & ObjectWithMetadata {
  id: ID!

  """List of private metadata items. Requires staff permissions to access."""
  privateMetadata: [MetadataItem!]!

  """
  A single key from private metadata. Requires staff permissions to access.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafield(key: String!): String

  """
  Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafields(keys: [String!]): Metadata

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem!]!

  """
  A single key from public metadata.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafield(key: String!): String

  """
  Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafields(keys: [String!]): Metadata
  email: String!
  firstName: String!
  lastName: String!
  isStaff: Boolean!
  isActive: Boolean!
  displayName: String
  isSuperuser: Boolean

  """List of all user's addresses."""
  addresses: [Address!]

  """Returns the last open checkout of this user."""
  checkout: Checkout @deprecated(reason: "This field will be removed in Saleor 4.0. Use the `checkoutTokens` field to fetch the user checkouts.")

  """Returns the checkout UUID's assigned to this user."""
  checkoutTokens(
    """Slug of a channel for which the data should be returned."""
    channel: String
  ): [UUID!]

  """List of the user gift cards."""
  giftCards(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): GiftCardCountableConnection

  """
  A note about the customer. Requires one of the following permissions: MANAGE_USERS, MANAGE_STAFF.
  """
  note: String

  """
  List of user's orders. Requires one of the following permissions: AccountPermissions.MANAGE_STAFF, AuthorizationFilters.OWNER
  """
  orders(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): OrderCountableConnection

  """List of user's permissions."""
  userPermissions: [UserPermission!]

  """List of user's permission groups."""
  permissionGroups: [Group!]

  """List of user's permission groups which user can manage."""
  editableGroups: [Group!]
  avatar(
    """Size of the avatar."""
    size: Int
  ): Image

  """
  List of events associated with the user. Requires one of the following permissions: MANAGE_USERS, MANAGE_STAFF.
  """
  events: [CustomerEvent!]

  """List of stored payment sources."""
  storedPaymentSources(
    """Slug of a channel for which the data should be returned."""
    channel: String
  ): [PaymentSource!]

  """User language code."""
  languageCode: LanguageCodeEnum!
  defaultShippingAddress: Address
  defaultBillingAddress: Address
  lastLogin: DateTime
  dateJoined: DateTime!
  updatedAt: DateTime!
  company: Company
  distributionChannel: Channel
  division: Division
  office: Office
  customerNo: String
  saleGroups: [AuthGroup]
}

"""Represents user address data."""
type AuthGroup implements Node {
  """The ID of the object."""
  id: ID!

  """Name of group"""
  name: String
}

type ExportOrderLine {
  id: ID
  order: ExportOrder
  piProduct: ContractMaterial
  quantity: Float
  quantityUnit: String
  weight: Float
  weightUnit: String
  vatPercent: Float
  itemCatEo: String
  rejectReason: String
  refPiNo: String
  materialCode: String
  materialDescription: String
  conditionGroup1: String
  materialGroup2: String
  commissionPercent: Float
  commissionAmount: Float
  commissionUnit: String
  requestDate: Date
  plant: String
  route: String
  rollQuantity: String
  rollDiameter: String
  rollCoreDiameter: String
  rollPerPallet: String
  packageQuantity: String
  palletSize: String
  palletNo: String
  packingList: String
  shippingPoint: String
  deliveryTolUnder: Float
  deliveryTolOver: Float
  deliveryTolUnlimited: Boolean
  remark: String
  shippingMark: String
  cartItem: ExportCartItem
  netPrice: Float
  itemNo: Float
  confirmedDate: Date
  overdue1: Boolean
  overdue2: Boolean
  attentionType: String
  itemCatPi: String
  priceCurrency: String
  noOfRolls: String
  noOfPackage: String
  eoItemNo: String
  inquiryMethod: String
  itemStatusEn: String
  itemStatusTh: String
  assignedQuantity: Float
  paymentTerm: String
  isMaterialOutsource: Boolean
  salesUnit: String
}

type ExportCartItem {
  id: ID
  cart: ExportCart
  piProduct: ExportPIProduct
  quantity: Int
}

type ExportCart {
  id: ID
  pi: ExportPI
  soldTo: SoldToMaster
  createdBy: ScgUser
  items: [ExportCartItem]
  totalItems: Int
  isActive: Boolean
}

type ExportPI {
  id: ID
  soldTo: SoldToMaster
  code: String
  poNo: String
  soldToName: String
  shipToName: String
  shipToCountry: String
  incoterm: String
  paymentTerm: String
  piProducts(
    sortBy: ExportPIProductsSortingInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ExportPIProductCountTableConnection
  allPiProducts: [ExportPIProduct]
  currency: String
  paymentTermKey: String
  salesOrganizationCode: String
  shipTo: String
}

type ExportPIProductCountTableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [ExportPIProductCountTableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int

  """Item in last page."""
  latestPageItemNumber: Int
}

type ExportPIProductCountTableEdge {
  """The item at the end of the edge."""
  node: ExportPIProduct!

  """A cursor for use in pagination."""
  cursor: String!
}

type ExportPIProduct {
  id: ID
  itemNo: String
  pi: SapContract
  product: ExportProduct
  totalQuantity: Float
  remainingQuantity(orderId: ID): Float
  remainingQuantityEx(orderId: ID): Float
  pricePerUnit: Float
  quantityUnit: String
  currency: String
  weight: Float
  salesUnit: String
  weightUnit: String
  calculation: String
  limitQuantity: Float
  cartQuantity: Float
  matGroup1: String
  limitQuantityOrderLine: Float
}

type ExportProduct {
  id: ID
  name: String
  slug: String
  description: String
  grade: String
  gram: String
  materialGroup: ScgpMaterialGroup
  materialType: String
}

type ScgpMaterialGroup {
  id: ID
  name: String
  code: String
}

type RequireAttentionItems {
  id: Int
  type: String
  orderNo: String
  itemNo: Float
  soldTo: String
  shipTo: String
  requestDate: Date
  confirmedDate: Date
  poNo: String
  plant: String
  status: String
  unit: String
  material: String
  matCode: String
  matDescription: String
  requestQuantity: Float
  materialGroup: SAPScgpMaterialGroup
  grade: String
  gram: String
  overdue1: Boolean
  overdue2: Boolean
  salesOrganization: SAPSalesOrganization
  salesGroup: SAPSalesGroup
  scgpSalesEmployee: SAPScgpSalesEmployee
  extends: RequireAttention
  iPlan: RequireAttentionIPlan
  materialPricingGroup: String
}

type SAPScgpMaterialGroup {
  id: ID
  name: String
  code: String
}

type SAPSalesOrganization {
  """ID of sales_organization"""
  id: ID

  """name of sales_organization"""
  name: String

  """code of sales_organization"""
  code: String
  businessUnit: SAPBusinessUnit
}

type SAPBusinessUnit {
  """ID of business_unit"""
  id: ID

  """name of business_unit"""
  name: String

  """code of business_unit"""
  code: String
  companies: [SAPCheckoutCompany]
}

type SAPCheckoutCompany {
  """ID of company"""
  id: ID

  """code of company"""
  code: String

  """name of company"""
  name: String
  users(before: String, after: String, first: Int, last: Int): SAPCustomerCountableConnection
  businessUnit: SAPBusinessUnit
}

type SAPCustomerCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [SAPCustomerCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type SAPCustomerCountableEdge {
  """The item at the end of the edge."""
  node: SAPCustomer!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Represents user data."""
type SAPCustomer implements Node & ObjectWithMetadata {
  id: ID!

  """List of private metadata items. Requires staff permissions to access."""
  privateMetadata: [MetadataItem!]!

  """
  A single key from private metadata. Requires staff permissions to access.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafield(key: String!): String

  """
  Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafields(keys: [String!]): Metadata

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem!]!

  """
  A single key from public metadata.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafield(key: String!): String

  """
  Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafields(keys: [String!]): Metadata
  email: String!
  firstName: String!
  lastName: String!
  isStaff: Boolean!
  isActive: Boolean!
  displayName: String
  isSuperuser: Boolean

  """List of all user's addresses."""
  addresses: [Address!]

  """Returns the last open checkout of this user."""
  checkout: Checkout @deprecated(reason: "This field will be removed in Saleor 4.0. Use the `checkoutTokens` field to fetch the user checkouts.")

  """Returns the checkout UUID's assigned to this user."""
  checkoutTokens(
    """Slug of a channel for which the data should be returned."""
    channel: String
  ): [UUID!]

  """List of the user gift cards."""
  giftCards(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): GiftCardCountableConnection

  """
  A note about the customer. Requires one of the following permissions: MANAGE_USERS, MANAGE_STAFF.
  """
  note: String

  """
  List of user's orders. Requires one of the following permissions: AccountPermissions.MANAGE_STAFF, AuthorizationFilters.OWNER
  """
  orders(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): OrderCountableConnection

  """List of user's permissions."""
  userPermissions: [UserPermission!]

  """List of user's permission groups."""
  permissionGroups: [Group!]

  """List of user's permission groups which user can manage."""
  editableGroups: [Group!]
  avatar(
    """Size of the avatar."""
    size: Int
  ): Image

  """
  List of events associated with the user. Requires one of the following permissions: MANAGE_USERS, MANAGE_STAFF.
  """
  events: [CustomerEvent!]

  """List of stored payment sources."""
  storedPaymentSources(
    """Slug of a channel for which the data should be returned."""
    channel: String
  ): [PaymentSource!]

  """User language code."""
  languageCode: LanguageCodeEnum!
  defaultShippingAddress: Address
  defaultBillingAddress: Address
  lastLogin: DateTime
  dateJoined: DateTime!
  updatedAt: DateTime!
  company: Company
  distributionChannel: Channel
  division: Division
  office: Office
  customerNo: String
}

type SAPSalesGroup {
  """ID of sales_group"""
  id: ID

  """name of sales_group"""
  name: String

  """code of sales_group"""
  code: String
  salesOrganization: SAPSalesOrganization
  company: SAPCheckoutCompany
}

type SAPScgpSalesEmployee {
  id: ID
  name: String
  code: String
}

type RequireAttention {
  items: RequireAttentionItems
  attentionType: String
  iplantConfirmQuantity: Float
  itemStatus: String
  originalDate: Date
  inquiryMethodCode: String
  transportationMethod: Int
  typeOfDelivery: String
  fixSourceAssignment: String
  splitOrderItem: String
  partialDelivery: String
  consignment: String
  typeOfDeliveryValue: String
  splitOrderItemValue: String
  partialDeliveryValue: String
  consignmentValue: String
  overdue1: Boolean
  overdue2: Boolean
}

type RequireAttentionIPlan {
  items: RequireAttentionItems
  atpCtp: String
  atpCtpDetail: String
  block: String
  run: String
}

type CreateByCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [CreateByCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int

  """Item in last page."""
  latestPageItemNumber: Int
}

type CreateByCountableEdge {
  """The item at the end of the edge."""
  node: CreateBy!

  """A cursor for use in pagination."""
  cursor: String!
}

type CreateBy {
  id: ID!
  email: String!
  firstName: String!
  lastName: String!
  isStaff: Boolean!
  isActive: Boolean!
  displayName: String
  isSuperuser: Boolean

  """List of all user's addresses."""
  addresses: [Address!]

  """Returns the last open checkout of this user."""
  checkout: Checkout @deprecated(reason: "This field will be removed in Saleor 4.0. Use the `checkoutTokens` field to fetch the user checkouts.")

  """Returns the checkout UUID's assigned to this user."""
  checkoutTokens(
    """Slug of a channel for which the data should be returned."""
    channel: String
  ): [UUID!]

  """List of the user gift cards."""
  giftCards(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): GiftCardCountableConnection

  """
  A note about the customer. Requires one of the following permissions: MANAGE_USERS, MANAGE_STAFF.
  """
  note: String

  """
  List of user's orders. Requires one of the following permissions: AccountPermissions.MANAGE_STAFF, AuthorizationFilters.OWNER
  """
  orders(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): OrderCountableConnection

  """List of user's permissions."""
  userPermissions: [UserPermission!]

  """List of user's permission groups."""
  permissionGroups: [Group!]

  """List of user's permission groups which user can manage."""
  editableGroups: [Group!]
  avatar(
    """Size of the avatar."""
    size: Int
  ): Image

  """
  List of events associated with the user. Requires one of the following permissions: MANAGE_USERS, MANAGE_STAFF.
  """
  events: [CustomerEvent!]

  """List of stored payment sources."""
  storedPaymentSources(
    """Slug of a channel for which the data should be returned."""
    channel: String
  ): [PaymentSource!]

  """User language code."""
  languageCode: LanguageCodeEnum!
  defaultShippingAddress: Address
  defaultBillingAddress: Address
  lastLogin: DateTime
  dateJoined: DateTime!
  updatedAt: DateTime!
  company: Company
  distributionChannel: Channel
  division: Division
  office: Office
  userId: ID
}

input SuggestionSearchUserByNameFilterInput {
  search: String
}

type MaterialVariantMasterCountTableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [MaterialVariantMasterCountTableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int

  """Item in last page."""
  latestPageItemNumber: Int
}

type MaterialVariantMasterCountTableEdge {
  """The item at the end of the edge."""
  node: MaterialVariantMaster!

  """A cursor for use in pagination."""
  cursor: String!
}

type MaterialVariantMaster {
  material: MaterialMaster
  name: String
  code: String
  weight: Float
  descriptionTh: String
  descriptionEn: String
  type: String
  salesUnit: String
  status: String
  determineType: String
  keyCombination: String
  validFrom: Date
  validTo: Date
  proposeReason: String
  grade: String
  basisWeight: String
  diameter: String
  suggestionMaterialGradeGram: String
}

input SuggestionSearchMaterialGradeGramFilterInput {
  metadata: [MetadataFilter!]
  input: String
  materialOnHand: String
}

type ReportOrderPendingSoldToCountTableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [ReportOrderPendingSoldToCountTableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int

  """Item in last page."""
  latestPageItemNumber: Int
}

type ReportOrderPendingSoldToCountTableEdge {
  """The item at the end of the edge."""
  node: ReportOrderPendingSoldTo!

  """A cursor for use in pagination."""
  cursor: String!
}

type ReportOrderPendingSoldTo {
  id: Int
  name: String
  code: String
}

input ReportOrderPendingSoldToFilterInput {
  """"""
  id: Float
  metadata: [MetadataFilter!]
  soldTo: String
}

type ReportOrderPendingShipToItems {
  name: String
  code: String
}

type SAPListOfSaleOrder {
  totalSoldTo: Int
  soldTo: String
  soldToName1: String
  orderLines: [SAPOrderLine]
  summary: SAPListOfSaleOrderSummary
}

type SAPOrderLine {
  createDateTime: String
  salesOrg: String
  salesGroup: String
  soldTo: String
  poNo: String
  originalRequestDate: String
  createDate: String
  reqDeliveryDate: String
  orderNo: String
  itemNo: String
  matNo: String
  matDesc: String
  materialPricingGroup: String
  orderQty: String
  confirmOrderQty: String
  deliveryQty: String
  pendingQty: String
  unit: String
  plant: String
  shippingPoint: String
  orderWeight: String
  deliveryWeight: String
  pendingWeight: String
  weightUnit: String
  netPrice: String
  netValue: String
  currency: String
  rejection: String
  deliveryBlock: String
  eOrderingOverdue1: Boolean
  eOrderingOverdue2: Boolean
  eOrderingRequiredAttentionFlag: String
  eOrderingCreateBy: String
  eOrderingConfirmDate: String
  confirmQty: String
  nonConfirmQty: String
  shipToName: String
  eOrderingRequestDate: String
  eOrderingItemStatus: String
  iplanConfirmDate: String
  sapStatus: String
  isNotRef: Boolean
  priceDate: String
  bomFlag: Boolean
  parentItemNo: String
  trackingUrl: String
  orderTrackingStatus: String
}

type SAPListOfSaleOrderSummary {
  orderQty: String
  confirmOrderQty: String
  deliveryQty: String
  pendingQty: String
  unit: String
  orderWeight: String
  deliveryWeight: String
  pendingWeight: String
  weightUnit: String
  netPrice: String
  netValue: String
  currency: String
  quantityData: [QuantitySummaryData]
}

type QuantitySummaryData {
  orderQty: String
  confirmOrderQty: String
  deliveryQty: String
  pendingQty: String
  quantityUnit: String
}

input SAPListOfSaleOrderInput {
  soldTo: [String]
  saleOrg: String
  channel: String
  materialNoMaterialDescription: [String]
  orderType: String
  saleGroup: String
  createDate: SAPListOfSaleOrderDateInput
  requestDeliveryDate: SAPListOfSaleOrderDateInput
  materialGroup1: String
  materialPricingGroup: MaterialPricingGroupEnum
  purchaseOrderNo: String
  saleOrderNo: String
  plant: String
  deliveryBlock: String
  status: SaleOrderStatusEnum
  requireAttentionFlag: String
  salesEmployeeNo: String
  createBy: String
  sortByField: SoldToSortInput
  sourceOfApp: String
  bu: String
  isOrderTracking: Boolean
}

input SAPListOfSaleOrderDateInput {
  gte: Date
  lte: Date
}

input SoldToSortInput {
  soldTo: String
  sortField: String
  sortType: String
}

type SAPListOfSaleOrderPending {
  soldTo: String
  soldToName: String
  productGroups: [SAPListOfSaleOrderLineGroup]
}

type SAPListOfSaleOrderLineGroup {
  productGroup: String
  materialGroup: String
  orderLines: [SAPOrderLinePending]
  summary: [SAPListOfSaleOrderPendingSummary]
}

type SAPOrderLinePending {
  saleOrg: String
  soldTo: String
  shipTo: String
  requestDate: String
  orderDate: String
  poNo: String
  soNo: String
  itemNo: String
  materialCode: String
  materialDescription: String
  orderQty: String
  pendingQty: String
  atpQty: String
  ctpQty: String
  deliveryQty: String
  saleUnit: String
  confirmDate: String
  shipToName: String
  shipToCode: String
  shipToPoDate: String
  bomFlag: Boolean
  parentItemNo: String
}

type SAPListOfSaleOrderPendingSummary {
  orderQty: String
  pendingQty: String
  atpQty: String
  ctpQty: String
  deliveryQty: String
  saleUnit: String
}

input SAPListOfSaleOrderPendingInput {
  soldTo: [String]
  saleOrg: [String]!
  shipTo: String
  materialNoMaterialDescription: [String]
  productGroups: String
  createDate: SAPListOfSaleOrderDateInput
  requestDeliveryDate: SAPListOfSaleOrderDateInput
  poNo: String
  soNo: String
  transactions: [String]
  bu: String
  isOrderTracking: Boolean
  sourceOfApp: String
}

type SAPListOfSaleOrderAndExcel {
  excel: String
  listOfSaleOrderSap: [SAPListOfSaleOrder]
}

type ShowATPCTPPopup {
  status: Boolean
  itemErrors: [String]
  flag: String
}

type PoUploadCustomerSettingsCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [PoUploadCustomerSettingsCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int

  """Item in last page."""
  latestPageItemNumber: Int
}

type PoUploadCustomerSettingsCountableEdge {
  """The item at the end of the edge."""
  node: PoUploadCustomerSettings!

  """A cursor for use in pagination."""
  cursor: String!
}

type PoUploadCustomerSettings {
  id: ID
  soldTo: SoldToMaster
  useCustomerMaster: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  updatedBy: User
}

type SoldToMasterCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [SoldToMasterCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int

  """Item in last page."""
  latestPageItemNumber: Int
}

type SoldToMasterCountableEdge {
  """The item at the end of the edge."""
  node: SoldToMaster!

  """A cursor for use in pagination."""
  cursor: String!
}

input SoldToMasterFilterInput {
  """"""
  id: Float
  metadata: [MetadataFilter!]
  soldTo: String
}

type POUploadFileLogCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [POUploadFileLogCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int

  """Item in last page."""
  latestPageItemNumber: Int
}

type POUploadFileLogCountableEdge {
  """The item at the end of the edge."""
  node: POUploadFileLog!

  """A cursor for use in pagination."""
  cursor: String!
}

type POUploadFileLog {
  id: ID
  fileName: String
  createdAt: DateTime
  updatedAt: DateTime
  file: String
  uploadedBy: User
  status: String
  note: String
}

input POUploadFileLogSorterInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort poUploadFileLogs by the selected field."""
  field: POUploadFileLogField!
}

enum POUploadFileLogField {
  UPDATED_AT
}

input ScgSoldTosFilterInput {
  """"""
  id: Float
  metadata: [MetadataFilter!]
  search: String
}

type TempProductCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [TempProductCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type TempProductCountableEdge {
  """The item at the end of the edge."""
  node: MaterialInfo!

  """A cursor for use in pagination."""
  cursor: String!
}

type MaterialInfo {
  """ID of product"""
  id: ID

  """name of product"""
  name: String

  """unit of product"""
  salesUnit: String
  variants: [TempProductVariant]

  """Full code of product"""
  code: String
  grade: String
  gram: String

  """Dia of product"""
  dia: String

  """Base unit of product"""
  baseUnit: String
  purchaseUnit: String
  description: String
  orderUnit: String
  descriptionEn: String
  materialType: String
  limitQuantity: Float
  weight: Float
}

input SuggestionMaterialFilterInput {
  search: String
}

type AlternativeMaterialOsCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [AlternativeMaterialOsCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int

  """Item in last page."""
  latestPageItemNumber: Int

  """last_update_event"""
  lastUpdateDate: DateTime
}

type AlternativeMaterialOsCountableEdge {
  """The item at the end of the edge."""
  node: AlternativeMaterialOs!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Alternative material os data."""
type AlternativeMaterialOs {
  id: ID
  alternativeMaterial: AlternativeMaterial
  materialOs: MaterialInfo

  """Priority of Alternative material."""
  priority: Int!
  diameter: String
}

"""Alternative material data."""
type AlternativeMaterial {
  id: ID
  salesOrganization: SalesOrganization
  soldTo: SoldToMaster
  materialOwn: MaterialInfo

  """Type of Alternative material"""
  type: String
  materialsOs: [AlternativeMaterialOs]
  createdBy: User
  updatedBy: User
  createdAt: DateTime!
  updatedAt: DateTime!
}

input AlterMaterialFilterInput {
  soldTo: String
  materialCode: String
  grade: String
  gram: String
}

input AlternativeMaterialOsInput {
  """Specifies the direction in which to sort alter material os."""
  direction: OrderDirection!

  """Sort alternatedMaterial by the selected field."""
  field: AlternatedMaterialOsSortField!
}

enum AlternatedMaterialOsSortField {
  SALE_ORG
  SOLD_TO
  MATERIAL_INPUT
  ALTERNATED_MATERIAL
  DIA
  TYPE
  PRIORITY
  LAST_UPDATED_DATE
  LAST_UPDATED_BY
}

type AlternatedMaterialCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [AlternatedMaterialCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int

  """Item in last page."""
  latestPageItemNumber: Int
}

type AlternatedMaterialCountableEdge {
  """The item at the end of the edge."""
  node: ALternatedMaterial!

  """A cursor for use in pagination."""
  cursor: String!
}

type ALternatedMaterial {
  id: ID
  orderLine: TempOrderLine
  oldProduct: MaterialInfo
  newProduct: MaterialInfo
  errorType: String
  quantityChangeOfRoll: Float
  quantityChangeOfTon: Float
}

type TempOrderLine {
  id: ID
  order: TempOrder
  product: TempProduct
  variant: TempProductVariant
  quantity: Float
  plant: String
  netPrice: Float
  price: Float
  requestDate: Date
  internalCommentsToWarehouse: String
  shipTo: String
  productInformation: String
  paymentTerm: String
  checkoutLine: ContractCheckoutLine
  contractProduct: TempContractProduct
  contract: TempContract
  confirmedDate: Date
  itemNo: String
  overdue1: Boolean
  overdue2: Boolean
  attentionType: String
  remark: String
  dtr: String
  dtp: String
  originalRequestDate: Date
  delivery: String
  actualGiDate: Date
  giStatus: String
  billTo: String
  externalCommentsToCustomer: String
  internalCommentsToLogistic: String
  shippingPoint: String
  route: String
  priceCurrency: String
  weight: Float
  weightUnit: String
  itemCategory: String
  overDeliveryTol: Float
  underDeliveryTol: Float
  deliveryTolUnlimited: Boolean
  poNo: String
  prcGroup1: String
  poDate: Date
  iplan: OrderLineIPlan
  requestDateChangeReason: String
  poNoExternal: String
  paymentCondition: String
  unit: String
  status: String
  orderQuantityTon: Float
  splitItems: [TempOrderLine]
  salesUnit: String
  weightUnitTon: String
  netWeightTon: String
  atpCtpStatus: String
  itemStatusEn: String
  itemStatusTh: String
  assignedQuantity: Float
  inquiryMethod: String
  nonConfirmQuantity: Float
  confirmQuantity: Float
  sapConfirmStatus: String
  descriptionEn: String
  remaining: Float
  shippingMark: String
  statusEnum: IPlanOrderStatus
}

type TempOrder {
  id: ID
  soldTo: SoldToMaster
  customer: SoldToMaster
  contract: TempContract
  poDate: Date
  poNumber: String
  shipTo: String
  billTo: String
  orderType: String
  requestDate: Date
  saleOrganization: SalesOrganization
  distributionChannel: DistributionChannel
  division: ScgDivision
  saleOffice: SalesOffice
  saleGroup: SalesGroup
  totalPrice: Float
  orderLines: [TempOrderLine]
  status: String
  orderNo: String
  scgpSalesEmployee: ScgpSalesEmployee
  createdBy: User
  createdAt: DateTime
  updatedAt: DateTime
  updateBy: User
  soNo: String
  type: String
  contractPiNo: String
  company: SapMigrationCompany
  paymentTerm: String
  creditStatus: String
  orderDate: Date
  statusSap: String
  customerGroup: CustomerGroupMaster
  customerGroup1: CustomerGroup1Master
  customerGroup2: CustomerGroup2Master
  customerGroup3: CustomerGroup3Master
  customerGroup4: CustomerGroup4Master
  dpNo: String
  invoiceNo: String
  deliveryBlock: String
  incoterm: String
  incoterms1: Incoterms1Master
  orderLinesIplan: [OrderLineIPlan]
  shippingPoint: String
  route: String
  poNo: String
  totalPriceIncTax: Float
  taxAmount: Float
  currency: String
  shipToAddress: String
  soldToAddress: String
  billToAddress: String
  taxPercent: Float
  orderAmtBeforeVat: String
  orderAmtVat: String
  orderAmtAfterVat: String
  itemCategory: String
  routeId: String
  routeName: String
  untimatedTol: String
  internalCommentsToWarehouse: String
  internalCommentsToLogistic: String
  externalCommentsToCustomer: String
  productInformation: String
  salesGroup: String
  paymentTermKey: String
  paymentTermDescTh: String
  poUploadFileName: String
  orderTypeDesc: String
}

type OrderLineIPlan {
  attentionType: String
  atpCtp: String
  atpCtpDetail: String
  block: String
  run: String
  iplantConfirmQuantity: Float
  itemStatus: String
  originalDate: Date
  inquiryMethodCode: String
  transportationMethod: String
  typeOfDelivery: String
  fixSourceAssignment: String
  splitOrderItem: String
  partialDelivery: String
  consignment: String
  typeOfDeliveryValue: String
  splitOrderItemValue: String
  partialDeliveryValue: String
  consignmentValue: String
  paperMachine: String
  salesUnit: String
}

enum IPlanOrderStatus {
  RECEIVED_ORDER
  PARTIAL_COMMITTED_ORDER
  READY_FOR_DELIVERY
  PARTIAL_DELIVERY
  COMPLETED_DELIVERY
  CANCEL
  COMPLETE_ORDER
  COMPLETED_PRODUCTION
  FULL_COMMITTED_ORDER
  IPLAN_ORDER_STATUS_TH
  IPLAN_ORDER_RANK
}

input AlternatedMaterialFilterInput {
  errorType: String
  saleOrganization: String
  createBy: String
  orderNo: String
  soNo: String
  poNo: String
  oldMaterial: String
  oldGradeGram: String
  newMaterial: String
  newGradeGram: String
  createdDate: DateRangeInput
  requestDate: DateRangeInput
  soldTo: [Int!]
}

input AlternatedMaterialSortInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort alternatedMaterial by the selected field."""
  field: AlternatedMaterialSortField!
}

enum AlternatedMaterialSortField {
  ORDER_NO
}

input TempProductFilterInput {
  """"""
  id: Float
  metadata: [MetadataFilter!]
  gradeGram: String
  materialCode: String
  gradeGramCode: String
}

type UserCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [UserCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type UserCountableEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

type AlternativeMaterialCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [AlternativeMaterialCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int

  """Item in last page."""
  latestPageItemNumber: Int
}

type AlternativeMaterialCountableEdge {
  """The item at the end of the edge."""
  node: AlternativeMaterial!

  """A cursor for use in pagination."""
  cursor: String!
}

type RequireAttentionSoldToCountTableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [RequireAttentionSoldToCountTableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int

  """Item in last page."""
  latestPageItemNumber: Int
}

type RequireAttentionSoldToCountTableEdge {
  """The item at the end of the edge."""
  node: RequireAttentionSoldTo!

  """A cursor for use in pagination."""
  cursor: String!
}

type RequireAttentionSoldTo {
  id: Int
  name: String
  code: String
}

input RequireAttentionSoldToFilterInput {
  """"""
  id: Float
  metadata: [MetadataFilter!]
  soldTo: String
}

type RequireAttentionItemsCountTableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [RequireAttentionItemsCountTableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int

  """Item in last page."""
  latestPageItemNumber: Int
}

type RequireAttentionItemsCountTableEdge {
  """The item at the end of the edge."""
  node: RequireAttentionItems!

  """A cursor for use in pagination."""
  cursor: String!
}

input RequireAttentionShipToFilterInput {
  shipTo: String
  metadata: [MetadataFilter!]
}

type RequireAttentionSaleEmployeeCountTableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [RequireAttentionSaleEmployeeCountTableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int

  """Item in last page."""
  latestPageItemNumber: Int
}

type RequireAttentionSaleEmployeeCountTableEdge {
  """The item at the end of the edge."""
  node: ScgpSalesEmployee!

  """A cursor for use in pagination."""
  cursor: String!
}

input RequireAttentionSaleEmployeeFilterInput {
  """"""
  id: Float
  metadata: [MetadataFilter!]
  saleEmployee: String
}

type RequireAttentionSalesOrganizationCountTableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [RequireAttentionSalesOrganizationCountTableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int

  """Item in last page."""
  latestPageItemNumber: Int
}

type RequireAttentionSalesOrganizationCountTableEdge {
  """The item at the end of the edge."""
  node: SalesOrganization!

  """A cursor for use in pagination."""
  cursor: String!
}

input RequireAttentionSalesOrganizationFilterInput {
  businessUnit: String
  metadata: [MetadataFilter!]
}

type RequireAttentionSalesGroupCountTableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [RequireAttentionSalesGroupCountTableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int

  """Item in last page."""
  latestPageItemNumber: Int
}

type RequireAttentionSalesGroupCountTableEdge {
  """The item at the end of the edge."""
  node: SalesGroup!

  """A cursor for use in pagination."""
  cursor: String!
}

input RequireAttentionSalesGroupFilterInput {
  salesOrganization: String
  metadata: [MetadataFilter!]
}

type MaterialMasterCountTableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [MaterialMasterCountTableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int

  """Item in last page."""
  latestPageItemNumber: Int
}

type MaterialMasterCountTableEdge {
  """The item at the end of the edge."""
  node: MaterialMaster!

  """A cursor for use in pagination."""
  cursor: String!
}

input RequireAttentionMaterialFilterInput {
  """"""
  id: Float
  metadata: [MetadataFilter!]
  material: String
}

type RequireAttentionMaterialGradeGramCountTableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [RequireAttentionMaterialGradeGramCountTableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int

  """Item in last page."""
  latestPageItemNumber: Int
}

type RequireAttentionMaterialGradeGramCountTableEdge {
  """The item at the end of the edge."""
  node: RequireAttentionMaterial!

  """A cursor for use in pagination."""
  cursor: String!
}

type RequireAttentionMaterial {
  id: Int
  name: String
  code: String
  grade: String
  gram: String
  materialGroup: SAPScgpMaterialGroup
}

input RequireAttentionMaterialGradeGramFilterInput {
  """"""
  id: Float
  metadata: [MetadataFilter!]
  materialGradeGram: String
}

type RequireAttentionEnums {
  name: String
  value: String
}

type RequireAttentionPlantCountTableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [RequireAttentionPlantCountTableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int

  """Item in last page."""
  latestPageItemNumber: Int
}

type RequireAttentionPlantCountTableEdge {
  """The item at the end of the edge."""
  node: RequireAttentionItems!

  """A cursor for use in pagination."""
  cursor: String!
}

input RequireAttentionPlantFilterInput {
  plant: String
  metadata: [MetadataFilter!]
}

type RequireAttentionItemsViewCountTableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [RequireAttentionItemsViewCountTableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int

  """Item in last page."""
  latestPageItemNumber: Int
}

type RequireAttentionItemsViewCountTableEdge {
  """The item at the end of the edge."""
  node: RequireAttentionItemView!

  """A cursor for use in pagination."""
  cursor: String!
}

type RequireAttentionItemView {
  id: Int
  type: String
  orderNo: String
  itemNo: String
  soldTo: String
  shipTo: String
  requestDate: Date
  confirmedDate: Date
  poNo: String
  plant: String
  status: String
  unit: String
  material: String
  matCode: String
  matDescription: String
  requestQuantity: Float
  materialGroup: SAPScgpMaterialGroup
  grade: String
  gram: String
  salesOrganization: SAPSalesOrganization
  salesGroup: SAPSalesGroup
  scgpSalesEmployee: SAPScgpSalesEmployee
  attentionType: String
  iplantConfirmQuantity: Float
  itemStatus: String
  originalDate: Date
  overdue1: Boolean
  overdue2: Boolean
  inquiryMethodCode: String
  transportationMethod: String
  typeOfDelivery: String
  fixSourceAssignment: String
  splitOrderItem: String
  partialDelivery: String
  consignment: String
  iPlan: RequireAttentionIPlan
  typeOfDeliveryValue: String
  splitOrderItemValue: String
  partialDeliveryValue: String
  consignmentValue: String
  extends: RequireAttention
  orderId: Int
  flagR5: Boolean
  assignedQuantity: Float
  itemStatusEn: String
}

input RequireAttentionItemsSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort requireAttentionItems by the selected field."""
  field: RequireAttentionItemsSortField!
}

enum RequireAttentionItemsSortField {
  ORDER_NO
  ITEM_NO
  SOLD_TO
  ORIGINAL_DATE
  REQUEST_DATE
  CONFIRM_DATE
  REQUEST_QUANTITY
  CONFIRM_QUANTITY
  UNIT
  MATERIAL_CODE
  MATERIAL_DESCRIPTION
  PO_NO
  PLANT
  SHIP_TO
  ITEM_STATUS
  ORDER_STATUS
  ATTENTION_TYPE
}

input RequireAttentionItemsFilterInput {
  """"""
  id: Float
  metadata: [MetadataFilter!]
  soldTo: String
  shipTo: String
  poNo: String
  bu: String
  saleOrganization: String
  saleGroup: String
  saleEmployee: String
  material: [String!]
  materialGradeGram: [String!]
  materialGroup: String
  plant: [String!]
  attentionType: [ScgpRequireAttentionTypeData!]
  orderStatus: String
  itemStatus: String
  requestDate: String
  confirmDate: String
  overdue1: Boolean
  overdue2: Boolean
}

type ParentGroupCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [ParentGroupCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type ParentGroupCountableEdge {
  """The item at the end of the edge."""
  node: ParentGroup!

  """A cursor for use in pagination."""
  cursor: String!
}

type ScgpUserCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [ScgpUserCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int

  """Item in last page."""
  latestPageItemNumber: Int
}

type ScgpUserCountableEdge {
  """The item at the end of the edge."""
  node: ScgpUser!

  """A cursor for use in pagination."""
  cursor: String!
}

input ScgpUsersFilterInput {
  employeeId: String
  firstName: String
  lastName: String
  createDate: DateRangeInput
  lastLoginDate: DateRangeInput
  email: String

  """"""
  parentGroup: Float

  """"""
  group: Float
  updateBy: String
  status: Boolean

  """"""
  bu: Float

  """"""
  saleGroup: Float

  """"""
  saleOrg: Float
  lastUpdateDate: DateRangeInput
  soldTo: String
}

input ScgpUserSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort scgpUser by the selected field."""
  field: ScgpUserSortField!
}

enum ScgpUserSortField {
  EMPLOYEE_ID
  CREATED_DATE
  USER_GROUP
  BU
  SALE_ORGANIZATION
  SALE_GROUP
  FIRST_NAME
  LAST_NAME
}

input UserManagementSoldToFilterInput {
  """"""
  id: Float
  accountGroupCode: [String!]
  metadata: [MetadataFilter!]
  search: String
}

"""GDC User Data."""
type GDCUserData {
  employeeId: String
  email: String
  firstName: String
  lastName: String
  saleOrgs: [SalesOrganizationMaster]
  bus: [BusinessUnits]
}

type UserManagementSaleOrgCountTableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [UserManagementSaleOrgCountTableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type UserManagementSaleOrgCountTableEdge {
  """The item at the end of the edge."""
  node: SalesOrganizationMaster!

  """A cursor for use in pagination."""
  cursor: String!
}

input UserManagementSaleOrgFilterInput {
  businessUnit: [String!]
  metadata: [MetadataFilter!]
}

type UserManagementSalesGroupCountTableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [UserManagementSalesGroupCountTableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type UserManagementSalesGroupCountTableEdge {
  """The item at the end of the edge."""
  node: SalesGroupMaster!

  """A cursor for use in pagination."""
  cursor: String!
}

input UserManagementSalesGroupFilterInput {
  salesOrganization: [String!]
  metadata: [MetadataFilter!]
}

type UserManagementSaleOfficeCountTableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [UserManagementSaleOfficeCountTableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type UserManagementSaleOfficeCountTableEdge {
  """The item at the end of the edge."""
  node: SalesOfficeMaster!

  """A cursor for use in pagination."""
  cursor: String!
}

input UserManagementSaleOfficeFilterInput {
  salesOrganization: [String!]
  metadata: [MetadataFilter!]
}

type ParentGroupRoleMenuCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [ParentGroupRoleMenuCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type ParentGroupRoleMenuCountableEdge {
  """The item at the end of the edge."""
  node: ParentGroupAndRole!

  """A cursor for use in pagination."""
  cursor: String!
}

type ParentGroupAndRole {
  id: ID
  name: String
  code: String

  """List of role group and its menu function"""
  groups: [ScgpGroupsAndMenuFunctions]
  description: String
}

"""Scgp Group."""
type ScgpGroupsAndMenuFunctions {
  id: ID
  name: String!

  """
  List of group users Requires one of the following permissions: MANAGE_STAFF.
  """
  users: [User!]

  """List of group permissions"""
  permissions: [Permission!]

  """
  True, if the currently authenticated user has rights to manage a group.
  """
  userCanManage: Boolean!
  menuFunctions: [MenuFunction]
}

"""ScgpUser extend data."""
type MenuFunction {
  id: ID
  code: String
  name: String
}

type ExportCartExtended {
  totalPi: Int
  totalSoldTo: Int
  totalCartItem: Int
  carts(
    filter: CartPiFilterInput
    sortBy: ExportCartSortingInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ExportCartCountableConnection
}

type ExportCartCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [ExportCartCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int

  """Item in last page."""
  latestPageItemNumber: Int
}

type ExportCartCountableEdge {
  """The item at the end of the edge."""
  node: ExportCart!

  """A cursor for use in pagination."""
  cursor: String!
}

input CartPiFilterInput {
  """"""
  id: Float
  metadata: [MetadataFilter!]
  code: String
}

input ExportCartSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort exportCart by the selected field."""
  field: ScgExportCartOrderField!
}

enum ScgExportCartOrderField {
  SOLD_TO
}

type ExportCartDetail {
  id: ID
  pi: ExportPI
  soldTo: SoldToMaster
  createdBy: ScgUser
  items(
    sortBy: ExportCartItemSortingInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ExportCartItemsCountableConnection
  totalItems: Int
  isActive: Boolean
}

type ExportCartItemsCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [ExportCartItemsCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int

  """Item in last page."""
  latestPageItemNumber: Int
}

type ExportCartItemsCountableEdge {
  """The item at the end of the edge."""
  node: ExportCartItem!

  """A cursor for use in pagination."""
  cursor: String!
}

input ExportCartItemSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort exportCartItem by the selected field."""
  field: ScgExportCartItemOrderField!
}

enum ScgExportCartItemOrderField {
  REMAINING_QUANTITY
  TOTAL_QUANTITY
  PRICE_PER_UNIT
  CONTRACT_MATERIAL_ID
}

type ExportCartSearchExtended {
  totalPi: Int
  totalSoldTo: Int
  totalCartItem: Int
  carts(
    filter: CartPiFilterInput
    sortBy: ExportCartSortingInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ExportCartCountableConnection
  exportCarts(
    filter: CartFilterInput
    sortBy: ExportCartSortingInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ExportCartCountableConnection
}

input CartFilterInput {
  """"""
  id: Float
  metadata: [MetadataFilter!]
  inputSearch: String
}

type ExportSoldToCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [ExportSoldToCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type ExportSoldToCountableEdge {
  """The item at the end of the edge."""
  node: SoldToMaster!

  """A cursor for use in pagination."""
  cursor: String!
}

input ExportSoldToFilterInput {
  """"""
  id: Float
  metadata: [MetadataFilter!]
  search: String
}

type ExportPICountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [ExportPICountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int

  """Item in last page."""
  latestPageItemNumber: Int
}

type ExportPICountableEdge {
  """The item at the end of the edge."""
  node: ExportPI!

  """A cursor for use in pagination."""
  cursor: String!
}

input ExportPIFilterInput {
  """"""
  id: Float
  metadata: [MetadataFilter!]
  code: String
  soldTo: String
}

input ExportPIsSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort exportPIs by the selected field."""
  field: ExportPIsSortField!
}

enum ExportPIsSortField {
  """Sort customer carts by code."""
  CODE
}

type ExportOrderExtended {
  id: ID
  pi: SapContract
  totalPrice: Float
  taxAmount: Float
  currency: String
  status: String
  requestDeliveryDate: Date
  orderType: String
  salesOrganization: SalesOrganizationMaster
  distributionChannel: DistributionChannelMaster
  division: DivisionMaster
  salesOffice: SalesOfficeMaster
  salesGroup: SalesGroupMaster
  shipTo: String
  billTo: String
  poDate: Date
  poNo: String
  requestDate: Date
  refPiNo: String
  netPrice: Float
  docCurrency: String
  paymentTerm: String
  incoterm: String
  usage: String
  unloadingPoint: String
  placeOfDelivery: String
  portOfDischarge: String
  portOfLoading: String
  noOfContainers: String
  shippingMark: String
  uom: String
  gwUom: String
  etd: String
  eta: String
  dlcExpiryDate: Date
  dlcNo: String
  dlcLatestDeliveryDate: Date
  description: String
  payer: String
  endCustomer: String
  contactPerson: String
  salesEmployee: String
  author: String
  paymentInstruction: String
  remark: String
  productionInformation: String
  internalCommentToWarehouse: String
  createdBy: ScgUser
  createdAt: DateTime
  updatedAt: DateTime

  """Order lines"""
  lines(
    """Sort order line"""
    sortBy: ExportOrderLinesSortingInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ExportOrderLineCountableConnection
  eoNo: String
  statusSap: String
  orderNo: String
  scgpSalesEmployee: ScgpSalesEmployee
  contractType: String
  soldToAddress: String
  soNo: String
  taxPercent: Float
  incoterms2: String
}

type ExportOrderLineCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [ExportOrderLineCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int

  """Item in last page."""
  latestPageItemNumber: Int
}

type ExportOrderLineCountableEdge {
  """The item at the end of the edge."""
  node: ExportOrderLine!

  """A cursor for use in pagination."""
  cursor: String!
}

input ExportOrderLinesSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort order_lines by the selected field."""
  field: ExportOrderLinesSortField!
}

enum ExportOrderLinesSortField {
  """Sort order lines by material code."""
  MATERIAL_CODE
}

type ExportOrderWithAllOrderLine {
  id: ID
  pi: SapContract
  totalPrice: Float
  taxAmount: Float
  currency: String
  status: String
  requestDeliveryDate: Date
  orderType: String
  salesOrganization: SalesOrganizationMaster
  distributionChannel: DistributionChannelMaster
  division: DivisionMaster
  salesOffice: SalesOfficeMaster
  salesGroup: SalesGroupMaster
  shipTo: String
  billTo: String
  poDate: Date
  poNo: String
  requestDate: Date
  refPiNo: String
  netPrice: Float
  docCurrency: String
  paymentTerm: String
  incoterm: String
  usage: String
  unloadingPoint: String
  placeOfDelivery: String
  portOfDischarge: String
  portOfLoading: String
  noOfContainers: String
  shippingMark: String
  uom: String
  gwUom: String
  etd: String
  eta: String
  dlcExpiryDate: Date
  dlcNo: String
  dlcLatestDeliveryDate: Date
  description: String
  payer: String
  endCustomer: String
  contactPerson: String
  salesEmployee: String
  author: String
  paymentInstruction: String
  remark: String
  productionInformation: String
  internalCommentToWarehouse: String
  createdBy: ScgUser
  createdAt: DateTime
  updatedAt: DateTime

  """Order lines"""
  lines(
    """Sort order line"""
    sortBy: ExportOrderLinesSortingInput
  ): [ExportOrderLine]
  eoNo: String
  statusSap: String
  orderNo: String
  scgpSalesEmployee: ScgpSalesEmployee
  contractType: String
  soldToAddress: String
  soNo: String
  taxPercent: Float
  incoterms2: String
}

type ExportOrderAllItemBySoNo {
  eoNo: String
  contractNo: String
  orderType: String
  salesOrg: String
  salesOrgName: String
  distributionChannel: String
  division: String
  salesOff: String
  salesOffName: String
  salesGroup: String
  salesGroupName: String
  poNo: String
  requestDate: String
  originalRequestDate: String
  docCurrency: String
  paymentTerms: String
  incoterms1: String
  incoterms1Name: String
  incoterms2: String
  orderAmtBeforeVat: String
  orderAmtVat: String
  orderAmtAfterVat: String
  confirmDate: String
  description: String
  usage: String
  unloadingPoint: String
  orderPartners: [OrderPartners]
  orderItems: [OrderItems]
  orderCondition: [OrderCondition]
  orderText: [OrderText]
  fixedItemNo: [String]
  taxPercent: Float
  refPiNo: String
  poDate: String
  orderStatus: String
}

type OrderItems {
  id: ID
  itemNo: String
  material: String
  materialDesc: String
  itemQty: String
  itemRemain: String
  salesUnit: String
  plant: String
  paymentTerm: String
  paymentTermDescTh: String
  poNumber: String
  poSubcontract: String
  itemCategory: String
  materialGroup1: String
  saleText1Th: String
  routeId: String
  routeName: String
  requestedDate: String
  originalRequestDate: String
  weightPerUnit: String
  orderQty: String
  comfirmQty: String
  deliveryQty: String
  deliveryStatus: String
  saleQtyDivision: String
  saleQtyFactor: String
  prdHierachy: String
  shippingPoint: String
  poDate: String
  contractNo: String
  contractItemNo: String
  atp: String
  atpDetails: String
  block: String
  run: String
  paperMachine: String
  reasonReject: String
  confirmedDate: String
  productMaterial: String
  remainWeight: Float
  weight: Float
  internalCommentsToWarehouse: String
  externalCommentsToCustomer: String
  internalCommentsToLogistic: String
  product_Information: String
  overDeliveryTol: Float
  underDeliveryTol: Float
  deliveryTolOver: Float
  deliveryTolUnder: Float
  deliveryTolUnlimited: String
  untimatedTol: String
  shipTo: String
  refPiStock: String
  contractProductId: ID
  assignQuantity: Float
  conditionGroup1: String
  inquiryMethod: String
  orderType: String
  flagR5: Boolean
  itemStatusEn: String
  itemStatusEnDisplayText: String
  itemStatusEnum: IPlanOrderItemStatus
  itemProductionState: EOrderingProductionStatus
  isMaterialOutsource: Boolean
  remainingQuantity: Float
  netPrice: Float
  allowChangeInquiryMethod: Boolean
  requestDateChangeReason: String
  sapConfirmStatus: String
  remainingQuantityEx: Float
  weightDisplay: String
  poStatus: String
  materialGroup1Desc: String
  weightUnit: String
  grossWeightTon: Float
  netWeightTon: Float
  weightUnitTon: String
  prNo: String
  prItem: String
  shippingMark: String
}

enum IPlanOrderItemStatus {
  ITEM_CREATED
  PLANNING_UNALLOCATED
  PLANNING_ALLOCATED_NON_CONFIRM
  PLANNING_CONFIRM
  PLANNING_CLOSE_LOOP
  PLANNING_ALLOCATED_X_TRIM
  PLANNING_OUTSOURCING
  PRODUCING
  FULL_COMMITTED_ORDER
  COMPLETED_PRODUCTION
  PARTIAL_DELIVERY
  COMPLETE_DELIVERY
  CANCEL
  FAILED
  IPLAN_ORDER_LINES_STATUS_TH
  MAPPING_ORDER_STATUS
  IPLAN_ORDER_LINE_RANK
}

enum EOrderingProductionStatus {
  BEFORE_PRODUCTION
  DURING_PRODUCTION
  AFTER_PRODUCTION
}

type ExportOrderCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [ExportOrderCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int

  """Item in last page."""
  latestPageItemNumber: Int
}

type ExportOrderCountableEdge {
  """The item at the end of the edge."""
  node: ExportOrder!

  """A cursor for use in pagination."""
  cursor: String!
}

input ExportOrderSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort exportOrders by the selected field."""
  field: ExportOrderSortField!
}

enum ExportOrderSortField {
  PI_NO
}

input ExportOrderFilterInput {
  """"""
  id: Float
  metadata: [MetadataFilter!]
  piNo: String
  eoNo: String
  poNo: String
  soldTo: String
  shipTo: String
  status: [ScgpExportOrderStatus!]
  statusSap: [ScgpExportOrderStatusSAP!]
  company: String
  bu: String
  lastUpdate: DateRangeInput
  createDate: DateRangeInput
}

enum ScgpExportOrderStatus {
  DRAFT
  CONFIRMED
  RECEIVED_ORDER
  CREDIT_CASH_ISSUE
  PARTIAL_COMMITTED_ORDER
  READY_FOR_DELIVERY
  PARTIAL_DELIVERY
  COMPLETED_DELIVERY
  CANCELLED
  COMPLETED_ORDER
  PRE_DRAFT
  FULL_COMMITTED_ORDER
}

enum ScgpExportOrderStatusSAP {
  COMPLETE
  BEING_PROCESS
}

type ExportOrderExtendedCountTableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [ExportOrderExtendedCountTableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int

  """Item in last page."""
  latestPageItemNumber: Int
}

type ExportOrderExtendedCountTableEdge {
  """The item at the end of the edge."""
  node: ExportOrderExtended!

  """A cursor for use in pagination."""
  cursor: String!
}

input ExportShipToFilterInput {
  shipTo: String
  metadata: [MetadataFilter!]
}

type SalesOrganizationCountTableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [SalesOrganizationCountTableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int

  """Item in last page."""
  latestPageItemNumber: Int
}

type SalesOrganizationCountTableEdge {
  """The item at the end of the edge."""
  node: SalesOrganizationMaster!

  """A cursor for use in pagination."""
  cursor: String!
}

input ExportCompaniesFilterInput {
  businessUnit: ID
  metadata: [MetadataFilter!]
  search: String
}

type StatusTypes {
  name: String
  value: String
}

"""Credit master mapping fields."""
type CreditLimit {
  creditControlArea: String
  creditLimit: String
  creditAccount: String
  creditLimitUsed: String
  receivables: String
  specialLiabil: String
  saleValue: String
  creditExposure: String
  secondReceivables: String
  creditAvaiable: String
  currency: String
  creditBlockStatus: Boolean
}

input CreditLimitInput {
  contractNo: String
  soldToCode: String
  salesOrgCode: String
}

type CustomerContractProduct {
  id: ID
  contract: CustomerContract
  product: CustomerProduct
  totalQuantity: Float
  remainingQuantity(orderId: ID): Float
  pricePerUnit: Float
  quantityUnit: String
  currency: String
  weight: Float
  weightUnit: String
  limitQuantity: Float
  materialDescription: String
}

type CustomerContract {
  id: ID
  soldTo: SoldToMaster
  company: CompanyMaster
  customer: ScgUserDetail
  code: String
  projectName: String
  startDate: Date
  endDate: Date
  paymentTerm: String
  products(sortBy: CustomerProductSortingInput): [CustomerContractProduct]
  currency: String
  paymentTermKey: String
  paymentTermDescriptionTh: String
}

"""Represents user data."""
type ScgUserDetail implements Node & ObjectWithMetadata {
  id: ID!

  """List of private metadata items. Requires staff permissions to access."""
  privateMetadata: [MetadataItem!]!

  """
  A single key from private metadata. Requires staff permissions to access.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafield(key: String!): String

  """
  Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafields(keys: [String!]): Metadata

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem!]!

  """
  A single key from public metadata.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafield(key: String!): String

  """
  Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafields(keys: [String!]): Metadata
  email: String!
  firstName: String!
  lastName: String!
  isStaff: Boolean!
  isActive: Boolean!
  displayName: String
  isSuperuser: Boolean

  """List of all user's addresses."""
  addresses: [Address!]

  """Returns the last open checkout of this user."""
  checkout: Checkout @deprecated(reason: "This field will be removed in Saleor 4.0. Use the `checkoutTokens` field to fetch the user checkouts.")

  """Returns the checkout UUID's assigned to this user."""
  checkoutTokens(
    """Slug of a channel for which the data should be returned."""
    channel: String
  ): [UUID!]

  """List of the user gift cards."""
  giftCards(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): GiftCardCountableConnection

  """
  A note about the customer. Requires one of the following permissions: MANAGE_USERS, MANAGE_STAFF.
  """
  note: String

  """
  List of user's orders. Requires one of the following permissions: AccountPermissions.MANAGE_STAFF, AuthorizationFilters.OWNER
  """
  orders(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): OrderCountableConnection

  """List of user's permissions."""
  userPermissions: [UserPermission!]

  """List of user's permission groups."""
  permissionGroups: [Group!]

  """List of user's permission groups which user can manage."""
  editableGroups: [Group!]
  avatar(
    """Size of the avatar."""
    size: Int
  ): Image

  """
  List of events associated with the user. Requires one of the following permissions: MANAGE_USERS, MANAGE_STAFF.
  """
  events: [CustomerEvent!]

  """List of stored payment sources."""
  storedPaymentSources(
    """Slug of a channel for which the data should be returned."""
    channel: String
  ): [PaymentSource!]

  """User language code."""
  languageCode: LanguageCodeEnum!
  defaultShippingAddress: Address
  defaultBillingAddress: Address
  lastLogin: DateTime
  dateJoined: DateTime!
  updatedAt: DateTime!
  company: Company
  distributionChannel: Channel
  division: Division
  office: Office
  customerNo: String
  saleGroups: [AuthGroup]
}

input CustomerProductSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Specifies the field in which to sort products."""
  field: ScgpCustomerProductOrderField!
}

enum ScgpCustomerProductOrderField {
  TOTAL
  REMAIN
  PRICE
}

type CustomerProduct {
  id: ID
  name: String
  slug: String
  variants: [CustomerProductVariant]
  descriptionEn: String
  materialType: String
  salesUnit: String
}

type CustomerProductVariant {
  id: ID
  product: CustomerProduct
  name: String
  slug: String
  code: String
  descriptionTh: String
  variantType: String
  salesUnit: String
  descriptionEn: String
  weight: Float
  limitQuantity: Float
}

type CustomerCart {
  """ID of cart"""
  id: ID
  contract: CustomerContract
  createdBy: ScgUser
  quantity: Float
  cartItems(sortBy: CustomerCartsSortingInput): [CustomerCartItem!]
}

type CustomerCartItem {
  """ID of cart item"""
  id: ID
  cart: CustomerCart
  contractProduct: CustomerContractProduct
  variant: CustomerProductVariant
  quantity: Float
  customerProduct: CustomerProduct
  customerProductVariant: CustomerProductVariant

  """ID of Contract product id"""
  contractProductId: ID
}

input CustomerCartsSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort customerCarts by the selected field."""
  field: CustomerCartsSortField!
}

enum CustomerCartsSortField {
  """Sort customer carts by lines count."""
  LINES_COUNT
}

type CustomerCartProductVariant {
  contractProduct: [CustomerContractProduct]
}

type CustomerCartCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [CustomerCartCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type CustomerCartCountableEdge {
  """The item at the end of the edge."""
  node: CustomerCart!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Customer Cart Totals"""
type CustomerCartTotals {
  totalContracts: Int
  totalProducts: Int
}

type CustomerContractCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [CustomerContractCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type CustomerContractCountableEdge {
  """The item at the end of the edge."""
  node: CustomerContract!

  """A cursor for use in pagination."""
  cursor: String!
}

input CustomerContractFilterInput {
  code: String
  companyIds: [Int!]
}

input CustomerContractsSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort contracts by the selected field."""
  field: CustomerContractsSortField!
}

enum CustomerContractsSortField {
  """Sort contracts by code."""
  CODE
}

type CustomerOrderExtended {
  id: ID
  contract: CustomerContract
  totalPrice: Float
  totalPriceIncTax: Float
  taxAmount: Float
  taxPercent: Float
  status: String
  orderDate: Date
  orderNo: String
  requestDeliveryDate: Date
  shipTo: String
  billTo: String
  unloadingPoint: String
  remarkForInvoice: String
  remarkForLogistic: String
  createdBy: ScgUser
  createdAt: DateTime
  updatedAt: DateTime
  soNo: String
  poNo: String
  paymentTerm: String
  soldTo: SoldToMaster
  lines(before: String, after: String, first: Int, last: Int): CustomerOrderLineCountableConnection
  failOrderLines: [CustomerOrderLine]
  company: CustomerCompany
  creditStatus: String
  currency: CurrencyMaster
  customerSoldToOrder: String
  soldToAddress: String
  internalCommentsToWarehouse: String
  internalCommentsToLogistic: String
  paymentTermDescriptionTh: String
}

type CustomerOrderLineCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [CustomerOrderLineCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type CustomerOrderLineCountableEdge {
  """The item at the end of the edge."""
  node: CustomerOrderLine!

  """A cursor for use in pagination."""
  cursor: String!
}

type CustomerOrderLine {
  id: ID
  order: CustomerOrder
  contractProduct: CustomerContractProduct
  variant: CustomerProductVariant
  quantity: Float
  quantityUnit: String
  weightPerUnit: Float
  totalWeight: Float
  pricePerUnit: Float
  totalPrice: Float
  requestDeliveryDate: Date
  availableQuantity: Float
  cartItem: CustomerCartItem
  originalRequestDate: Date
  confirmedDate: Date
  requestDate: Date
  materialVariantCode: String
  materialDescription: String
  itemNo: String
  salesUnit: String
  orderQuantityTon: Float
  itemStatusEn: String
  itemStatusTh: String
  assignedQuantity: Float
  nonConfirmQuantity: Float
  confirmQuantity: Float
  sapConfirmStatus: String
  paymentTerm: String
  descriptionEn: String
  paymentTermDescriptionTh: String
}

type CustomerOrder {
  id: ID
  contract: CustomerContract
  totalPrice: Float
  totalPriceIncTax: Float
  taxAmount: Float
  taxPercent: Float
  status: String
  orderDate: Date
  orderNo: String
  requestDeliveryDate: Date
  shipTo: String
  billTo: String
  unloadingPoint: String
  remarkForInvoice: String
  remarkForLogistic: String
  createdBy: ScgUser
  createdAt: DateTime
  updatedAt: DateTime
  soNo: String
  poNo: String
  paymentTerm: String
  soldTo: SoldToMaster
  lines: [CustomerOrderLine]
  failOrderLines: [CustomerOrderLine]
  company: CustomerCompany
  creditStatus: String
  currency: CurrencyMaster
  customerSoldToOrder: String
  soldToAddress: String
  internalCommentsToWarehouse: String
  internalCommentsToLogistic: String
  paymentTermDescriptionTh: String
}

type CustomerCompany {
  id: ID
  name: String
  code: String
  businessUnit: CustomerBusinessUnit
  shortName: String
}

type CustomerBusinessUnit {
  """ID of business_unit"""
  id: ID

  """name of business_unit"""
  name: String

  """code of business_unit"""
  code: String
  isDefaultForInquirySearch: Boolean
}

type CurrencyMaster {
  code: String
  name: String
}

type PreviewOrderLines {
  id: ID
  contract: CustomerContract
  totalPrice: Float
  totalPriceIncTax: Float
  taxAmount: Float
  taxPercent: Float
  status: String
  orderDate: Date
  orderNo: String
  requestDeliveryDate: Date
  shipTo: String
  billTo: String
  unloadingPoint: String
  remarkForInvoice: String
  remarkForLogistic: String
  createdBy: ScgUser
  createdAt: DateTime
  updatedAt: DateTime
  soNo: String
  poNo: String
  paymentTerm: String
  soldTo: SoldToMaster
  lines: [CustomerOrderLine]
  failOrderLines: [CustomerOrderLine]
  company: CustomerCompany
  creditStatus: String
  currency: CurrencyMaster
  customerSoldToOrder: String
  soldToAddress: String
  internalCommentsToWarehouse: String
  internalCommentsToLogistic: String
  paymentTermDescriptionTh: String
  previewOrderLines(
    sortBy: OrderLinesSortingInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): OrderLinesCountableConnection
}

type OrderLinesCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [OrderLinesCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int

  """Item in last page."""
  latestPageItemNumber: Int
}

type OrderLinesCountableEdge {
  """The item at the end of the edge."""
  node: PreviewCustomerTempOrderLine!

  """A cursor for use in pagination."""
  cursor: String!
}

type PreviewCustomerTempOrderLine {
  id: ID
  order: CustomerOrder
  contractProduct: CustomerContractProduct
  variant: CustomerProductVariant
  quantity: Float
  quantityUnit: String
  weightPerUnit: Float
  totalWeight: Float
  pricePerUnit: Float
  totalPrice: Float
  requestDeliveryDate: Date
  availableQuantity: Float
  cartItem: CustomerCartItem
  originalRequestDate: Date
  confirmedDate: Date
  requestDate: Date
  materialVariantCode: String
  materialDescription: String
  itemNo: String
  salesUnit: String
  orderQuantityTon: Float
  itemStatusEn: String
  itemStatusTh: String
  assignedQuantity: Float
  nonConfirmQuantity: Float
  confirmQuantity: Float
  sapConfirmStatus: String
  paymentTerm: String
  descriptionEn: String
  paymentTermDescriptionTh: String
  logErrors: String
  logOldProduct: String
}

input OrderLinesSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort orderLines by the selected field."""
  field: OrderLinesSortField!
}

enum OrderLinesSortField {
  ITEM_NO
}

type CustomerMaterialCodeNameCountTableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [CustomerMaterialCodeNameCountTableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type CustomerMaterialCodeNameCountTableEdge {
  """The item at the end of the edge."""
  node: CustomerProductVariant!

  """A cursor for use in pagination."""
  cursor: String!
}

input CustomerMaterialCodeNameFilterInput {
  """"""
  id: Float
  metadata: [MetadataFilter!]
  material: String
}

type CustomerCompanyCountTableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [CustomerCompanyCountTableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int

  """Item in last page."""
  latestPageItemNumber: Int
}

type CustomerCompanyCountTableEdge {
  """The item at the end of the edge."""
  node: CustomerCompany!

  """A cursor for use in pagination."""
  cursor: String!
}

input CustomerCompanyFilterInput {
  businessUnit: String
  metadata: [MetadataFilter!]
}

type CustomerSalesGroupCountTableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [CustomerSalesGroupCountTableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type CustomerSalesGroupCountTableEdge {
  """The item at the end of the edge."""
  node: CustomerSalesGroup!

  """A cursor for use in pagination."""
  cursor: String!
}

type CustomerSalesGroup {
  """ID of sales_group"""
  id: ID

  """name of sales_group"""
  name: String

  """code of sales_group"""
  code: String
  salesOrganization: CustomerSalesOrganization
  company: CustomerCompany
}

type CustomerSalesOrganization {
  """ID of sales_organization"""
  id: ID

  """name of sales_organization"""
  name: String

  """code of sales_organization"""
  code: String
  businessUnit: CustomerBusinessUnit
}

input CustomerSalesGroupFilterInput {
  company: String
  metadata: [MetadataFilter!]
}

type CustomerOrderCountTableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [CustomerOrderCountTableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int

  """Item in last page."""
  latestPageItemNumber: Int
}

type CustomerOrderCountTableEdge {
  """The item at the end of the edge."""
  node: CustomerOrder!

  """A cursor for use in pagination."""
  cursor: String!
}

input CustomerOrderSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort customerOrders by the selected field."""
  field: CustomerOrderSortField!
}

enum CustomerOrderSortField {
  SO_NO
}

input CustomerOrderFilterInput {
  """"""
  id: Float
  metadata: [MetadataFilter!]
  soldTo: String
  materialCodeName: String
  soNo: String
  contractNo: String
  dpNo: String
  invoiceNo: String
  bu: String
  company: String
  saleGroup: String
  createDate: DateRangeInput
  requestDeliveryDate: DateRangeInput
}

input CustomerOrderConfirmationSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort orderConfirmation by the selected field."""
  field: CustomerOrderConfirmationSortField!
}

enum CustomerOrderConfirmationSortField {
  SO_NO
}

input CustomerOrderConfirmationFilterInput {
  """"""
  id: Float
  metadata: [MetadataFilter!]
  soldTo: String
  companyName: [String!]
  soNo: String
  poNo: String
  material: String
  distributionChannel: String
  status: [String!]
  materialGroup: [String!]
  orderCreateDate: String
}

type SAPOrderMapping {
  id: Int
  sdDoc: String
  status: String
  createDate: String
  createTime: String
  poNo: String
  salesOrg: String
  descriptionInContract: String
  creditStatus: String
  deliverStatus: String
  soldTo: String
  soldToName1: String
  shipTo: String
  shipToName1: String
  countrySh: String
  countryName: String
  incotermS1: String
  incotermS2: String
  paymentTerm: String
  paymentTermDesc: String
  eOrderingStatus: String
  contractPi: String
}

input SAPOrderRequest {
  soldTo: String
  materialCode: String
  soNo: String
  contractNo: String
  dpNo: String
  invoiceNo: String
  bu: String
  company: String
  createDateFrom: Date
  createDateTo: Date
  updateDateFrom: Date
  updateDateTo: Date
  purchaseOrderNo: String
}

type ChangeOrder {
  soNo: String
  contractNo: String
  poNo: String
  distributionChannel: String
  distributionChannelName: String
  salesOrg: String
  salesOrgName: String
  salesOrgShortName: String
  salesOff: String
  salesOffName: String
  division: String
  divisionName: String
  priceDate: String
  status: String
  orderAmtBeforeVat: String
  orderAmtVat: String
  orderAmtAfterVat: String
  currency: String
  customerGroup: String
  customerGroupName: String
  customerGroup1: String
  customerGroup1Name: String
  customerGroup2: String
  customerGroup2Name: String
  customerGroup3: String
  customerGroup3Name: String
  customerGroup4: String
  customerGroup4Name: String
  requestDate: String
  paymentTerms: String
  incoterms1: String
  incoterms1Name: String
  incoterms2: String
  incoterms2Name: String
  orderDate: String
  salesGroup: String
  salesGroupName: String
  underTol: String
  overTol: String
  assignedQty: String
  deliveryBlock: String
  dp: [DPNo]
  invoice: [InvoiceNo]
  orderPartners: [OrderPartners]
  orderItems: [OrderItems]
  orderCondition: [OrderCondition]
  orderText: [OrderText]
  itemNoLatest: String
  poDate: String
  orderType: String
  orderTypeDesc: String
}

type TempOrderCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [TempOrderCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int

  """Item in last page."""
  latestPageItemNumber: Int
}

type TempOrderCountableEdge {
  """The item at the end of the edge."""
  node: TempOrder!

  """A cursor for use in pagination."""
  cursor: String!
}

input OrderDraftSorterInput {
  direction: OrderDirection!

  """Sort orderDrafts by the selected field."""
  field: OrderDraftField!
}

enum OrderDraftField {
  UPDATED_AT
  CREATED_AT
  SOLD_TO
  CONTRACT_NO
}

input ScgOrderDraftFilterInput {
  status: String
  type: OrderType
}

enum OrderType {
  DOMESTIC
  CUSTOMER
  EXPORT
  EO
  PO
}

type DomesticMaterialCodeNameCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [DomesticMaterialCodeNameCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type DomesticMaterialCodeNameCountableEdge {
  """The item at the end of the edge."""
  node: TempProductVariant!

  """A cursor for use in pagination."""
  cursor: String!
}

input DomesticMaterialCodeNameFilterInput {
  """"""
  id: Float
  metadata: [MetadataFilter!]
  material: String
}

type DomesticSaleEmployeeCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [DomesticSaleEmployeeCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type DomesticSaleEmployeeCountableEdge {
  """The item at the end of the edge."""
  node: SalesEmployee!

  """A cursor for use in pagination."""
  cursor: String!
}

type SalesEmployee {
  id: ID
  code: String
  name: String
}

input DomesticSaleEmployeeFilterInput {
  """"""
  id: Float
  metadata: [MetadataFilter!]
  salesEmployeee: String
}

type DomesticCompanyCountTableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [DomesticCompanyCountTableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type DomesticCompanyCountTableEdge {
  """The item at the end of the edge."""
  node: SapMigrationCompany!

  """A cursor for use in pagination."""
  cursor: String!
}

input DomesticCompanyFilterInput {
  businessUnit: String
  metadata: [MetadataFilter!]
}

type DomesticSalesGroupCountTableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [DomesticSalesGroupCountTableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type DomesticSalesGroupCountTableEdge {
  """The item at the end of the edge."""
  node: SalesGroup!

  """A cursor for use in pagination."""
  cursor: String!
}

input DomesticSalesGroupFilterInput {
  company: String
  metadata: [MetadataFilter!]
}

input DomesticOrderSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort domesticOrders by the selected field."""
  field: DomesticOrderSortField!
}

enum DomesticOrderSortField {
  SO_NO
}

input DomesticOrderFilterInput {
  """"""
  id: Float
  metadata: [MetadataFilter!]
  soldTo: String
  materialCodeName: String
  soNo: String
  contractNo: String
  dpNo: String
  invoiceNo: String
  bu: String
  company: String
  saleGroup: String
  saleEmployee: String
  orderType: String
  statusSap: [ScgDomesticOrderStatusSAP!]
  createDate: DateRangeInput
  lastUpdate: DateRangeInput
}

enum ScgDomesticOrderStatusSAP {
  COMPLETE
  BEING_PROCESS
}

type PreviewDomesticOrderLines {
  id: ID
  soldTo: SoldToMaster
  customer: SoldToMaster
  contract: TempContract
  poDate: Date
  poNumber: String
  shipTo: String
  billTo: String
  orderType: String
  requestDate: Date
  saleOrganization: SalesOrganization
  distributionChannel: DistributionChannel
  division: ScgDivision
  saleOffice: SalesOffice
  saleGroup: SalesGroup
  totalPrice: Float
  orderLines: [TempOrderLine]
  status: String
  orderNo: String
  scgpSalesEmployee: ScgpSalesEmployee
  createdBy: User
  createdAt: DateTime
  updatedAt: DateTime
  updateBy: User
  soNo: String
  type: String
  contractPiNo: String
  company: SapMigrationCompany
  paymentTerm: String
  creditStatus: String
  orderDate: Date
  statusSap: String
  customerGroup: CustomerGroupMaster
  customerGroup1: CustomerGroup1Master
  customerGroup2: CustomerGroup2Master
  customerGroup3: CustomerGroup3Master
  customerGroup4: CustomerGroup4Master
  dpNo: String
  invoiceNo: String
  deliveryBlock: String
  incoterm: String
  incoterms1: Incoterms1Master
  orderLinesIplan: [OrderLineIPlan]
  shippingPoint: String
  route: String
  poNo: String
  totalPriceIncTax: Float
  taxAmount: Float
  currency: String
  shipToAddress: String
  soldToAddress: String
  billToAddress: String
  taxPercent: Float
  orderAmtBeforeVat: String
  orderAmtVat: String
  orderAmtAfterVat: String
  itemCategory: String
  routeId: String
  routeName: String
  untimatedTol: String
  internalCommentsToWarehouse: String
  internalCommentsToLogistic: String
  externalCommentsToCustomer: String
  productInformation: String
  salesGroup: String
  paymentTermKey: String
  paymentTermDescTh: String
  poUploadFileName: String
  orderTypeDesc: String
  previewOrderLines(
    sortBy: DomesticOrderLinesSortingInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): DomesticOrderLinesCountableConnection
}

type DomesticOrderLinesCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [DomesticOrderLinesCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int

  """Item in last page."""
  latestPageItemNumber: Int
}

type DomesticOrderLinesCountableEdge {
  """The item at the end of the edge."""
  node: PreviewTempOrderLine!

  """A cursor for use in pagination."""
  cursor: String!
}

type PreviewTempOrderLine {
  id: ID
  order: TempOrder
  product: TempProduct
  variant: TempProductVariant
  quantity: Float
  plant: String
  netPrice: Float
  price: Float
  requestDate: Date
  internalCommentsToWarehouse: String
  shipTo: String
  productInformation: String
  paymentTerm: String
  checkoutLine: ContractCheckoutLine
  contractProduct: TempContractProduct
  contract: TempContract
  confirmedDate: Date
  itemNo: String
  overdue1: Boolean
  overdue2: Boolean
  attentionType: String
  remark: String
  dtr: String
  dtp: String
  originalRequestDate: Date
  delivery: String
  actualGiDate: Date
  giStatus: String
  billTo: String
  externalCommentsToCustomer: String
  internalCommentsToLogistic: String
  shippingPoint: String
  route: String
  priceCurrency: String
  weight: Float
  weightUnit: String
  itemCategory: String
  overDeliveryTol: Float
  underDeliveryTol: Float
  deliveryTolUnlimited: Boolean
  poNo: String
  prcGroup1: String
  poDate: Date
  iplan: OrderLineIPlan
  requestDateChangeReason: String
  poNoExternal: String
  paymentCondition: String
  unit: String
  status: String
  orderQuantityTon: Float
  splitItems: [TempOrderLine]
  salesUnit: String
  weightUnitTon: String
  netWeightTon: String
  atpCtpStatus: String
  itemStatusEn: String
  itemStatusTh: String
  assignedQuantity: Float
  inquiryMethod: String
  nonConfirmQuantity: Float
  confirmQuantity: Float
  sapConfirmStatus: String
  descriptionEn: String
  remaining: Float
  shippingMark: String
  statusEnum: IPlanOrderStatus
  logErrors: String
  logOldProduct: String
}

input DomesticOrderLinesSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort orderLines by the selected field."""
  field: DomesticOrderLinesSortField!
}

enum DomesticOrderLinesSortField {
  ITEM_NO
}

type OrderEnums {
  name: String
  value: String
}

input DomesticOrderConfirmationSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort orderConfirmation by the selected field."""
  field: DomesticOrderConfirmationSortField!
}

enum DomesticOrderConfirmationSortField {
  SO_NO
}

input DomesticOrderConfirmationFilterInput {
  soNo: String
  metadata: [MetadataFilter!]
  soldTo: [String!]
  saleOrganization: [String!]
  poNo: String
  material: [String!]
  distributionChannel: String
  status: [String!]
  materialGroup: [String!]
  orderCreateDate: DateRangeInput
  bu: String
}

type salesOrgSoldTo {
  code: String
  name: String
  shortName: String
  fullName: String
}

type LMSReportCSAdmin {
  dpNo: String
  poNo: String
  soNo: String
  itemNo: String
  materialDescription: String
  quantity: Float
  saleUnit: String
  soldToCodeName: String
  shipToName: String
  giDateTime: String
  carRegistrationNo: String
  departurePlacePosition: String
  estimateDateTime: String
  transportationStatus: String
  currentPosition: String
  remainingDistanceAsKilometers: String
  estimatedArrivalDateAndTime: String
}

input LMSReportCSAdminInput {
  saleOrg: String
  deliveryDate: DeliveryDateInput
  soldTo: String
  shippingPoint: String
  materialGradeGram: String
  poNo: String
  soNo: String
}

input DeliveryDateInput {
  gte: Date
  lte: Date
}

type GPSTracking {
  shipmentNo: String
  carRegistrationNo: String
  currentPosition: String
  carrier: String
  speed: Float
  dateAndTimeOfTheLastSignalReceived: String
  paymentNo: String
  placeOfDelivery: String
  carStatus: String
  destinationReachTime: String
  estimateToCustomersFromTheirCurrentLocation: String
  approximateRemainingDistance: Float
  estimatedTime: String
  estimatedArrivalTime: String
  distanceFromFactoryToCustomer: Float
  dateOfIssuanceOfInvoice: String
  deliveryDeadline: String
}

type DPHyperLink {
  totalQuantity: Float
  dpNoLines: [DPHyperLinkDetail]
}

type DPHyperLinkDetail {
  dpNo: String
  poNo: String
  soNo: String
  itemNo: String
  materialDescription: String
  quantity: Float
  saleUnit: String
}

type SAPOrderConfirmation {
  soNo: String
  poNo: String
  orderDate: String
  contractNo: String
  contractName: String
  salesOrgName: String
  soldToName: String
  paymentMethodName: String
  shipToCode: String
  isNotRef: Boolean
  orderLines: [SAPOrderConfirmationLineGroup]
}

type SAPOrderConfirmationLineGroup {
  saleOrg: String
  soldToCode: String
  soldToName: String
  itemNo: String
  materialCode: String
  materialDescription: String
  orderQty: String
  confirmQuantity: String
  nonConfirmQuantity: String
  saleUnit: String
  requestDate: String
  confirmDate: String
  status: String
  remarkOrder: String
}

input SAPOrderConfirmationInput {
  soldTo: [String]
  saleOrg: [String]!
  channel: String!
  productGroup: String
  createDate: SAPOrderConfirmationDateInput
  materialNoMaterialDescription: [String]
  poNo: String
  soNo: String
  status: InquiryOrderConfirmationStatus
  bu: String
  sourceOfApp: String
}

input SAPOrderConfirmationDateInput {
  gte: Date
  lte: Date
}

enum InquiryOrderConfirmationStatus {
  ALL
  CONFIRM
  NON_CONFIRM
  REJECT
}

type LMSReportCSCustomer {
  dnNo: String
  dataItem: [DataItems]
  soldToCode: String
  soldToName: String
  destinationName: String
  cutOffDate: String
  cutOffTime: String
  truckNo: String
  originName: String
  planDelivery: String
  statusId: String
  statusText: String
  boxPosition: String
  etaDistance: String
  estimatedTime: String
  carrierName: String
  boxSpeed: String
  boxGpsTime: String
  shipment: String
  accDistance: String
  goodIssueTime: String
  destinationInbound: String
  eta: String
  etaDuration: String
  status: String
  message: String
  shippingPoint: String
  returnFlag: String
  phoneNo: String
  contractId: String
  contractAbbr: String
  giTime: String
  summaryGrandTotal: Float
}

type DataItems {
  poNo: String
  soNo: String
  itemNo: String
  materialDescription: String
  deliveryQty: Float
  saleUnit: String
  lmsStatus: String
  giTime: String
  matNumber: String
  deliveryWeight: String
  weightUnitTon: String
}

input LMSReportCSCustomerInput {
  soldToCode: String!
  matNo: String
  saleOrgCode: String!
  soNo: String
  poNo: String
  shippingPoint: String
  deliveryDate: SAPPendingOrderReportDateInput!
}

input SAPPendingOrderReportDateInput {
  gte: Date
  lte: Date
}

type GPSReportCSCustomer {
  truckNo: String
  boxPosition: String
  carrierName: String
  boxSpeed: String
  boxGpsTime: String
  shipment: String
  destinationName: String
  statusId: String
  destinationInbound: String
  estimatedTime: String
  etaDistance: String
  etaDuration: String
  accDistance: String
  goodIssueTime: String
  planDelivery: String
  statusText: String
  dnNo: String
}

input GPSReportCSCustomerInput {
  dp: String!
  shippingPoint: String!
  soldTo: String!
}

type SAPChangeOrder {
  soNo: String
  poNo: String
  contractNo: String
  soldToParty: String
  shipTo: String
  country: String
  incoterm: String
  payment: String
  bu: String
  projectName: String
  company: String
  paymentTerms: String
  creditStatusOfDocument: String
  orderDate: String
  orderStatusSap: String
  orderStatusEOrdering: String
  salesOrgCode: String
  soldToCode: String
  isNotRef: Boolean
}

input SAPChangeOrderInput {
  soldTo: [String]
  saleOrg: String
  channel: String
  materialNoMaterialDescription: [String]
  orderType: String
  saleGroup: String
  createDate: SAPListOfSaleOrderDateInput
  requestDeliveryDate: SAPListOfSaleOrderDateInput
  materialGroup1: String
  materialPricingGroup: MaterialPricingGroupEnum
  purchaseOrderNo: String
  saleOrderNo: String
  plant: String
  deliveryBlock: String
  status: ChangeOrderStatusEnum
  requireAttentionFlag: String
  salesEmployeeNo: String
  createBy: String
  sortByField: SoldToSortInput
  sourceOfApp: String
  bu: String
  isOrderTracking: Boolean
  contractNo: String
  dpNo: String
  invoiceNo: String
  lastUpdateDate: SAPListOfSaleOrderDateInput
  shipTo: String
  orderStatus: [ChangeOrderOrderStatus]
}

enum ChangeOrderStatusEnum {
  ALL
  COMPLETE
  OPEN
}

enum ChangeOrderOrderStatus {
  ALL
  RECEIVED_ORDER
  CREDIT_CASH_ISSUE
  PARTIAL_COMMITTED_ORDER
  READY_FOR_DELIVERY
  PARTIAL_DELIVERY
  COMPLETED_DELIVERY
  CANCELLED
  COMPLETED_ORDER
}

input ChangeOrderSoldToFilterInput {
  """"""
  id: Float
  metadata: [MetadataFilter!]
  search: String
}

input ChangeOrderShipToFilterInput {
  """"""
  id: Float
  metadata: [MetadataFilter!]
  search: String
}

type ContractCheckout {
  """ID of checkout"""
  id: ID
  customer: SoldToMaster
  createdBy: User
  contract: TempContract
  quantity: Float
  lines(sortBy: CheckoutLineSortingInput): [ContractCheckoutLine!]
}

input CheckoutLineSortingInput {
  """Specifies the direction in which to sort checkout lines."""
  direction: OrderDirection!

  """Specifies the field in which to sort checkout lines."""
  field: CheckoutLineOrderField!
}

enum CheckoutLineOrderField {
  CONTRACT
  TOTAL
  REMAIN
  PRICE
}

type ContractCheckoutCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [ContractCheckoutCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type ContractCheckoutCountableEdge {
  """The item at the end of the edge."""
  node: ContractCheckout!

  """A cursor for use in pagination."""
  cursor: String!
}

input ContractCheckoutsSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort contractCheckouts by the selected field."""
  field: ContractCheckoutsSortField!
}

enum ContractCheckoutsSortField {
  """Sort contract checkouts by lines count."""
  LINES_COUNT
}

type ContractCheckoutTotal {
  totalCustomers: Int
  totalProducts: Int
}

type ContractCheckoutLineCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [ContractCheckoutLineCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type ContractCheckoutLineCountableEdge {
  """The item at the end of the edge."""
  node: ContractCheckoutLine!

  """A cursor for use in pagination."""
  cursor: String!
}

type ContractCheckoutProductVariant {
  """ID of checkout"""
  id: ID
  productVariant: [TempProduct]
  contractProduct: [TempContractProduct]
}

type BusinessUnitCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [BusinessUnitCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type BusinessUnitCountableEdge {
  """The item at the end of the edge."""
  node: BusinessUnit!

  """A cursor for use in pagination."""
  cursor: String!
}

type TempContractCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [TempContractCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int

  """Item in last page."""
  latestPageItemNumber: Int
}

type TempContractCountableEdge {
  """The item at the end of the edge."""
  node: TempContract!

  """A cursor for use in pagination."""
  cursor: String!
}

input TempContractFilterInput {
  """"""
  id: Float
  companyIds: [Int!]
  gradeGram: String
  materialCode: String
}

input ContractsSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort contracts by the selected field."""
  field: ContractsSortField!
}

enum ContractsSortField {
  """Sort contracts by contract no."""
  CONTRACT_NO
}

input MaterialMasterFilterInput {
  """"""
  id: Float
  metadata: [MetadataFilter!]
  gradeGram: String
  materialCode: String
  gradeGramCode: String
}

"""Customer Block"""
type CustomerBlockResponse {
  customerBlock: Boolean
}

input CustomerBlockInput {
  soldToCode: String
  contractNo: String
}

input PendingOrderReportShipTosFilterInput {
  """"""
  id: Float
  metadata: [MetadataFilter!]
  search: String
}

type ContractCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [ContractCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type ContractCountableEdge {
  """The item at the end of the edge."""
  node: Contract!

  """A cursor for use in pagination."""
  cursor: String!
}

type Contract {
  """ID of scg_contract"""
  id: ID!
  businessUnit: [Division!]
  company: Company
  projectName: String
  startDate: Date
  endDate: Date

  """ID of scg_customer to view scg_contract"""
  customerId: ID!
  paymentTerm: String
  productVariants(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ScgProductVariantCountableConnection
}

type ScgProductVariantCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [ScgProductVariantCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type ScgProductVariantCountableEdge {
  """The item at the end of the edge."""
  node: ScgProductVariant!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Represents a version of a product such as different size or color."""
type ScgProductVariant implements Node & ObjectWithMetadata {
  id: ID!

  """List of private metadata items. Requires staff permissions to access."""
  privateMetadata: [MetadataItem!]!

  """
  A single key from private metadata. Requires staff permissions to access.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafield(key: String!): String

  """
  Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafields(keys: [String!]): Metadata

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem!]!

  """
  A single key from public metadata.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafield(key: String!): String

  """
  Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafields(keys: [String!]): Metadata
  name: String!
  sku: String
  product: Product!
  trackInventory: Boolean!
  quantityLimitPerCustomer: Int
  weight: Weight

  """
  Channel given to retrieve this product variant. Also used by federation gateway to resolve this object in a federated query.
  """
  channel: String

  """
  List of price information in channels for the product. Requires one of the following permissions: AUTHENTICATED_APP, AUTHENTICATED_STAFF_USER.
  """
  channelListings: [ProductVariantChannelListing!]

  """
  Lists the storefront variant's pricing, the current price and discounts, only meant for displaying.
  """
  pricing(
    """
    Destination address used to find warehouses where stock availability for this product is checked. If address is empty, uses `Shop.companyAddress` or fallbacks to server's `settings.DEFAULT_COUNTRY` configuration.
    """
    address: AddressInput
  ): VariantPricingInfo

  """List of attributes assigned to this variant."""
  attributes(
    """Define scope of returned attributes."""
    variantSelection: VariantAttributeScope
  ): [SelectedAttribute!]!

  """Gross margin percentage value."""
  margin: Int

  """
  Total quantity ordered. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  quantityOrdered: Int

  """
  Total revenue generated by a variant in given period of time. Note: this field should be queried using `reportProductSales` query as it uses optimizations suitable for such calculations. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  revenue(period: ReportingPeriod): TaxedMoney

  """List of images for the product variant."""
  images: [ProductImage!] @deprecated(reason: "This field will be removed in Saleor 4.0. Use the `media` field instead.")

  """List of media for the product variant."""
  media: [ProductMedia!]

  """Returns translated product variant fields for the given language code."""
  translation(
    """A language code to return the translation for product variant."""
    languageCode: LanguageCodeEnum!
  ): ProductVariantTranslation

  """
  Digital content for the product variant. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  digitalContent: DigitalContent

  """
  Stocks for the product variant. Requires one of the following permissions: MANAGE_PRODUCTS, MANAGE_ORDERS.
  """
  stocks(
    """
    Destination address used to find warehouses where stock availability for this product is checked. If address is empty, uses `Shop.companyAddress` or fallbacks to server's `settings.DEFAULT_COUNTRY` configuration.
    """
    address: AddressInput

    """
    Two-letter ISO 3166-1 country code. 
    
    DEPRECATED: this field will be removed in Saleor 4.0. Use `address` argument instead.
    """
    countryCode: CountryCode
  ): [Stock!]

  """
  Quantity of a product available for sale in one checkout. Field value will be `null` when no `limitQuantityPerCheckout` in global settings has been set, and `productVariant` stocks are not tracked.
  """
  quantityAvailable(
    """
    Destination address used to find warehouses where stock availability for this product is checked. If address is empty, uses `Shop.companyAddress` or fallbacks to server's `settings.DEFAULT_COUNTRY` configuration.
    """
    address: AddressInput

    """
    Two-letter ISO 3166-1 country code. When provided, the exact quantity from a warehouse operating in shipping zones that contain this country will be returned. Otherwise, it will return the maximum quantity from all shipping zones. 
    
    DEPRECATED: this field will be removed in Saleor 4.0. Use `address` argument instead.
    """
    countryCode: CountryCode
  ): Int

  """
  Added in Saleor 3.1. Preorder data for product variant. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  preorder: PreorderData
  created: DateTime!
  updatedAt: DateTime!

  """List of materials related to product variant."""
  materials: [Material]!
  totalStock: Int
}

type Material {
  """ID of material"""
  id: ID!
  name: String
  unit: String
  description: String
}

input ContractFilterInput {
  projectName: String
  search: String
}

type OrderByCustomerCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [OrderByCustomerCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type OrderByCustomerCountableEdge {
  """The item at the end of the edge."""
  node: OrderByCustomer!

  """A cursor for use in pagination."""
  cursor: String!
}

type OrderByCustomer {
  """ID of order"""
  id: ID!
  status: String
  totalNetAmount: Float
  totalGrossAmount: Float
  orderLines: [OrderLineByCustomer!]
}

type OrderLineByCustomer {
  productName: String
  productSku: String
  quatity: Int
}

type MaterialCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [MaterialCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type MaterialCountableEdge {
  """The item at the end of the edge."""
  node: Material!

  """A cursor for use in pagination."""
  cursor: String!
}

type ProductVariantMaterialCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [ProductVariantMaterialCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type ProductVariantMaterialCountableEdge {
  """The item at the end of the edge."""
  node: ProductVariantMaterial!

  """A cursor for use in pagination."""
  cursor: String!
}

type ProductVariantMaterial {
  productName: String

  """ID of product variant"""
  id: ID!
  value: Float
  material: Material
  productVariant: ProductVariantType
}

type ProductVariantType {
  name: String
  sku: String
}

"""An enumeration."""
enum WebhookSampleEventTypeEnum {
  CATEGORY_CREATED
  CATEGORY_UPDATED
  CATEGORY_DELETED
  CHANNEL_CREATED
  CHANNEL_UPDATED
  CHANNEL_DELETED
  CHANNEL_STATUS_CHANGED
  GIFT_CARD_CREATED
  GIFT_CARD_UPDATED
  GIFT_CARD_DELETED
  GIFT_CARD_STATUS_CHANGED
  ORDER_CREATED
  ORDER_CONFIRMED
  ORDER_FULLY_PAID
  ORDER_UPDATED
  ORDER_CANCELLED
  ORDER_FULFILLED
  DRAFT_ORDER_CREATED
  DRAFT_ORDER_UPDATED
  DRAFT_ORDER_DELETED
  SALE_CREATED
  SALE_UPDATED
  SALE_DELETED
  INVOICE_REQUESTED
  INVOICE_DELETED
  INVOICE_SENT
  CUSTOMER_CREATED
  CUSTOMER_UPDATED
  COLLECTION_CREATED
  COLLECTION_UPDATED
  COLLECTION_DELETED
  PRODUCT_CREATED
  PRODUCT_UPDATED
  PRODUCT_DELETED
  PRODUCT_VARIANT_CREATED
  PRODUCT_VARIANT_UPDATED
  PRODUCT_VARIANT_DELETED
  PRODUCT_VARIANT_OUT_OF_STOCK
  PRODUCT_VARIANT_BACK_IN_STOCK
  CHECKOUT_CREATED
  CHECKOUT_UPDATED
  FULFILLMENT_CREATED
  FULFILLMENT_CANCELED
  NOTIFY_USER
  PAGE_CREATED
  PAGE_UPDATED
  PAGE_DELETED
  SHIPPING_PRICE_CREATED
  SHIPPING_PRICE_UPDATED
  SHIPPING_PRICE_DELETED
  SHIPPING_ZONE_CREATED
  SHIPPING_ZONE_UPDATED
  SHIPPING_ZONE_DELETED
  TRANSLATION_CREATED
  TRANSLATION_UPDATED
}

type WarehouseCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [WarehouseCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type WarehouseCountableEdge {
  """The item at the end of the edge."""
  node: Warehouse!

  """A cursor for use in pagination."""
  cursor: String!
}

input WarehouseFilterInput {
  clickAndCollectOption: WarehouseClickAndCollectOptionEnum
  search: String
  ids: [ID!]
  isPrivate: Boolean
}

input WarehouseSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort warehouses by the selected field."""
  field: WarehouseSortField!
}

enum WarehouseSortField {
  """Sort warehouses by name."""
  NAME
}

type TranslatableItemConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [TranslatableItemEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type TranslatableItemEdge {
  """The item at the end of the edge."""
  node: TranslatableItem!

  """A cursor for use in pagination."""
  cursor: String!
}

union TranslatableItem = ProductTranslatableContent | CollectionTranslatableContent | CategoryTranslatableContent | AttributeTranslatableContent | AttributeValueTranslatableContent | ProductVariantTranslatableContent | PageTranslatableContent | ShippingMethodTranslatableContent | SaleTranslatableContent | VoucherTranslatableContent | MenuItemTranslatableContent

type ProductTranslatableContent implements Node {
  id: ID!
  seoTitle: String
  seoDescription: String
  name: String!
  description: JSONString

  """Description of the product (JSON)."""
  descriptionJson: JSONString @deprecated(reason: "This field will be removed in Saleor 4.0. Use the `description` field instead.")

  """Returns translated product fields for the given language code."""
  translation(
    """A language code to return the translation for product."""
    languageCode: LanguageCodeEnum!
  ): ProductTranslation

  """Represents an individual item for sale in the storefront."""
  product: Product @deprecated(reason: "This field will be removed in Saleor 4.0. Get model fields from the root level queries.")

  """List of product attribute values that can be translated."""
  attributeValues: [AttributeValueTranslatableContent!]!
}

type AttributeValueTranslatableContent implements Node {
  id: ID!
  name: String!
  richText: JSONString

  """Returns translated attribute value fields for the given language code."""
  translation(
    """A language code to return the translation for attribute value."""
    languageCode: LanguageCodeEnum!
  ): AttributeValueTranslation

  """Represents a value of an attribute."""
  attributeValue: AttributeValue @deprecated(reason: "This field will be removed in Saleor 4.0. Get model fields from the root level queries.")
}

type CollectionTranslatableContent implements Node {
  id: ID!
  seoTitle: String
  seoDescription: String
  name: String!
  description: JSONString

  """Description of the collection (JSON)."""
  descriptionJson: JSONString @deprecated(reason: "This field will be removed in Saleor 4.0. Use the `description` field instead.")

  """Returns translated collection fields for the given language code."""
  translation(
    """A language code to return the translation for collection."""
    languageCode: LanguageCodeEnum!
  ): CollectionTranslation

  """Represents a collection of products."""
  collection: Collection @deprecated(reason: "This field will be removed in Saleor 4.0. Get model fields from the root level queries.")
}

type CategoryTranslatableContent implements Node {
  id: ID!
  seoTitle: String
  seoDescription: String
  name: String!
  description: JSONString

  """Description of the category (JSON)."""
  descriptionJson: JSONString @deprecated(reason: "This field will be removed in Saleor 4.0. Use the `description` field instead.")

  """Returns translated category fields for the given language code."""
  translation(
    """A language code to return the translation for category."""
    languageCode: LanguageCodeEnum!
  ): CategoryTranslation

  """Represents a single category of products."""
  category: Category @deprecated(reason: "This field will be removed in Saleor 4.0. Get model fields from the root level queries.")
}

type AttributeTranslatableContent implements Node {
  id: ID!
  name: String!

  """Returns translated attribute fields for the given language code."""
  translation(
    """A language code to return the translation for attribute."""
    languageCode: LanguageCodeEnum!
  ): AttributeTranslation

  """Custom attribute of a product."""
  attribute: Attribute @deprecated(reason: "This field will be removed in Saleor 4.0. Get model fields from the root level queries.")
}

type ProductVariantTranslatableContent implements Node {
  id: ID!
  name: String!

  """Returns translated product variant fields for the given language code."""
  translation(
    """A language code to return the translation for product variant."""
    languageCode: LanguageCodeEnum!
  ): ProductVariantTranslation

  """Represents a version of a product such as different size or color."""
  productVariant: ProductVariant @deprecated(reason: "This field will be removed in Saleor 4.0. Get model fields from the root level queries.")

  """List of product variant attribute values that can be translated."""
  attributeValues: [AttributeValueTranslatableContent!]!
}

type PageTranslatableContent implements Node {
  id: ID!
  seoTitle: String
  seoDescription: String
  title: String!
  content: JSONString

  """Content of the page (JSON)."""
  contentJson: JSONString @deprecated(reason: "This field will be removed in Saleor 4.0. Use the `content` field instead.")

  """Returns translated page fields for the given language code."""
  translation(
    """A language code to return the translation for page."""
    languageCode: LanguageCodeEnum!
  ): PageTranslation

  """
  A static page that can be manually added by a shop operator through the dashboard.
  """
  page: Page @deprecated(reason: "This field will be removed in Saleor 4.0. Get model fields from the root level queries.")

  """List of page content attribute values that can be translated."""
  attributeValues: [AttributeValueTranslatableContent!]!
}

type PageTranslation implements Node {
  id: ID!

  """Translation language."""
  language: LanguageDisplay!
  seoTitle: String
  seoDescription: String
  title: String
  content: JSONString

  """Translated description of the page (JSON)."""
  contentJson: JSONString @deprecated(reason: "This field will be removed in Saleor 4.0. Use the `content` field instead.")
}

"""
A static page that can be manually added by a shop operator through the dashboard.
"""
type Page implements Node & ObjectWithMetadata {
  id: ID!

  """List of private metadata items. Requires staff permissions to access."""
  privateMetadata: [MetadataItem!]!

  """
  A single key from private metadata. Requires staff permissions to access.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafield(key: String!): String

  """
  Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafields(keys: [String!]): Metadata

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem!]!

  """
  A single key from public metadata.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafield(key: String!): String

  """
  Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafields(keys: [String!]): Metadata
  seoTitle: String
  seoDescription: String
  title: String!

  """Content of the page (JSON)."""
  content: JSONString
  publicationDate: Date @deprecated(reason: "This field will be removed in Saleor 4.0. Use the `publishedAt` field to fetch the publication date.")

  """Added in Saleor 3.3. The page publication date."""
  publishedAt: DateTime
  isPublished: Boolean!
  slug: String!
  pageType: PageType!
  created: DateTime!

  """Content of the page (JSON)."""
  contentJson: JSONString! @deprecated(reason: "This field will be removed in Saleor 4.0. Use the `content` field instead.")

  """Returns translated page fields for the given language code."""
  translation(
    """A language code to return the translation for page."""
    languageCode: LanguageCodeEnum!
  ): PageTranslation

  """List of attributes assigned to this product."""
  attributes: [SelectedAttribute!]!
}

"""
Represents a type of page. It defines what attributes are available to pages of this type.
"""
type PageType implements Node & ObjectWithMetadata {
  id: ID!

  """List of private metadata items. Requires staff permissions to access."""
  privateMetadata: [MetadataItem!]!

  """
  A single key from private metadata. Requires staff permissions to access.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafield(key: String!): String

  """
  Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafields(keys: [String!]): Metadata

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem!]!

  """
  A single key from public metadata.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafield(key: String!): String

  """
  Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafields(keys: [String!]): Metadata
  name: String!
  slug: String!

  """Page attributes of that page type."""
  attributes: [Attribute!]

  """
  Attributes that can be assigned to the page type. Requires one of the following permissions: MANAGE_PAGES.
  """
  availableAttributes(
    filter: AttributeFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): AttributeCountableConnection

  """
  Whether page type has pages assigned. Requires one of the following permissions: MANAGE_PAGES.
  """
  hasPages: Boolean
}

type ShippingMethodTranslatableContent implements Node {
  id: ID!
  name: String!
  description: JSONString

  """Returns translated shipping method fields for the given language code."""
  translation(
    """A language code to return the translation for shipping method."""
    languageCode: LanguageCodeEnum!
  ): ShippingMethodTranslation

  """
  Shipping method are the methods you'll use to get customer's orders  to them. They are directly exposed to the customers. Requires one of the following permissions: MANAGE_SHIPPING.
  """
  shippingMethod: ShippingMethodType @deprecated(reason: "This field will be removed in Saleor 4.0. Get model fields from the root level queries.")
}

type SaleTranslatableContent implements Node {
  id: ID!
  name: String!

  """Returns translated sale fields for the given language code."""
  translation(
    """A language code to return the translation for sale."""
    languageCode: LanguageCodeEnum!
  ): SaleTranslation

  """
  Sales allow creating discounts for categories, collections or products and are visible to all the customers. Requires one of the following permissions: MANAGE_DISCOUNTS.
  """
  sale: Sale @deprecated(reason: "This field will be removed in Saleor 4.0. Get model fields from the root level queries.")
}

type SaleTranslation implements Node {
  id: ID!

  """Translation language."""
  language: LanguageDisplay!
  name: String
}

"""
Sales allow creating discounts for categories, collections or products and are visible to all the customers.
"""
type Sale implements Node & ObjectWithMetadata {
  id: ID!

  """List of private metadata items. Requires staff permissions to access."""
  privateMetadata: [MetadataItem!]!

  """
  A single key from private metadata. Requires staff permissions to access.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafield(key: String!): String

  """
  Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafields(keys: [String!]): Metadata

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem!]!

  """
  A single key from public metadata.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafield(key: String!): String

  """
  Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafields(keys: [String!]): Metadata
  name: String!
  type: SaleType!
  startDate: DateTime!
  endDate: DateTime
  created: DateTime!
  updatedAt: DateTime!

  """List of categories this sale applies to."""
  categories(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): CategoryCountableConnection

  """
  List of collections this sale applies to. Requires one of the following permissions: MANAGE_DISCOUNTS.
  """
  collections(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): CollectionCountableConnection

  """
  List of products this sale applies to. Requires one of the following permissions: MANAGE_DISCOUNTS.
  """
  products(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ProductCountableConnection

  """
  Added in Saleor 3.1. List of product variants this sale applies to. Requires one of the following permissions: MANAGE_DISCOUNTS.
  """
  variants(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ProductVariantCountableConnection

  """Returns translated sale fields for the given language code."""
  translation(
    """A language code to return the translation for sale."""
    languageCode: LanguageCodeEnum!
  ): SaleTranslation

  """
  List of channels available for the sale. Requires one of the following permissions: MANAGE_DISCOUNTS.
  """
  channelListings: [SaleChannelListing!]

  """Sale value."""
  discountValue: Float

  """Currency code for sale."""
  currency: String
}

enum SaleType {
  FIXED
  PERCENTAGE
}

"""Represents sale channel listing."""
type SaleChannelListing implements Node {
  id: ID!
  channel: Channel!
  discountValue: Float!
  currency: String!
}

type VoucherTranslatableContent implements Node {
  id: ID!
  name: String

  """Returns translated voucher fields for the given language code."""
  translation(
    """A language code to return the translation for voucher."""
    languageCode: LanguageCodeEnum!
  ): VoucherTranslation

  """
  Vouchers allow giving discounts to particular customers on categories, collections or specific products. They can be used during checkout by providing valid voucher codes. Requires one of the following permissions: MANAGE_DISCOUNTS.
  """
  voucher: Voucher @deprecated(reason: "This field will be removed in Saleor 4.0. Get model fields from the root level queries.")
}

type MenuItemTranslatableContent implements Node {
  id: ID!
  name: String!

  """Returns translated menu item fields for the given language code."""
  translation(
    """A language code to return the translation for menu item."""
    languageCode: LanguageCodeEnum!
  ): MenuItemTranslation

  """
  Represents a single item of the related menu. Can store categories, collection or pages.
  """
  menuItem: MenuItem @deprecated(reason: "This field will be removed in Saleor 4.0. Get model fields from the root level queries.")
}

type MenuItemTranslation implements Node {
  id: ID!

  """Translation language."""
  language: LanguageDisplay!
  name: String!
}

"""
Represents a single item of the related menu. Can store categories, collection or pages.
"""
type MenuItem implements Node & ObjectWithMetadata {
  id: ID!

  """List of private metadata items. Requires staff permissions to access."""
  privateMetadata: [MetadataItem!]!

  """
  A single key from private metadata. Requires staff permissions to access.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafield(key: String!): String

  """
  Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafields(keys: [String!]): Metadata

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem!]!

  """
  A single key from public metadata.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafield(key: String!): String

  """
  Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafields(keys: [String!]): Metadata
  name: String!
  menu: Menu!
  parent: MenuItem
  category: Category

  """
  A collection associated with this menu item. Requires one of the following permissions to include the unpublished items: MANAGE_ORDERS, MANAGE_DISCOUNTS, MANAGE_PRODUCTS.
  """
  collection: Collection

  """
  A page associated with this menu item. Requires one of the following permissions to include unpublished items: PagePermissions.MANAGE_PAGES.
  """
  page: Page
  level: Int!
  children: [MenuItem!]

  """URL to the menu item."""
  url: String

  """Returns translated menu item fields for the given language code."""
  translation(
    """A language code to return the translation for menu item."""
    languageCode: LanguageCodeEnum!
  ): MenuItemTranslation
}

"""
Represents a single menu - an object that is used to help navigate through the store.
"""
type Menu implements Node & ObjectWithMetadata {
  id: ID!

  """List of private metadata items. Requires staff permissions to access."""
  privateMetadata: [MetadataItem!]!

  """
  A single key from private metadata. Requires staff permissions to access.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafield(key: String!): String

  """
  Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  privateMetafields(keys: [String!]): Metadata

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem!]!

  """
  A single key from public metadata.
  
  Tip: Use GraphQL aliases to fetch multiple keys.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafield(key: String!): String

  """
  Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
  
  Added in Saleor 3.3.
  
  Note: this feature is in a preview state and can be subject to changes at later point.
  """
  metafields(keys: [String!]): Metadata
  name: String!
  slug: String!
  items: [MenuItem!]
}

enum TranslatableKinds {
  ATTRIBUTE
  ATTRIBUTE_VALUE
  CATEGORY
  COLLECTION
  MENU_ITEM
  PAGE
  PRODUCT
  SALE
  SHIPPING_METHOD
  VARIANT
  VOUCHER
}

type StockCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [StockCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type StockCountableEdge {
  """The item at the end of the edge."""
  node: Stock!

  """A cursor for use in pagination."""
  cursor: String!
}

input StockFilterInput {
  """"""
  quantity: Float
  search: String
}

"""
Represents a shop resource containing general shop data and configuration.
"""
type Shop {
  """List of available payment gateways."""
  availablePaymentGateways(
    """
    A currency for which gateways will be returned. 
    
    DEPRECATED: this field will be removed in Saleor 4.0. Use `channel` argument instead.
    """
    currency: String

    """Slug of a channel for which the data should be returned."""
    channel: String
  ): [PaymentGateway!]!

  """List of available external authentications."""
  availableExternalAuthentications: [ExternalAuthentication!]!

  """Shipping methods that are available for the shop."""
  availableShippingMethods(
    """Slug of a channel for which the data should be returned."""
    channel: String!

    """Address for which available shipping methods should be returned."""
    address: AddressInput
  ): [ShippingMethod!]

  """
  Added in Saleor 3.1. List of all currencies supported by shop's channels. Requires one of the following permissions: AUTHENTICATED_STAFF_USER, AUTHENTICATED_APP.
  """
  channelCurrencies: [String!]!

  """List of countries available in the shop."""
  countries(
    """
    A language code to return the translation for. 
    
    DEPRECATED: this field will be removed in Saleor 4.0.
    """
    languageCode: LanguageCodeEnum

    """Filtering options for countries"""
    filter: CountryFilterInput
  ): [CountryDisplay!]!

  """Shop's default country."""
  defaultCountry: CountryDisplay

  """
  Default shop's email sender's name. Requires one of the following permissions: MANAGE_SETTINGS.
  """
  defaultMailSenderName: String

  """
  Default shop's email sender's address. Requires one of the following permissions: MANAGE_SETTINGS.
  """
  defaultMailSenderAddress: String

  """Shop's description."""
  description: String

  """Shop's domain data."""
  domain: Domain!

  """List of the shops's supported languages."""
  languages: [LanguageDisplay!]!

  """Shop's name."""
  name: String!

  """List of available permissions."""
  permissions: [Permission!]!

  """List of possible phone prefixes."""
  phonePrefixes: [String!]!

  """Header text."""
  headerText: String

  """Include taxes in prices."""
  includeTaxesInPrices: Boolean!

  """Added in Saleor 3.1. Automatically approve all new fulfillments."""
  fulfillmentAutoApprove: Boolean!

  """Added in Saleor 3.1. Allow to approve fulfillments which are unpaid."""
  fulfillmentAllowUnpaid: Boolean!

  """Display prices with tax in store."""
  displayGrossPrices: Boolean!

  """Charge taxes on shipping."""
  chargeTaxesOnShipping: Boolean!

  """Enable inventory tracking."""
  trackInventoryByDefault: Boolean

  """Default weight unit."""
  defaultWeightUnit: WeightUnitsEnum

  """Returns translated shop fields for the given language code."""
  translation(
    """A language code to return the translation for shop."""
    languageCode: LanguageCodeEnum!
  ): ShopTranslation

  """
  Enable automatic fulfillment for all digital products. Requires one of the following permissions: MANAGE_SETTINGS.
  """
  automaticFulfillmentDigitalProducts: Boolean

  """
  Added in Saleor 3.1. Default number of minutes stock will be reserved for anonymous checkout or null when stock reservation is disabled. Requires one of the following permissions: MANAGE_SETTINGS.
  """
  reserveStockDurationAnonymousUser: Int

  """
  Added in Saleor 3.1. Default number of minutes stock will be reserved for authenticated checkout or null when stock reservation is disabled. Requires one of the following permissions: MANAGE_SETTINGS.
  """
  reserveStockDurationAuthenticatedUser: Int

  """
  Added in Saleor 3.1. Default number of maximum line quantity in single checkout (per single checkout line). Note: this feature is in a preview state and can be subject to changes at later point. Requires one of the following permissions: MANAGE_SETTINGS.
  """
  limitQuantityPerCheckout: Int

  """
  Default number of max downloads per digital content URL. Requires one of the following permissions: MANAGE_SETTINGS.
  """
  defaultDigitalMaxDownloads: Int

  """
  Default number of days which digital content URL will be valid. Requires one of the following permissions: MANAGE_SETTINGS.
  """
  defaultDigitalUrlValidDays: Int

  """Company address."""
  companyAddress: Address

  """URL of a view where customers can set their password."""
  customerSetPasswordUrl: String

  """
  List of staff notification recipients. Requires one of the following permissions: MANAGE_SETTINGS.
  """
  staffNotificationRecipients: [StaffNotificationRecipient!]

  """
  Resource limitations and current usage if any set for a shop Requires one of the following permissions: AUTHENTICATED_STAFF_USER.
  """
  limits: LimitInfo!

  """
  Saleor API version. Requires one of the following permissions: AUTHENTICATED_STAFF_USER, AUTHENTICATED_APP.
  """
  version: String!
}

type ExternalAuthentication {
  """ID of external authentication plugin."""
  id: String!

  """Name of external authentication plugin."""
  name: String
}

input CountryFilterInput {
  """
  Boolean for filtering countries by having shipping zone assigned.If 'true', return countries with shipping zone assigned.If 'false', return countries without any shipping zone assigned.If the argument is not provided (null), return all countries.
  """
  attachedToShippingZones: Boolean
}

"""Represents shop's domain."""
type Domain {
  """The host name of the domain."""
  host: String!

  """Inform if SSL is enabled."""
  sslEnabled: Boolean!

  """Shop's absolute URL."""
  url: String!
}

type ShopTranslation implements Node {
  id: ID!

  """Translation language."""
  language: LanguageDisplay!
  headerText: String!
  description: String!
}

"""
Represents a recipient of email notifications send by Saleor, such as notifications about new orders. Notifications can be assigned to staff users or arbitrary email addresses.
"""
type StaffNotificationRecipient implements Node {
  id: ID!

  """Returns a user subscribed to email notifications."""
  user: User

  """Returns email address of a user subscribed to email notifications."""
  email: String

  """Determines if a notification active."""
  active: Boolean
}

type LimitInfo {
  """Defines the current resource usage."""
  currentUsage: Limits!

  """Defines the allowed maximum resource usage, null means unlimited."""
  allowedUsage: Limits!
}

type Limits {
  channels: Int
  orders: Int
  productVariants: Int
  staffUsers: Int
  warehouses: Int
}

"""Order related settings from site settings."""
type OrderSettings {
  automaticallyConfirmAllNewOrders: Boolean!
  automaticallyFulfillNonShippableGiftCard: Boolean!
}

"""Gift card related settings from site settings."""
type GiftCardSettings {
  """The gift card expiry type settings."""
  expiryType: GiftCardSettingsExpiryTypeEnum!

  """The gift card expiry period settings."""
  expiryPeriod: TimePeriod
}

"""An enumeration."""
enum GiftCardSettingsExpiryTypeEnum {
  NEVER_EXPIRE
  EXPIRY_PERIOD
}

type TimePeriod {
  """The length of the period."""
  amount: Int!

  """The type of the period."""
  type: TimePeriodTypeEnum!
}

"""An enumeration."""
enum TimePeriodTypeEnum {
  DAY
  WEEK
  MONTH
  YEAR
}

input ShippingZoneFilterInput {
  search: String
  channels: [ID!]
}

type DigitalContentCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [DigitalContentCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type DigitalContentCountableEdge {
  """The item at the end of the edge."""
  node: DigitalContent!

  """A cursor for use in pagination."""
  cursor: String!
}

input CategoryFilterInput {
  search: String
  metadata: [MetadataFilter!]
  ids: [ID!]
}

input CategorySortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """
  Specifies the channel in which to sort the data.
  
  DEPRECATED: this field will be removed in Saleor 4.0. Use root-level channel argument instead.
  """
  channel: String

  """Sort categories by the selected field."""
  field: CategorySortField!
}

enum CategorySortField {
  """Sort categories by name."""
  NAME

  """Sort categories by product count."""
  PRODUCT_COUNT

  """Sort categories by subcategory count."""
  SUBCATEGORY_COUNT
}

input CollectionFilterInput {
  published: CollectionPublished
  search: String
  metadata: [MetadataFilter!]
  ids: [ID!]

  """
  Specifies the channel by which the data should be filtered. 
  
  DEPRECATED: this field will be removed in Saleor 4.0. Use root-level channel argument instead.
  """
  channel: String
}

enum CollectionPublished {
  PUBLISHED
  HIDDEN
}

input CollectionSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """
  Specifies the channel in which to sort the data.
  
  DEPRECATED: this field will be removed in Saleor 4.0. Use root-level channel argument instead.
  """
  channel: String

  """Sort collections by the selected field."""
  field: CollectionSortField!
}

enum CollectionSortField {
  """Sort collections by name."""
  NAME

  """Sort collections by availability."""
  AVAILABILITY

  """Sort collections by product count."""
  PRODUCT_COUNT

  """
  Sort collections by publication date.
  
  DEPRECATED: this field will be removed in Saleor 4.0.
  """
  PUBLICATION_DATE

  """
  Sort collections by publication date.
  
  DEPRECATED: this field will be removed in Saleor 4.0.
  """
  PUBLISHED_AT
}

input ProductTypeFilterInput {
  search: String
  configurable: ProductTypeConfigurable
  productType: ProductTypeEnum
  metadata: [MetadataFilter!]
  kind: ProductTypeKindEnum
  ids: [ID!]
}

enum ProductTypeConfigurable {
  CONFIGURABLE
  SIMPLE
}

enum ProductTypeEnum {
  DIGITAL
  SHIPPABLE
}

input ProductTypeSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort product types by the selected field."""
  field: ProductTypeSortField!
}

enum ProductTypeSortField {
  """Sort products by name."""
  NAME

  """Sort products by type."""
  DIGITAL

  """Sort products by shipping."""
  SHIPPING_REQUIRED
}

input ProductVariantFilterInput {
  search: String
  sku: [String!]
  metadata: [MetadataFilter!]
  isPreorder: Boolean
  updatedAt: DateTimeRangeInput
}

input ProductVariantSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort productVariants by the selected field."""
  field: ProductVariantSortField!
}

enum ProductVariantSortField {
  """Sort products variants by last modified at."""
  LAST_MODIFIED_AT
}

type PaymentCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [PaymentCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type PaymentCountableEdge {
  """The item at the end of the edge."""
  node: Payment!

  """A cursor for use in pagination."""
  cursor: String!
}

input PaymentFilterInput {
  checkouts: [ID!]
}

type PageCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [PageCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type PageCountableEdge {
  """The item at the end of the edge."""
  node: Page!

  """A cursor for use in pagination."""
  cursor: String!
}

input PageSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort pages by the selected field."""
  field: PageSortField!
}

enum PageSortField {
  """Sort pages by title."""
  TITLE

  """Sort pages by slug."""
  SLUG

  """Sort pages by visibility."""
  VISIBILITY

  """Sort pages by creation date."""
  CREATION_DATE

  """
  Sort pages by publication date.
  
  DEPRECATED: this field will be removed in Saleor 4.0.
  """
  PUBLICATION_DATE

  """
  Sort pages by publication date.
  
  DEPRECATED: this field will be removed in Saleor 4.0.
  """
  PUBLISHED_AT
}

input PageFilterInput {
  search: String
  metadata: [MetadataFilter!]
  pageTypes: [ID!]
  ids: [ID!]
}

type PageTypeCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [PageTypeCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type PageTypeCountableEdge {
  """The item at the end of the edge."""
  node: PageType!

  """A cursor for use in pagination."""
  cursor: String!
}

input PageTypeSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort page types by the selected field."""
  field: PageTypeSortField!
}

enum PageTypeSortField {
  """Sort page types by name."""
  NAME

  """Sort page types by slug."""
  SLUG
}

input PageTypeFilterInput {
  search: String
}

type OrderEventCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [OrderEventCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type OrderEventCountableEdge {
  """The item at the end of the edge."""
  node: OrderEvent!

  """A cursor for use in pagination."""
  cursor: String!
}

input OrderSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort orders by the selected field."""
  field: OrderSortField!
}

enum OrderSortField {
  """Sort orders by number."""
  NUMBER

  """
  Sort orders by creation date. 
  
  DEPRECATED: this field will be removed in Saleor 4.0.
  """
  CREATION_DATE

  """
  Sort orders by creation date. 
  
  DEPRECATED: this field will be removed in Saleor 4.0.
  """
  CREATED_AT

  """Sort orders by last modified at."""
  LAST_MODIFIED_AT

  """Sort orders by customer."""
  CUSTOMER

  """Sort orders by payment."""
  PAYMENT

  """Sort orders by fulfillment status."""
  FULFILLMENT_STATUS
}

input OrderFilterInput {
  paymentStatus: [PaymentChargeStatusEnum!]
  status: [OrderStatusFilter!]
  customer: String
  created: DateRangeInput
  search: String
  metadata: [MetadataFilter!]
  channels: [ID!]
  updatedAt: DateTimeRangeInput
  isClickAndCollect: Boolean
  isPreorder: Boolean
  ids: [ID!]
  giftCardUsed: Boolean
  giftCardBought: Boolean
}

enum OrderStatusFilter {
  READY_TO_FULFILL
  READY_TO_CAPTURE
  UNFULFILLED
  UNCONFIRMED
  PARTIALLY_FULFILLED
  FULFILLED
  CANCELED
}

input OrderDraftFilterInput {
  customer: String
  created: DateRangeInput
  search: String
  metadata: [MetadataFilter!]
  channels: [ID!]
}

type MenuCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [MenuCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type MenuCountableEdge {
  """The item at the end of the edge."""
  node: Menu!

  """A cursor for use in pagination."""
  cursor: String!
}

input MenuSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort menus by the selected field."""
  field: MenuSortField!
}

enum MenuSortField {
  """Sort menus by name."""
  NAME

  """Sort menus by items count."""
  ITEMS_COUNT
}

input MenuFilterInput {
  search: String
  slug: [String!]
  metadata: [MetadataFilter!]
}

type MenuItemCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [MenuItemCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type MenuItemCountableEdge {
  """The item at the end of the edge."""
  node: MenuItem!

  """A cursor for use in pagination."""
  cursor: String!
}

input MenuItemSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort menu items by the selected field."""
  field: MenuItemsSortField!
}

enum MenuItemsSortField {
  """Sort menu items by name."""
  NAME
}

input MenuItemFilterInput {
  search: String
  metadata: [MetadataFilter!]
}

input GiftCardSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort gift cards by the selected field."""
  field: GiftCardSortField!
}

enum GiftCardSortField {
  """Sort orders by product."""
  PRODUCT

  """Sort orders by used by."""
  USED_BY

  """Sort orders by current balance."""
  CURRENT_BALANCE
}

input GiftCardFilterInput {
  isActive: Boolean
  metadata: [MetadataFilter!]
  tags: [String!]
  products: [ID!]
  usedBy: [ID!]
  used: Boolean
  currency: String
  currentBalance: PriceRangeInput
  initialBalance: PriceRangeInput
  code: String
}

type GiftCardTagCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [GiftCardTagCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type GiftCardTagCountableEdge {
  """The item at the end of the edge."""
  node: GiftCardTag!

  """A cursor for use in pagination."""
  cursor: String!
}

input GiftCardTagFilterInput {
  search: String
}

"""Plugin."""
type Plugin {
  """Identifier of the plugin."""
  id: ID!

  """Name of the plugin."""
  name: String!

  """Description of the plugin."""
  description: String!

  """Global configuration of the plugin (not channel-specific)."""
  globalConfiguration: PluginConfiguration

  """Channel-specific plugin configuration."""
  channelConfigurations: [PluginConfiguration!]!
}

"""Stores information about a configuration of plugin."""
type PluginConfiguration {
  """Determines if plugin is active or not."""
  active: Boolean!

  """The channel to which the plugin configuration is assigned to."""
  channel: Channel

  """Configuration of the plugin."""
  configuration: [ConfigurationItem!]
}

"""Stores information about a single configuration field."""
type ConfigurationItem {
  """Name of the field."""
  name: String!

  """Current value of the field."""
  value: String

  """Type of the field."""
  type: ConfigurationTypeFieldEnum

  """Help text for the field."""
  helpText: String

  """Label for the field."""
  label: String
}

"""An enumeration."""
enum ConfigurationTypeFieldEnum {
  STRING
  MULTILINE
  BOOLEAN
  SECRET
  PASSWORD
  SECRETMULTILINE
  OUTPUT
}

type PluginCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [PluginCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type PluginCountableEdge {
  """The item at the end of the edge."""
  node: Plugin!

  """A cursor for use in pagination."""
  cursor: String!
}

input PluginFilterInput {
  statusInChannels: PluginStatusInChannelsInput
  search: String
  type: PluginConfigurationType
}

input PluginStatusInChannelsInput {
  active: Boolean!
  channels: [ID!]!
}

enum PluginConfigurationType {
  PER_CHANNEL
  GLOBAL
}

input PluginSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort plugins by the selected field."""
  field: PluginSortField!
}

enum PluginSortField {
  NAME
  IS_ACTIVE
}

type SaleCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [SaleCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type SaleCountableEdge {
  """The item at the end of the edge."""
  node: Sale!

  """A cursor for use in pagination."""
  cursor: String!
}

input SaleFilterInput {
  status: [DiscountStatusEnum!]
  saleType: DiscountValueTypeEnum
  started: DateTimeRangeInput
  search: String
  metadata: [MetadataFilter!]
  updatedAt: DateTimeRangeInput
}

enum DiscountStatusEnum {
  ACTIVE
  EXPIRED
  SCHEDULED
}

input SaleSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """
  Specifies the channel in which to sort the data.
  
  DEPRECATED: this field will be removed in Saleor 4.0. Use root-level channel argument instead.
  """
  channel: String

  """Sort sales by the selected field."""
  field: SaleSortField!
}

enum SaleSortField {
  """Sort sales by name."""
  NAME

  """Sort sales by start date."""
  START_DATE

  """Sort sales by end date."""
  END_DATE

  """Sort sales by value."""
  VALUE

  """Sort sales by type."""
  TYPE

  """Sort sales by created at."""
  CREATED_AT

  """Sort sales by last modified at."""
  LAST_MODIFIED_AT
}

type VoucherCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [VoucherCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type VoucherCountableEdge {
  """The item at the end of the edge."""
  node: Voucher!

  """A cursor for use in pagination."""
  cursor: String!
}

input VoucherFilterInput {
  status: [DiscountStatusEnum!]
  timesUsed: IntRangeInput
  discountType: [VoucherDiscountType!]
  started: DateTimeRangeInput
  search: String
  metadata: [MetadataFilter!]
}

enum VoucherDiscountType {
  FIXED
  PERCENTAGE
  SHIPPING
}

input VoucherSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """
  Specifies the channel in which to sort the data.
  
  DEPRECATED: this field will be removed in Saleor 4.0. Use root-level channel argument instead.
  """
  channel: String

  """Sort vouchers by the selected field."""
  field: VoucherSortField!
}

enum VoucherSortField {
  """Sort vouchers by code."""
  CODE

  """Sort vouchers by start date."""
  START_DATE

  """Sort vouchers by end date."""
  END_DATE

  """Sort vouchers by value."""
  VALUE

  """Sort vouchers by type."""
  TYPE

  """Sort vouchers by usage limit."""
  USAGE_LIMIT

  """Sort vouchers by minimum spent amount."""
  MINIMUM_SPENT_AMOUNT
}

"""Represents a job data of exported file."""
type ExportFile implements Node & Job {
  id: ID!

  """Job status."""
  status: JobStatusEnum!

  """Created date time of job in ISO 8601 format."""
  createdAt: DateTime!

  """Date time of job last update in ISO 8601 format."""
  updatedAt: DateTime!

  """Job message."""
  message: String

  """The URL of field to download."""
  url: String

  """List of events associated with the export."""
  events: [ExportEvent!]
  user: User
  app: App
}

"""History log of export file."""
type ExportEvent implements Node {
  """The ID of the object."""
  id: ID!

  """Date when event happened at in ISO 8601 format."""
  date: DateTime!

  """Export event type."""
  type: ExportEventsEnum!

  """
  User who performed the action. Requires one of the following permissions: AuthorizationFilters.OWNER, AccountPermissions.MANAGE_STAFF.
  """
  user: User

  """
  App which performed the action. Requires one of the following permissions: AuthorizationFilters.OWNER, AppPermission.MANAGE_APPS.
  """
  app: App

  """Content of the event."""
  message: String!
}

"""An enumeration."""
enum ExportEventsEnum {
  EXPORT_PENDING
  EXPORT_SUCCESS
  EXPORT_FAILED
  EXPORT_DELETED
  EXPORTED_FILE_SENT
  EXPORT_FAILED_INFO_SENT
}

type ExportFileCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [ExportFileCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type ExportFileCountableEdge {
  """The item at the end of the edge."""
  node: ExportFile!

  """A cursor for use in pagination."""
  cursor: String!
}

input ExportFileFilterInput {
  createdAt: DateTimeRangeInput
  updatedAt: DateTimeRangeInput
  status: JobStatusEnum
  user: String
  app: String
}

input ExportFileSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort export file by the selected field."""
  field: ExportFileSortField!
}

enum ExportFileSortField {
  STATUS
  CREATED_AT
  UPDATED_AT
  LAST_MODIFIED_AT
}

type CheckoutCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [CheckoutCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type CheckoutCountableEdge {
  """The item at the end of the edge."""
  node: Checkout!

  """A cursor for use in pagination."""
  cursor: String!
}

input CheckoutSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort checkouts by the selected field."""
  field: CheckoutSortField!
}

enum CheckoutSortField {
  """Sort checkouts by creation date."""
  CREATION_DATE

  """Sort checkouts by customer."""
  CUSTOMER

  """Sort checkouts by payment."""
  PAYMENT
}

input CheckoutFilterInput {
  customer: String
  created: DateRangeInput
  search: String
  metadata: [MetadataFilter!]
  channels: [ID!]
}

type CheckoutLineCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [CheckoutLineCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type CheckoutLineCountableEdge {
  """The item at the end of the edge."""
  node: CheckoutLine!

  """A cursor for use in pagination."""
  cursor: String!
}

input AttributeSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort attributes by the selected field."""
  field: AttributeSortField!
}

enum AttributeSortField {
  """Sort attributes by name"""
  NAME

  """Sort attributes by slug"""
  SLUG

  """Sort attributes by the value required flag"""
  VALUE_REQUIRED

  """Sort attributes by the variant only flag"""
  IS_VARIANT_ONLY

  """Sort attributes by visibility in the storefront"""
  VISIBLE_IN_STOREFRONT

  """Sort attributes by the filterable in storefront flag"""
  FILTERABLE_IN_STOREFRONT

  """Sort attributes by the filterable in dashboard flag"""
  FILTERABLE_IN_DASHBOARD

  """Sort attributes by their position in storefront"""
  STOREFRONT_SEARCH_POSITION

  """
  Sort attributes based on whether they can be displayed or not in a product grid.
  """
  AVAILABLE_IN_GRID
}

"""Represents ongoing installation of app."""
type AppInstallation implements Node & Job {
  id: ID!

  """Job status."""
  status: JobStatusEnum!

  """Created date time of job in ISO 8601 format."""
  createdAt: DateTime!

  """Date time of job last update in ISO 8601 format."""
  updatedAt: DateTime!

  """Job message."""
  message: String
  appName: String!
  manifestUrl: String!
}

type AppCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [AppCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type AppCountableEdge {
  """The item at the end of the edge."""
  node: App!

  """A cursor for use in pagination."""
  cursor: String!
}

input AppFilterInput {
  search: String
  isActive: Boolean
  type: AppTypeEnum
}

input AppSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort apps by the selected field."""
  field: AppSortField!
}

enum AppSortField {
  """Sort apps by name."""
  NAME

  """Sort apps by creation date."""
  CREATION_DATE
}

type AppExtensionCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [AppExtensionCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type AppExtensionCountableEdge {
  """The item at the end of the edge."""
  node: AppExtension!

  """A cursor for use in pagination."""
  cursor: String!
}

input AppExtensionFilterInput {
  mount: [AppExtensionMountEnum!]
  target: AppExtensionTargetEnum
}

type AddressValidationData {
  countryCode: String!
  countryName: String!
  addressFormat: String!
  addressLatinFormat: String!
  allowedFields: [String!]!
  requiredFields: [String!]!
  upperFields: [String!]!
  countryAreaType: String!
  countryAreaChoices: [ChoiceValue!]!
  cityType: String!
  cityChoices: [ChoiceValue!]!
  cityAreaType: String!
  cityAreaChoices: [ChoiceValue!]!
  postalCodeType: String!
  postalCodeMatchers: [String!]!
  postalCodeExamples: [String!]!
  postalCodePrefix: String!
}

type ChoiceValue {
  raw: String
  verbose: String
}

input CustomerFilterInput {
  dateJoined: DateRangeInput
  numberOfOrders: IntRangeInput
  placedOrders: DateRangeInput
  search: String
  metadata: [MetadataFilter!]
  updatedAt: DateTimeRangeInput
}

input UserSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort users by the selected field."""
  field: UserSortField!
}

enum UserSortField {
  """Sort users by first name."""
  FIRST_NAME

  """Sort users by last name."""
  LAST_NAME

  """Sort users by email."""
  EMAIL

  """Sort users by order count."""
  ORDER_COUNT

  """Sort users by created at."""
  CREATED_AT

  """Sort users by last modified at."""
  LAST_MODIFIED_AT
}

type GroupCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [GroupCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type GroupCountableEdge {
  """The item at the end of the edge."""
  node: Group!

  """A cursor for use in pagination."""
  cursor: String!
}

input PermissionGroupFilterInput {
  search: String
  ids: [ID!]
}

input PermissionGroupSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort permission group by the selected field."""
  field: PermissionGroupSortField!
}

enum PermissionGroupSortField {
  """Sort permission group accounts by name."""
  NAME
}

input StaffUserInput {
  status: StaffMemberStatus
  search: String
  ids: [ID!]
}

enum StaffMemberStatus {
  """User account has been activated."""
  ACTIVE

  """User account has not been activated yet."""
  DEACTIVATED
}

type Mutation {
  """Export Customer Material Mapping template and return link to download"""
  exportCustomerMaterialTemplate: CustomerMaterialTemplateExport

  """
  Upload a file. This mutation must be sent as a `multipart` request. More detailed specs of the upload format can be found here: https://github.com/jaydenseric/graphql-multipart-request-spec Requires one of the following permissions: AUTHENTICATED_USER.
  """
  uploadCustomerMaterials(
    """Represents a file in a multipart request."""
    file: Upload!

    """User Input Fields required to Upload the file"""
    input: CustomerMaterialUploadInput!
  ): UploadCustomerMaterials

  """
  Download Customer Master Mappings based on search Requires one of the following permissions: AUTHENTICATED_USER.
  """
  downloadCustomerMaterialExcel(distributionChannelId: ID, saleOrganizationId: String, soldToCode: String): DownloadCustomerMaterialExcel

  """add products to order"""
  addOrderLine(id: ID, materialCode: String!, orderId: String!): AddOrderLine

  """delete order line"""
  deleteOrderLines(
    """id of order line to delete"""
    ids: [ID]!
  ): DeleteOrderLine

  """update order line otc ship_to"""
  updateOrderLineOtcShipTo(
    """ID of order_line to update."""
    lineId: ID!

    """information about One Time Customer Ship TO"""
    otcShipTo: CipOrderOtcPartnerInput!
  ): UpdateOrderLineOtcShipTo

  """delete order line otc ship_to"""
  deleteOrderLineOtcShipTo(
    """ID of order_line."""
    lineId: ID!
  ): DeleteOrderLineOtcShipTo

  """Cancel Delete Order Lines"""
  cancelDeleteCipOrderLines(orderLines: [CancelDeleteCipOrderLinesInput], soNo: String!): CancelDeleteCipOrderLines

  """Cancel All  Order Lines"""
  cancelCipOrder(orderLines: [CancelDeleteCipOrderLinesInput], soNo: String!): CancelCipOrder

  """Undo Cancel Delete Order Lines"""
  undoCancelCipOrderLines(itemNo: [String]!, soNo: String!): CipUndoOrderLines

  """update order"""
  cipChangeOrderAddNewOrderLine(
    """id of order"""
    input: CipChangeOrderEditInput!
  ): CipChangeOrderAddNewOrderLine

  """update order"""
  createCipOrder(
    """ID of a order to update."""
    id: ID!

    """CIP order input data"""
    input: CipOrderUpdateInput!
  ): CipOrderUpdate

  """update order"""
  updateCipOrder(
    """ID of a order to update."""
    id: ID!

    """CIP order input data"""
    input: CipOrderUpdateInput!
  ): CipOrderUpdate

  """update order"""
  saveCipOrder(
    """ID of a order to update."""
    id: ID!

    """CIP order input data"""
    input: CipOrderUpdateInput!
  ): CipOrderUpdate

  """update order"""
  cpUpdateCreateOrder(
    """CIP order input data"""
    input: CpOrderUpdateInput!
  ): CpOrderCreate

  """update order"""
  cipChangeOrderUpdate(
    """id of order"""
    input: CipChangeOrderEditInput!
  ): CipChangeOrderUpdate

  """Api for loading price details"""
  getPriceCalculation(
    """ID of the order."""
    id: ID!

    """item details"""
    input: PriceCalculationInput!
  ): OrderLinePriceCalculator

  """Download PDF from preview order page"""
  downloadOrdersPdf(
    """ID of a order to print."""
    soNo: ID!

    """sort type of a order to print."""
    sortType: String
  ): PrintOrderFromPreviewPage

  """Create CIP split order lines"""
  addCipSplitOrderLine(isBom: Boolean!, originLineItems: [SplitCipOrderLineInput!], soNo: String!, splitLineItems: [SplitCipOrderLineInput!]): AddCipSplitOrderLineItem

  """Create CIP split order lines after CP Planning"""
  addCipSplitOrderLineAfterCp(isBom: Boolean!, originLineItems: [SplitCipOrderLineInputAfterCp!], soNo: String!, splitLineItems: [SplitCipOrderLineInputAfterCp!]): AddCipSplitOrderLineAfterCp

  """
  Send Order Email Requires one of the following permissions: AUTHENTICATED_USER.
  """
  sendEmailFromChangeOrder(cc: String!, content: String!, soNo: String!, subject: String!, to: String!): SendEmailFromChangeOrder

  """Sync order data"""
  syncCipOrder(soNo: String!): CipSyncOrderData

  """duplicate order"""
  duplicateOrderCip(
    """ID of a order to duplicate."""
    soNo: ID!
  ): DuplicateOrderCip

  """Export Excel Upload template and return link to download"""
  exportExcelUploadTemplate: ExcelUploadTemplateExport

  """Mulesoft Api Log"""
  mulesoftApiLogCreate(
    """Fields required to create mulesoft log."""
    input: MulesoftAPILogCreateInput!
  ): MulesoftAPILogCreate

  """atp ctp request mutation"""
  exportOrderAtpCtpRequest(
    """List of order line."""
    orderLines: [ExportATPCTPRequestOrderLineInput]!
  ): ExportChangeOrderATPCTPRequestMutation

  """atp ctp confirm mutation"""
  exportOrderAtpCtpConfirm(input: ExportATPCTPConfirmInputType!): ExportChangeOrderATPCTPConfirmMutation

  """atp ctp request mutation"""
  checkoutAtpCtpRequest(
    """List of order line."""
    orderLines: [CheckoutATPCTPRequestOrderLineInput]!
  ): CheckoutChangeOrderATPCTPRequestMutation

  """atp ctp confirm mutation"""
  checkoutAtpCtpConfirm(input: CheckoutATPCTPConfirmInputType!): CheckoutChangeOrderATPCTPConfirmMutation

  """atp ctp request mutation"""
  atpCtpRequest(
    """List of order line id."""
    orderLines: [ATPCTPRequestOrderLineInput]!
  ): RequireAttentionATPCTPRequestMutation

  """atp ctp request mutation"""
  changeOrderAtpCtpRequest(
    """List of order line."""
    orderLines: [ChangeOrderATPCTPRequestOrderLineInput]!
  ): ChangeOrderATPCTPRequestMutation

  """atp ctp confirm mutation"""
  atpCtpConfirm(input: ATPCTPConfirmInputType!): ATPCTPConfirmMutation

  """Call to api realtime partner"""
  getSapRealtimePartner(
    distributionChannel: String
    division: String

    """order type"""
    orderType: OrderType

    """contract no of order"""
    piMessageId: String!

    """sale organization code"""
    saleOrgCode: String!

    """sold to code"""
    soldToCode: String!

    """type of realtime partner"""
    type: [RealtimePartnerType]!
  ): CallAPISapRealtimePartner

  """Create PoUploadCustomerSettings"""
  poUploadCustomerSettingsCreate(soldToId: ID = "SoldTo id want to create"): PoUploadCustomerSettingsCreate

  """Create PoUploadCustomerSettings"""
  poUploadCustomerSettingsUpdate(
    """Sold to id want to update"""
    soldToId: ID

    """True or False"""
    useCustomerMaster: Boolean
  ): PoUploadCustomerSettingsUpdate

  """Create PoUploadCustomerSettings"""
  poUploadCustomerSettingsDelete(
    """SoldTo id want to delete"""
    soldToId: ID
  ): PoUploadCustomerSettingsDelete

  """Update dosmetic order line"""
  calculateDtpDtr: CalculateDtpDtr

  """Post to SAP"""
  postToSap: PostToSap

  """Scgp PO Upload Send Mail"""
  scgpPoUploadSendMail(
    """Email of user"""
    email: String!
  ): ScgpPoUploadSendMail

  """
  Upload PO file. This mutation must be sent as a `multipart` request. More detailed specs of the upload format can be found here: https://github.com/jaydenseric/graphql-multipart-request-spec Requires one of the following permissions: AUTHENTICATED_USER.
  """
  uploadPo(
    """Represents a file in a multipart request."""
    file: Upload!
    soldToCode: String
  ): PoUploadFileMutation

  """
  Upload Excel file. This mutation must be sent as a `multipart` request. More detailed specs of the upload format can be found here: https://github.com/jaydenseric/graphql-multipart-request-spec Requires one of the following permissions: AUTHENTICATED_USER.
  """
  uploadExcel(
    distributionChannel: String
    division: String

    """Represents a file in a multipart request."""
    file: Upload!
    orderType: String
    saleOrg: String
    uploadType: UploadType
  ): ExcelUploadFileMutation

  """
  Retry upload file Requires one of the following permissions: AUTHENTICATED_USER.
  """
  retryUpload(
    """Id of PO log file"""
    id: ID!
  ): PoUploadRetryUploadFile

  """Check if the given excel file is not uploaded in last 30 days"""
  validExcelFile(
    """file name"""
    fileName: String!
  ): CheckExcelFileNameInvalid

  """
  Upload a file. This mutation must be sent as a `multipart` request. More detailed specs of the upload format can be found here: https://github.com/jaydenseric/graphql-multipart-request-spec Requires one of the following permissions: AUTHENTICATED_USER.
  """
  uploadAlternativeMaterials(
    """Represents a file in a multipart request."""
    file: Upload!
  ): UploadAlternativeMaterials

  """Delete alternate material."""
  deleteAlternativeMaterialOs(
    """ID of alternate material os to delete"""
    alternativeMaterialOsId: ID!
  ): AlternativeMaterialOsDelete

  """
  Add alternative material Requires one of the following permissions: AUTHENTICATED_USER.
  """
  addAlternativeMaterial(
    """Fields required to add alternative material."""
    input: AlternativeMaterialAddInput!
  ): AlternativeMaterialAdd

  """
  Edit alternative material Requires one of the following permissions: AUTHENTICATED_USER.
  """
  editAlternativeMaterial(
    """ID of a alternative material to edit."""
    id: ID!

    """Fields required to edit alternative material."""
    input: AlternativeMaterialEditInput!
  ): AlternativeMaterialEdit

  """export alternated materials and return link to download"""
  exportAlternativeMaterial: AlternativeMaterialExport

  """export alternated material log and return link to download"""
  exportLogChange: AlternativeMaterialLogExport

  """delete order line"""
  deleteRequireAttentionItems(
    """IDs of order line to delete."""
    orderLineIds: [String]
    reason: ReasonForRejectInput!
  ): RequireAttentionItemsDelete

  """Update require attention items parameter"""
  updateRequireAttentionItemsParameter(
    """Fields required to update require attention items"""
    input: RequireAttentionItemParameterUpdateInput

    """ID of OrderLine to update"""
    itemsId: String!
  ): RequireAttentionItemsUpdateParameter

  """delete order line"""
  acceptConfirmDate(
    """Field required to accept confirm date"""
    input: AcceptConfirmDateInput!
  ): AcceptConfirmDate

  """delete order line"""
  changeParameterIPlan(orderLineId: ID!): ChangeParameterIPlan

  """delete order line"""
  passParameterToIPlan(inquiryMethodCode: String!, orderLineId: ID!): PassParameterToIPlan

  """edit require attention items"""
  editRequireAttentionItems(
    """Field required to edit items"""
    input: EditRequireAttentionInput!
  ): EditRequireAttentionItems

  """accept confirm date items"""
  acceptConfirmDateRequireAttentionItems(
    """Field required to accept confirm date"""
    input: AcceptConfirmDateRequireAttentionInput!
  ): AcceptConfirmDateRequireAttentionItems

  """Scgp User Register"""
  scgpUserRegister(
    """Fields required to register new user."""
    input: ScgpUserRegisterInput!
  ): ScgpUserRegister

  """Scgp User Update"""
  scgpUserUpdate(
    """ID of an user to update."""
    id: ID!

    """Fields required to update new user."""
    input: ScgpUserUpdateInput!
  ): ScgpUserUpdate

  """Change Scgp User Status"""
  changeScgpUserStatus(
    """ID of user to change status"""
    id: ID!

    """status want to change"""
    status: Boolean!
  ): ChangeScgpUserStatus

  """Scgp User Send Mail Reset Password"""
  scgpUserSendMailResetPassword(
    """Email of user"""
    email: String!
  ): ScgpUserSendMailResetPassword

  """Scgp User Check Valid Token Reset Password"""
  scgpUserCheckValidTokenResetPassword(
    """Email of reset password"""
    email: String!

    """Token of reset password"""
    token: String!
  ): ScgpUserCheckValidTokenResetPassword

  """Scgp User Confirm Reset Password"""
  scgpUserConfirmResetPassword(
    """Confirm Password of user"""
    confirmPassword: String!

    """Email of user"""
    email: String!

    """New Password of user"""
    newPassword: String!

    """token of user"""
    token: String!
  ): ScgpUserConfirmResetPassword

  """Create JWT token."""
  scgpUserLogin(
    """Email or username of a user."""
    email: String!

    """Password of a user."""
    password: String!
  ): ScgpUserLogin

  """Create JWT token."""
  scgpUserFirstLoginUpdate(
    """Confirm password."""
    confirmPassword: String

    """New email for current user."""
    email: String

    """New password for current user."""
    password: String

    """Token of a user."""
    tempToken: String!

    """Username to update."""
    username: String!
  ): ScgpUserFirstLoginUpdate

  """Mapping scgp user data"""
  scgpUserMappingData(
    """Represents a file in a multipart request."""
    file: Upload!
  ): ScgpUserMappingData

  """Delete User Requires one of the following permissions: MANAGE_STAFF."""
  scgpDeleteUser(
    """User ID to delete."""
    userId: ID!
  ): ScgpDeleteUser

  """Update cart."""
  updateExportCart(
    """ID of a export cart to update."""
    id: ID!

    """Fields required to update cart."""
    input: ExportCartUpdateInput!
  ): ExportCartUpdate

  """Create cart."""
  createExportCart(
    """Fields required to create export cart."""
    input: ExportCartCreateInput!
  ): ExportCartCreate

  """Delete customer cart items."""
  deleteExportCartItems(
    """ID of cart times to delete"""
    cartItemIds: [ID]!
  ): ExportCartItemsDelete

  """Update draft cart."""
  updateDraftExportCart(
    """ID of a export cart to update."""
    cartId: ID!

    """Fields required to update cart."""
    input: ExportCartDraftUpdateInput!
  ): ExportCartDraftUpdate

  """
  Update export order Requires one of the following permissions: AUTHENTICATED_USER.
  """
  updateExportOrder(
    """ID of an order to update."""
    id: ID!

    """Fields required to update order"""
    input: ExportOrderUpdateInput!
  ): ExportOrderUpdate

  """
  Update export order line Requires one of the following permissions: AUTHENTICATED_USER.
  """
  updateExportOrderLines(
    """Fields required to update order line"""
    input: [ExportOrderLineUpdateInput!]!
    orderId: ID!
  ): ExportOrderLineUpdate

  """
  Update export order Requires one of the following permissions: AUTHENTICATED_USER.
  """
  updateAllExportOrderLine(
    """ID of an order to update."""
    id: ID!

    """Fields required to update order line"""
    input: ExportOrderLineUpdateAllInput!
  ): ExportOrderLineUpdateAll

  """
  Create export order Requires one of the following permissions: AUTHENTICATED_USER.
  """
  createExportOrder(
    """Fields required to update order"""
    input: ExportOrderCreateInput!
  ): ExportOrderCreate

  """
  delete order line Requires one of the following permissions: AUTHENTICATED_USER.
  """
  deleteExportOrderLines(
    deleteAll: Boolean

    """IDs of order line to delete."""
    ids: [ID]
    orderId: ID
  ): ExportOrderLinesDelete

  """
  add product to order Requires one of the following permissions: AUTHENTICATED_USER.
  """
  addProductsToExportOrder(
    """ID of an order to update."""
    id: ID!
    input: [ExportOrderLineAddProductInput!]!
  ): ExportOrderAddProducts

  """
  add product to order Requires one of the following permissions: AUTHENTICATED_USER.
  """
  addProductsToChangeExportOrder(
    """ID of an order to update."""
    id: ID!
    input: [ChangeExportOrderLineAddProductInput!]!
  ): ChangeExportOrderAddProducts

  """receive EO data"""
  receiveEoData(header: HeaderInput, initial: InitialInput, items: [ItemInput]): ReceiveEoData

  """duplicate order"""
  duplicateOrder(
    """ID of a order to duplicate."""
    id: ID!
  ): DuplicateOrder

  """call api sap route"""
  callApiSapRoute(
    """max record of route"""
    maxRecords: Int!

    """contract code of route"""
    piMessageId: String!

    """route of search input"""
    route: String!

    """description of route"""
    routeDescription: String!
  ): CallAPISapRoute

  """Cancel order"""
  cancelExportOrder(
    """ID of a order to Cancel."""
    id: ID!
  ): CancelExportOrder

  """
  Download PDF order Requires one of the following permissions: AUTHENTICATED_USER.
  """
  downloadPdfOrder(orderId: ID, soNo: String, sortType: String): DownloadPDFOrder

  """Make a copy of an order"""
  copyOrder(orderId: ID): CopyOrder

  """change parameter of export"""
  changeParameterOfExport(orderLineId: ID!): ChangeParameterOfExport

  """Update inquiry method of export"""
  updateInquiryMethodExport(
    """Fields required to update order line"""
    input: UpdateInquiryMethodExportInput!
    orderLineId: ID!
  ): UpdateInquiryMethodExport

  """
  Update order line Requires one of the following permissions: AUTHENTICATED_USER.
  """
  updateExportOrderLinesDraft(
    """Fields required to update order line"""
    input: ExportOrderUpdateDraftInput!
  ): ExportOrderLineUpdateDraft

  """
  add product to order Requires one of the following permissions: AUTHENTICATED_USER.
  """
  exportChangeOrderAddProductToOrder(
    """ID of an order to update."""
    id: ID!
    input: [ChangeExportOrderLineAddProductInput!]!
  ): ExportAddProductToOrder

  """Edit export order"""
  editOrderExport(input: EditExportOrderInput!): EditExportOrderMutation

  """cancel/delete order line"""
  cancelDeleteExportOrder(
    """List of order line to cancel/delete"""
    itemNos: [String]
    reason: ExportOrderReasonForRejectInput!
    soNo: String
  ): CancelDeleteExportOrder

  """Undo Order Lines Export"""
  undoOrderLinesExport(itemNo: [String]!, soNo: String!): UndoOrderLinesExport

  """Export add new order line"""
  exportChangeOrderAddNewOrderLines(
    """ID of an order to update."""
    id: ID!
    input: ExportAddNewOrderLineInput!
  ): ExportChangeOrderAddNewOrderLine

  """
  Delete an order line. Requires one of the following permissions: AUTHENTICATED_USER.
  """
  deleteExportOrderLineDraft(
    """ID of the order line to delete."""
    id: ID!
  ): DeleteExportOrderLineDraft

  """Delete customer cart items."""
  deleteCustomerCartItems(
    """ID of cart times to delete"""
    cartItemIds: [ID]!
  ): CartItemsDelete

  """Create a new cart."""
  createCustomerCart(
    """Fields required to create cart."""
    input: CustomerCartCreateInput!
  ): CustomerCartCreate

  """Update cart."""
  updateCustomerCart(
    """ID of a cart to update."""
    id: ID!

    """Fields required to update cart."""
    input: CustomerCartUpdateInput!
  ): CustomerCartUpdate

  """Update cart lines quantity."""
  updateCustomerCartLines(
    """ID of a cart to update."""
    id: ID!

    """Fields required to update cart."""
    input: CustomerCartLinesUpdateQuantityInput
  ): CustomerCartLinesUpdateQuantity

  """
  Update customer order Requires one of the following permissions: AUTHENTICATED_USER.
  """
  updateCustomerOrder(
    """ID of an order to update."""
    id: ID!
    input: CustomerOrderInformationUpdateInput!
  ): CustomerOrderUpdate

  """
  create a new order Requires one of the following permissions: AUTHENTICATED_USER.
  """
  createCustomerOrder(
    """Fields required to create customer order"""
    input: CreateCustomerOrderInput!
  ): CreateCustomerOrder

  """
  Update customer order lines Requires one of the following permissions: AUTHENTICATED_USER.
  """
  updateCustomerOrderLines(
    input: CustomerOrderLinesUpdateInput

    """ID of an order to update."""
    orderId: ID!
  ): CustomerOrderLinesUpdate

  """
  delete order line Requires one of the following permissions: AUTHENTICATED_USER.
  """
  deleteCustomerOrderLines(
    deleteAll: Boolean

    """IDs of order line to delete."""
    ids: [ID]
    orderId: ID
  ): CustomerOrderLinesDelete

  """
  add product to order Requires one of the following permissions: AUTHENTICATED_USER.
  """
  addProductToCustomerOrder(
    """ID of an order to update."""
    id: ID!
    input: [CustomerOrderLineInput!]!
  ): CustomerOrderAddProduct

  """
  Update customer order Requires one of the following permissions: AUTHENTICATED_USER.
  """
  updateRequestDateOnIplan(
    """confirm or not"""
    confirm: Boolean = true

    """order line id of order line"""
    orderLinesId: [ID]!
  ): UpdateRequestDateOnIplan

  """create a new order"""
  createContractOrder(
    """Fields required to create order"""
    input: ContractOrderCreateInput!
  ): ContractOrderCreate

  """update order"""
  updateContractOrder(
    """ID of a order to update."""
    id: ID!

    """id of order"""
    input: ContractOrderUpdateInput!
  ): ContractOrderUpdate

  """delete order"""
  deleteContractOrder(
    """ID of order to delete."""
    id: ID!
  ): ContractOrderDelete

  """delete order line"""
  deleteContractOrderLine(
    """ID of a order line to delete."""
    id: ID!
  ): ContractOrderLineDelete

  """delete order line"""
  deleteContractOrderLines(
    """IDs of a order line to delete."""
    ids: [ID]!
  ): ContractOrderLinesDelete

  """update order"""
  updateOrderLines(
    """ID of a order to update."""
    id: ID!

    """id of order"""
    input: ContractOrderLinesUpdateInput!
  ): ContractOrderLinesUpdate

  """update all order line"""
  updateAllContractOrderLine(
    """ID of a order to update."""
    id: ID!
    plant: String
    requestDate: Date
  ): ContractOrderLineALlUpdate

  """cancel order line"""
  cancelRevertContractOrderLine(id: [ID], status: OrderLineStatus): CancelRevertContractOrderLine

  """update order line"""
  updateContractOrderLine(confirmedDate: Date, id: Int!, plant: String, quantity: Float): UpdateContractOrderLine

  """update order line"""
  updateAtpCtpContractOrderLine(input: [UpdateAtpCtpContractOrderLineInput]): UpdateAtpCtpContractOrderLine

  """finish_order"""
  finishOrder(
    """Id of an order."""
    orderId: ID!
  ): FinishOrder

  """add products to order"""
  addProductsToDomesticOrder(
    """ID of an order to update."""
    id: ID!
    input: [DomesticOrderLineAddProductInput!]!
  ): AddProductsToDomesticOrder

  """add products to order"""
  domesticChangeOrderAddProductToOrder(
    """ID of an order to update."""
    id: ID!
    input: [AddProductToOrderInput!]!
  ): DomesticAddProductToOrder

  """Create a new split item for order line"""
  addSplitOrderLineItem(originLineItem: AddSplitOrderLineItemInput, soNo: String, splitLineItems: [AddSplitOrderLineItemInput!]): AddSplitOrderLineItem

  """Delete a split item from an order line"""
  deleteSplitOrderLineItem(id: ID): DeleteSplitOrderLineItem

  """Download PDF order"""
  printChangeOrder(
    """ID of a order to print."""
    orderId: ID!

    """sort type of a order to print."""
    sortType: String!
  ): PrintOrder

  """
  Download PDF order Requires one of the following permissions: AUTHENTICATED_USER.
  """
  printPdfOrderConfirmation(listOrderConfirmationSap: SendEmailOrderInput): PrintPDFOrderConfirmation

  """Check remaining quantity of item in contract"""
  checkRemainingItemQuantity(contractCode: String!, itemNo: String!): CheckRemainingItemQuantity

  """
  Send Order Email Requires one of the following permissions: AUTHENTICATED_USER.
  """
  sendOrderEmail(cc: String!, content: String!, listOrderConfirmationSap: [SendEmailOrderInput], subject: String!, to: String!): SendOrderEmail

  """
  Download PDF order Requires one of the following permissions: AUTHENTICATED_USER.
  """
  printPendingOrderReport(input: SAPPendingOrderReportInput): PrintPendingOrderReport

  """
  Send Email Pending Order Requires one of the following permissions: AUTHENTICATED_USER.
  """
  sendEmailPendingOrder(emailContent: String!, input: SAPPendingOrderReportInput!, listCc: String!, listTo: String!, soldToCode: String!, subject: String!): SendEmailPendingOrder

  """Download Excel pending order"""
  downloadPendingOrderReport(input: SAPPendingOrderReportInput): DownloadPendingOrderReportExcel

  """Cancel Delete Order Lines"""
  cancelDeleteOrderLines(orderLines: [CancelDeleteOrderLinesInput], soNo: String!): CancelDeleteOrderLines

  """update order"""
  changeOrderUpdate(
    """id of order"""
    input: ChangeOrderEditInput!

    """Order SoNo update"""
    soNo: ID!
  ): ChangeOrderUpdate

  """Add new order line"""
  changeOrderAddNewOrderLine(input: ChangeOrderAddNewOrderLineInput!): ChangeOrderAddNewOrderLine

  """Cancel Delete Order Lines"""
  undoOrderLines(itemNo: [String]!, soNo: String!): UndoOrderLines

  """Create a new checkout."""
  createContractCheckout(
    """Fields required to create checkout."""
    input: ContractCheckoutCreateInput!
  ): ContractCheckoutCreate

  """Create a new checkout."""
  updateContractCheckout(
    """ID of a warehouse to update."""
    id: ID!

    """Fields required to create checkout."""
    input: ContractCheckoutUpdateInput!
  ): ContractCheckoutUpdate

  """Delete checkout lines."""
  deleteContractCheckoutLines(
    """ID of checkout lines to delete"""
    checkoutLineIds: [ID]!
  ): ContractCheckoutLinesDeleteDelete

  """Delete checkout lines."""
  deleteNewlyAddedOrderLine(
    """List item no order line"""
    listItemNo: [String]
    soNo: String
  ): DeleteNewlyAddedOrderLineDelete

  """Delete checkout lines."""
  deleteAndSyncOrderLine(soNo: String): DeleteAndSyncOrderLine

  """Recheck if Contract Expired/Complete/Invalid"""
  checkContractExpiredCompleteInvalid(
    """Code of contract"""
    contractNo: String!
  ): CheckContractExpiredCompleteInvalid

  """generate token from cognito"""
  generateToken(
    """JWT token to validate."""
    idToken: String!
  ): GenerateTokenFromCognito

  """
  Creates a new webhook subscription. Requires one of the following permissions: MANAGE_APPS, AUTHENTICATED_APP.
  """
  webhookCreate(
    """Fields required to create a webhook."""
    input: WebhookCreateInput!
  ): WebhookCreate

  """
  Deletes a webhook subscription. Requires one of the following permissions: MANAGE_APPS, AUTHENTICATED_APP.
  """
  webhookDelete(
    """ID of a webhook to delete."""
    id: ID!
  ): WebhookDelete

  """
  Updates a webhook subscription. Requires one of the following permissions: MANAGE_APPS.
  """
  webhookUpdate(
    """ID of a webhook to update."""
    id: ID!

    """Fields required to update a webhook."""
    input: WebhookUpdateInput!
  ): WebhookUpdate

  """
  Retries event delivery. Requires one of the following permissions: MANAGE_APPS.
  """
  eventDeliveryRetry(
    """ID of the event delivery to retry."""
    id: ID!
  ): EventDeliveryRetry

  """
  Creates new warehouse. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  createWarehouse(
    """Fields required to create warehouse."""
    input: WarehouseCreateInput!
  ): WarehouseCreate

  """
  Updates given warehouse. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  updateWarehouse(
    """ID of a warehouse to update."""
    id: ID!

    """Fields required to update warehouse."""
    input: WarehouseUpdateInput!
  ): WarehouseUpdate

  """
  Deletes selected warehouse. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  deleteWarehouse(
    """ID of a warehouse to delete."""
    id: ID!
  ): WarehouseDelete

  """
  Add shipping zone to given warehouse. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  assignWarehouseShippingZone(
    """ID of a warehouse to update."""
    id: ID!

    """List of shipping zone IDs."""
    shippingZoneIds: [ID!]!
  ): WarehouseShippingZoneAssign

  """
  Remove shipping zone from given warehouse. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  unassignWarehouseShippingZone(
    """ID of a warehouse to update."""
    id: ID!

    """List of shipping zone IDs."""
    shippingZoneIds: [ID!]!
  ): WarehouseShippingZoneUnassign

  """
  Creates a new staff notification recipient. Requires one of the following permissions: MANAGE_SETTINGS.
  """
  staffNotificationRecipientCreate(
    """Fields required to create a staff notification recipient."""
    input: StaffNotificationRecipientInput!
  ): StaffNotificationRecipientCreate

  """
  Updates a staff notification recipient. Requires one of the following permissions: MANAGE_SETTINGS.
  """
  staffNotificationRecipientUpdate(
    """ID of a staff notification recipient to update."""
    id: ID!

    """Fields required to update a staff notification recipient."""
    input: StaffNotificationRecipientInput!
  ): StaffNotificationRecipientUpdate

  """
  Delete staff notification recipient. Requires one of the following permissions: MANAGE_SETTINGS.
  """
  staffNotificationRecipientDelete(
    """ID of a staff notification recipient to delete."""
    id: ID!
  ): StaffNotificationRecipientDelete

  """
  Updates site domain of the shop. Requires one of the following permissions: MANAGE_SETTINGS.
  """
  shopDomainUpdate(
    """Fields required to update site."""
    input: SiteDomainInput
  ): ShopDomainUpdate

  """
  Updates shop settings. Requires one of the following permissions: MANAGE_SETTINGS.
  """
  shopSettingsUpdate(
    """Fields required to update shop settings."""
    input: ShopSettingsInput!
  ): ShopSettingsUpdate

  """
  Fetch tax rates. Requires one of the following permissions: MANAGE_SETTINGS.
  """
  shopFetchTaxRates: ShopFetchTaxRates

  """
  Creates/updates translations for shop settings. Requires one of the following permissions: MANAGE_TRANSLATIONS.
  """
  shopSettingsTranslate(
    """Fields required to update shop settings translations."""
    input: ShopSettingsTranslationInput!

    """Translation language code."""
    languageCode: LanguageCodeEnum!
  ): ShopSettingsTranslate

  """
  Update the shop's address. If the `null` value is passed, the currently selected address will be deleted. Requires one of the following permissions: MANAGE_SETTINGS.
  """
  shopAddressUpdate(
    """Fields required to update shop address."""
    input: AddressInput
  ): ShopAddressUpdate

  """
  Update shop order settings. Requires one of the following permissions: MANAGE_ORDERS.
  """
  orderSettingsUpdate(
    """Fields required to update shop order settings."""
    input: OrderSettingsUpdateInput!
  ): OrderSettingsUpdate

  """
  Update gift card settings. Requires one of the following permissions: MANAGE_GIFT_CARD.
  """
  giftCardSettingsUpdate(
    """Fields required to update gift card settings."""
    input: GiftCardSettingsUpdateInput!
  ): GiftCardSettingsUpdate

  """
  Manage shipping method's availability in channels. Requires one of the following permissions: MANAGE_SHIPPING.
  """
  shippingMethodChannelListingUpdate(
    """ID of a shipping method to update."""
    id: ID!

    """Fields required to update shipping method channel listings."""
    input: ShippingMethodChannelListingInput!
  ): ShippingMethodChannelListingUpdate

  """
  Creates a new shipping price. Requires one of the following permissions: MANAGE_SHIPPING.
  """
  shippingPriceCreate(
    """Fields required to create a shipping price."""
    input: ShippingPriceInput!
  ): ShippingPriceCreate

  """
  Deletes a shipping price. Requires one of the following permissions: MANAGE_SHIPPING.
  """
  shippingPriceDelete(
    """ID of a shipping price to delete."""
    id: ID!
  ): ShippingPriceDelete

  """
  Deletes shipping prices. Requires one of the following permissions: MANAGE_SHIPPING.
  """
  shippingPriceBulkDelete(
    """List of shipping price IDs to delete."""
    ids: [ID!]!
  ): ShippingPriceBulkDelete

  """
  Updates a new shipping price. Requires one of the following permissions: MANAGE_SHIPPING.
  """
  shippingPriceUpdate(
    """ID of a shipping price to update."""
    id: ID!

    """Fields required to update a shipping price."""
    input: ShippingPriceInput!
  ): ShippingPriceUpdate

  """
  Creates/updates translations for a shipping method. Requires one of the following permissions: MANAGE_TRANSLATIONS.
  """
  shippingPriceTranslate(
    """ShippingMethodType ID or ShippingMethodTranslatableContent ID."""
    id: ID!
    input: ShippingPriceTranslationInput!

    """Translation language code."""
    languageCode: LanguageCodeEnum!
  ): ShippingPriceTranslate

  """
  Exclude products from shipping price. Requires one of the following permissions: MANAGE_SHIPPING.
  """
  shippingPriceExcludeProducts(
    """ID of a shipping price."""
    id: ID!

    """Exclude products input."""
    input: ShippingPriceExcludeProductsInput!
  ): ShippingPriceExcludeProducts

  """
  Remove product from excluded list for shipping price. Requires one of the following permissions: MANAGE_SHIPPING.
  """
  shippingPriceRemoveProductFromExclude(
    """ID of a shipping price."""
    id: ID!

    """List of products which will be removed from excluded list."""
    products: [ID!]!
  ): ShippingPriceRemoveProductFromExclude

  """
  Creates a new shipping zone. Requires one of the following permissions: MANAGE_SHIPPING.
  """
  shippingZoneCreate(
    """Fields required to create a shipping zone."""
    input: ShippingZoneCreateInput!
  ): ShippingZoneCreate

  """
  Deletes a shipping zone. Requires one of the following permissions: MANAGE_SHIPPING.
  """
  shippingZoneDelete(
    """ID of a shipping zone to delete."""
    id: ID!
  ): ShippingZoneDelete

  """
  Deletes shipping zones. Requires one of the following permissions: MANAGE_SHIPPING.
  """
  shippingZoneBulkDelete(
    """List of shipping zone IDs to delete."""
    ids: [ID!]!
  ): ShippingZoneBulkDelete

  """
  Updates a new shipping zone. Requires one of the following permissions: MANAGE_SHIPPING.
  """
  shippingZoneUpdate(
    """ID of a shipping zone to update."""
    id: ID!

    """Fields required to update a shipping zone."""
    input: ShippingZoneUpdateInput!
  ): ShippingZoneUpdate

  """
  Assign attributes to a given product type. Requires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
  """
  productAttributeAssign(
    """The operations to perform."""
    operations: [ProductAttributeAssignInput!]!

    """ID of the product type to assign the attributes into."""
    productTypeId: ID!
  ): ProductAttributeAssign

  """
  Added in Saleor 3.1. Update attributes assigned to product variant for given product type. Requires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
  """
  productAttributeAssignmentUpdate(
    """The operations to perform."""
    operations: [ProductAttributeAssignmentUpdateInput!]!

    """ID of the product type to assign the attributes into."""
    productTypeId: ID!
  ): ProductAttributeAssignmentUpdate

  """
  Un-assign attributes from a given product type. Requires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
  """
  productAttributeUnassign(
    """The IDs of the attributes to unassign."""
    attributeIds: [ID!]!

    """ID of the product type from which the attributes should be unassigned."""
    productTypeId: ID!
  ): ProductAttributeUnassign

  """
  Creates a new category. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  categoryCreate(
    """Fields required to create a category."""
    input: CategoryInput!

    """
    ID of the parent category. If empty, category will be top level category.
    """
    parent: ID
  ): CategoryCreate

  """
  Deletes a category. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  categoryDelete(
    """ID of a category to delete."""
    id: ID!
  ): CategoryDelete

  """
  Deletes categories. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  categoryBulkDelete(
    """List of category IDs to delete."""
    ids: [ID!]!
  ): CategoryBulkDelete

  """
  Updates a category. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  categoryUpdate(
    """ID of a category to update."""
    id: ID!

    """Fields required to update a category."""
    input: CategoryInput!
  ): CategoryUpdate

  """
  Creates/updates translations for a category. Requires one of the following permissions: MANAGE_TRANSLATIONS.
  """
  categoryTranslate(
    """Category ID or CategoryTranslatableContent ID."""
    id: ID!
    input: TranslationInput!

    """Translation language code."""
    languageCode: LanguageCodeEnum!
  ): CategoryTranslate

  """
  Adds products to a collection. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  collectionAddProducts(
    """ID of a collection."""
    collectionId: ID!

    """List of product IDs."""
    products: [ID!]!
  ): CollectionAddProducts

  """
  Creates a new collection. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  collectionCreate(
    """Fields required to create a collection."""
    input: CollectionCreateInput!
  ): CollectionCreate

  """
  Deletes a collection. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  collectionDelete(
    """ID of a collection to delete."""
    id: ID!
  ): CollectionDelete

  """
  Reorder the products of a collection. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  collectionReorderProducts(
    """ID of a collection."""
    collectionId: ID!

    """The collection products position operations."""
    moves: [MoveProductInput!]!
  ): CollectionReorderProducts

  """
  Deletes collections. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  collectionBulkDelete(
    """List of collection IDs to delete."""
    ids: [ID!]!
  ): CollectionBulkDelete

  """
  Remove products from a collection. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  collectionRemoveProducts(
    """ID of a collection."""
    collectionId: ID!

    """List of product IDs."""
    products: [ID!]!
  ): CollectionRemoveProducts

  """
  Updates a collection. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  collectionUpdate(
    """ID of a collection to update."""
    id: ID!

    """Fields required to update a collection."""
    input: CollectionInput!
  ): CollectionUpdate

  """
  Creates/updates translations for a collection. Requires one of the following permissions: MANAGE_TRANSLATIONS.
  """
  collectionTranslate(
    """Collection ID or CollectionTranslatableContent ID."""
    id: ID!
    input: TranslationInput!

    """Translation language code."""
    languageCode: LanguageCodeEnum!
  ): CollectionTranslate

  """
  Manage collection's availability in channels. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  collectionChannelListingUpdate(
    """ID of a collection to update."""
    id: ID!

    """Fields required to create or update collection channel listings."""
    input: CollectionChannelListingUpdateInput!
  ): CollectionChannelListingUpdate

  """
  Creates a new product. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  productCreate(
    """Fields required to create a product."""
    input: ProductCreateInput!
  ): ProductCreate

  """
  Deletes a product. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  productDelete(
    """ID of a product to delete."""
    id: ID!
  ): ProductDelete

  """
  Deletes products. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  productBulkDelete(
    """List of product IDs to delete."""
    ids: [ID!]!
  ): ProductBulkDelete

  """
  Updates an existing product. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  productUpdate(
    """ID of a product to update."""
    id: ID!

    """Fields required to update a product."""
    input: ProductInput!
  ): ProductUpdate

  """
  Creates/updates translations for a product. Requires one of the following permissions: MANAGE_TRANSLATIONS.
  """
  productTranslate(
    """Product ID or ProductTranslatableContent ID."""
    id: ID!
    input: TranslationInput!

    """Translation language code."""
    languageCode: LanguageCodeEnum!
  ): ProductTranslate

  """
  Manage product's availability in channels. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  productChannelListingUpdate(
    """ID of a product to update."""
    id: ID!

    """Fields required to create or update product channel listings."""
    input: ProductChannelListingUpdateInput!
  ): ProductChannelListingUpdate

  """
  Create a media object (image or video URL) associated with product. For image, this mutation must be sent as a `multipart` request. More detailed specs of the upload format can be found here: https://github.com/jaydenseric/graphql-multipart-request-spec Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  productMediaCreate(
    """Fields required to create a product media."""
    input: ProductMediaCreateInput!
  ): ProductMediaCreate

  """
  Reorder the variants of a product. Mutation updates updated_at on product and triggers PRODUCT_UPDATED webhook. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  productVariantReorder(
    """The list of variant reordering operations."""
    moves: [ReorderInput!]!

    """Id of product that variants order will be altered."""
    productId: ID!
  ): ProductVariantReorder

  """
  Deletes a product media. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  productMediaDelete(
    """ID of a product media to delete."""
    id: ID!
  ): ProductMediaDelete

  """
  Deletes product media. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  productMediaBulkDelete(
    """List of product media IDs to delete."""
    ids: [ID!]!
  ): ProductMediaBulkDelete

  """
  Changes ordering of the product media. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  productMediaReorder(
    """IDs of a product media in the desired order."""
    mediaIds: [ID!]!

    """ID of product that media order will be altered."""
    productId: ID!
  ): ProductMediaReorder

  """
  Updates a product media. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  productMediaUpdate(
    """ID of a product media to update."""
    id: ID!

    """Fields required to update a product media."""
    input: ProductMediaUpdateInput!
  ): ProductMediaUpdate

  """
  Creates a new product type. Requires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
  """
  productTypeCreate(
    """Fields required to create a product type."""
    input: ProductTypeInput!
  ): ProductTypeCreate

  """
  Deletes a product type. Requires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
  """
  productTypeDelete(
    """ID of a product type to delete."""
    id: ID!
  ): ProductTypeDelete

  """
  Deletes product types. Requires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
  """
  productTypeBulkDelete(
    """List of product type IDs to delete."""
    ids: [ID!]!
  ): ProductTypeBulkDelete

  """
  Updates an existing product type. Requires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
  """
  productTypeUpdate(
    """ID of a product type to update."""
    id: ID!

    """Fields required to update a product type."""
    input: ProductTypeInput!
  ): ProductTypeUpdate

  """
  Reorder the attributes of a product type. Requires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
  """
  productTypeReorderAttributes(
    """The list of attribute reordering operations."""
    moves: [ReorderInput!]!

    """ID of a product type."""
    productTypeId: ID!

    """The attribute type to reorder."""
    type: ProductAttributeType!
  ): ProductTypeReorderAttributes

  """
  Reorder product attribute values. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  productReorderAttributeValues(
    """ID of an attribute."""
    attributeId: ID!

    """The list of reordering operations for given attribute values."""
    moves: [ReorderInput!]!

    """ID of a product."""
    productId: ID!
  ): ProductReorderAttributeValues

  """
  Create new digital content. This mutation must be sent as a `multipart` request. More detailed specs of the upload format can be found here: https://github.com/jaydenseric/graphql-multipart-request-spec Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  digitalContentCreate(
    """Fields required to create a digital content."""
    input: DigitalContentUploadInput!

    """ID of a product variant to upload digital content."""
    variantId: ID!
  ): DigitalContentCreate

  """
  Remove digital content assigned to given variant. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  digitalContentDelete(
    """ID of a product variant with digital content to remove."""
    variantId: ID!
  ): DigitalContentDelete

  """
  Update digital content. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  digitalContentUpdate(
    """Fields required to update a digital content."""
    input: DigitalContentInput!

    """ID of a product variant with digital content to update."""
    variantId: ID!
  ): DigitalContentUpdate

  """
  Generate new URL to digital content. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  digitalContentUrlCreate(
    """Fields required to create a new url."""
    input: DigitalContentUrlCreateInput!
  ): DigitalContentUrlCreate

  """
  Creates a new variant for a product. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  productVariantCreate(
    """Fields required to create a product variant."""
    input: ProductVariantCreateInput!
  ): ProductVariantCreate

  """
  Deletes a product variant. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  productVariantDelete(
    """ID of a product variant to delete."""
    id: ID!
  ): ProductVariantDelete

  """
  Creates product variants for a given product. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  productVariantBulkCreate(
    """ID of the product to create the variants for."""
    product: ID!

    """Input list of product variants to create."""
    variants: [ProductVariantBulkCreateInput!]!
  ): ProductVariantBulkCreate

  """
  Deletes product variants. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  productVariantBulkDelete(
    """List of product variant IDs to delete."""
    ids: [ID!]!
  ): ProductVariantBulkDelete

  """
  Creates stocks for product variant. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  productVariantStocksCreate(
    """Input list of stocks to create."""
    stocks: [StockInput!]!

    """ID of a product variant for which stocks will be created."""
    variantId: ID!
  ): ProductVariantStocksCreate

  """
  Delete stocks from product variant. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  productVariantStocksDelete(
    """ID of product variant for which stocks will be deleted."""
    variantId: ID!
    warehouseIds: [ID!]
  ): ProductVariantStocksDelete

  """
  Update stocks for product variant. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  productVariantStocksUpdate(
    """Input list of stocks to create."""
    stocks: [StockInput!]!

    """ID of a product variant for which stocks will be created."""
    variantId: ID!
  ): ProductVariantStocksUpdate

  """
  Updates an existing variant for product. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  productVariantUpdate(
    """ID of a product variant to update."""
    id: ID!

    """Fields required to update a product variant."""
    input: ProductVariantInput!
  ): ProductVariantUpdate

  """
  Set default variant for a product. Mutation triggers PRODUCT_UPDATED webhook. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  productVariantSetDefault(
    """Id of a product that will have the default variant set."""
    productId: ID!

    """Id of a variant that will be set as default."""
    variantId: ID!
  ): ProductVariantSetDefault

  """
  Creates/updates translations for a product variant. Requires one of the following permissions: MANAGE_TRANSLATIONS.
  """
  productVariantTranslate(
    """ProductVariant ID or ProductVariantTranslatableContent ID."""
    id: ID!
    input: NameTranslationInput!

    """Translation language code."""
    languageCode: LanguageCodeEnum!
  ): ProductVariantTranslate

  """
  Manage product variant prices in channels. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  productVariantChannelListingUpdate(
    """ID of a product variant to update."""
    id: ID!

    """
    List of fields required to create or upgrade product variant channel listings.
    """
    input: [ProductVariantChannelListingAddInput!]!
  ): ProductVariantChannelListingUpdate

  """
  Reorder product variant attribute values. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  productVariantReorderAttributeValues(
    """ID of an attribute."""
    attributeId: ID!

    """The list of reordering operations for given attribute values."""
    moves: [ReorderInput!]!

    """ID of a product variant."""
    variantId: ID!
  ): ProductVariantReorderAttributeValues

  """
  Added in Saleor 3.1. Deactivates product variant preorder. It changes all preorder allocation into regular allocation. Note: this feature is in a preview state and can be subject to changes at later point. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  productVariantPreorderDeactivate(
    """ID of a variant which preorder should be deactivated."""
    id: ID!
  ): ProductVariantPreorderDeactivate

  """
  Assign an media to a product variant. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  variantMediaAssign(
    """ID of a product media to assign to a variant."""
    mediaId: ID!

    """ID of a product variant."""
    variantId: ID!
  ): VariantMediaAssign

  """
  Unassign an media from a product variant. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  variantMediaUnassign(
    """ID of a product media to unassign from a variant."""
    mediaId: ID!

    """ID of a product variant."""
    variantId: ID!
  ): VariantMediaUnassign

  """
  Captures the authorized payment amount. Requires one of the following permissions: MANAGE_ORDERS.
  """
  paymentCapture(
    """Transaction amount."""
    amount: PositiveDecimal

    """Payment ID."""
    paymentId: ID!
  ): PaymentCapture

  """
  Refunds the captured payment amount. Requires one of the following permissions: MANAGE_ORDERS.
  """
  paymentRefund(
    """Transaction amount."""
    amount: PositiveDecimal

    """Payment ID."""
    paymentId: ID!
  ): PaymentRefund

  """
  Voids the authorized payment. Requires one of the following permissions: MANAGE_ORDERS.
  """
  paymentVoid(
    """Payment ID."""
    paymentId: ID!
  ): PaymentVoid

  """Initializes payment process when it is required by gateway."""
  paymentInitialize(
    """Slug of a channel for which the data should be returned."""
    channel: String

    """A gateway name used to initialize the payment."""
    gateway: String!

    """Client-side generated data required to initialize the payment."""
    paymentData: JSONString
  ): PaymentInitialize

  """Check payment balance."""
  paymentCheckBalance(
    """Fields required to check payment balance."""
    input: PaymentCheckBalanceInput!
  ): PaymentCheckBalance

  """
  Creates a new page. Requires one of the following permissions: MANAGE_PAGES.
  """
  pageCreate(
    """Fields required to create a page."""
    input: PageCreateInput!
  ): PageCreate

  """
  Deletes a page. Requires one of the following permissions: MANAGE_PAGES.
  """
  pageDelete(
    """ID of a page to delete."""
    id: ID!
  ): PageDelete

  """
  Deletes pages. Requires one of the following permissions: MANAGE_PAGES.
  """
  pageBulkDelete(
    """List of page IDs to delete."""
    ids: [ID!]!
  ): PageBulkDelete

  """
  Publish pages. Requires one of the following permissions: MANAGE_PAGES.
  """
  pageBulkPublish(
    """List of page IDs to (un)publish."""
    ids: [ID!]!

    """Determine if pages will be published or not."""
    isPublished: Boolean!
  ): PageBulkPublish

  """
  Updates an existing page. Requires one of the following permissions: MANAGE_PAGES.
  """
  pageUpdate(
    """ID of a page to update."""
    id: ID!

    """Fields required to update a page."""
    input: PageInput!
  ): PageUpdate

  """
  Creates/updates translations for a page. Requires one of the following permissions: MANAGE_TRANSLATIONS.
  """
  pageTranslate(
    """Page ID or PageTranslatableContent ID."""
    id: ID!
    input: PageTranslationInput!

    """Translation language code."""
    languageCode: LanguageCodeEnum!
  ): PageTranslate

  """
  Create a new page type. Requires one of the following permissions: MANAGE_PAGE_TYPES_AND_ATTRIBUTES.
  """
  pageTypeCreate(
    """Fields required to create page type."""
    input: PageTypeCreateInput!
  ): PageTypeCreate

  """
  Update page type. Requires one of the following permissions: MANAGE_PAGE_TYPES_AND_ATTRIBUTES.
  """
  pageTypeUpdate(
    """ID of the page type to update."""
    id: ID

    """Fields required to update page type."""
    input: PageTypeUpdateInput!
  ): PageTypeUpdate

  """
  Delete a page type. Requires one of the following permissions: MANAGE_PAGE_TYPES_AND_ATTRIBUTES.
  """
  pageTypeDelete(
    """ID of the page type to delete."""
    id: ID!
  ): PageTypeDelete

  """
  Delete page types. Requires one of the following permissions: MANAGE_PAGE_TYPES_AND_ATTRIBUTES.
  """
  pageTypeBulkDelete(
    """List of page type IDs to delete"""
    ids: [ID!]!
  ): PageTypeBulkDelete

  """
  Assign attributes to a given page type. Requires one of the following permissions: MANAGE_PAGE_TYPES_AND_ATTRIBUTES.
  """
  pageAttributeAssign(
    """The IDs of the attributes to assign."""
    attributeIds: [ID!]!

    """ID of the page type to assign the attributes into."""
    pageTypeId: ID!
  ): PageAttributeAssign

  """
  Unassign attributes from a given page type. Requires one of the following permissions: MANAGE_PAGE_TYPES_AND_ATTRIBUTES.
  """
  pageAttributeUnassign(
    """The IDs of the attributes to unassign."""
    attributeIds: [ID!]!

    """ID of the page type from which the attributes should be unassign."""
    pageTypeId: ID!
  ): PageAttributeUnassign

  """
  Reorder the attributes of a page type. Requires one of the following permissions: MANAGE_PAGE_TYPES_AND_ATTRIBUTES.
  """
  pageTypeReorderAttributes(
    """The list of attribute reordering operations."""
    moves: [ReorderInput!]!

    """ID of a page type."""
    pageTypeId: ID!
  ): PageTypeReorderAttributes

  """
  Reorder page attribute values. Requires one of the following permissions: MANAGE_PAGES.
  """
  pageReorderAttributeValues(
    """ID of an attribute."""
    attributeId: ID!

    """The list of reordering operations for given attribute values."""
    moves: [ReorderInput!]!

    """ID of a page."""
    pageId: ID!
  ): PageReorderAttributeValues

  """
  Completes creating an order. Requires one of the following permissions: MANAGE_ORDERS.
  """
  draftOrderComplete(
    """ID of the order that will be completed."""
    id: ID!
  ): DraftOrderComplete

  """
  Creates a new draft order. Requires one of the following permissions: MANAGE_ORDERS.
  """
  draftOrderCreate(
    """Fields required to create an order."""
    input: DraftOrderCreateInput!
  ): DraftOrderCreate

  """
  Deletes a draft order. Requires one of the following permissions: MANAGE_ORDERS.
  """
  draftOrderDelete(
    """ID of a draft order to delete."""
    id: ID!
  ): DraftOrderDelete

  """
  Deletes draft orders. Requires one of the following permissions: MANAGE_ORDERS.
  """
  draftOrderBulkDelete(
    """List of draft order IDs to delete."""
    ids: [ID!]!
  ): DraftOrderBulkDelete

  """
  Deletes order lines. Requires one of the following permissions: MANAGE_ORDERS.
  """
  draftOrderLinesBulkDelete(
    """List of order lines IDs to delete."""
    ids: [ID!]!
  ): DraftOrderLinesBulkDelete @deprecated(reason: "This field will be removed in Saleor 4.0.")

  """
  Updates a draft order. Requires one of the following permissions: MANAGE_ORDERS.
  """
  draftOrderUpdate(
    """ID of a draft order to update."""
    id: ID!

    """Fields required to update an order."""
    input: DraftOrderInput!
  ): DraftOrderUpdate

  """
  Adds note to the order. Requires one of the following permissions: MANAGE_ORDERS.
  """
  orderAddNote(
    """ID of the order to add a note for."""
    order: ID!

    """Fields required to create a note for the order."""
    input: OrderAddNoteInput!
  ): OrderAddNote

  """
  Cancel an order. Requires one of the following permissions: MANAGE_ORDERS.
  """
  orderCancel(
    """ID of the order to cancel."""
    id: ID!
  ): OrderCancel

  """
  Capture an order. Requires one of the following permissions: MANAGE_ORDERS.
  """
  orderCapture(
    """Amount of money to capture."""
    amount: PositiveDecimal!

    """ID of the order to capture."""
    id: ID!
  ): OrderCapture

  """
  Confirms an unconfirmed order by changing status to unfulfilled. Requires one of the following permissions: MANAGE_ORDERS.
  """
  orderConfirm(
    """ID of an order to confirm."""
    id: ID!
  ): OrderConfirm

  """
  Creates new fulfillments for an order. Requires one of the following permissions: MANAGE_ORDERS.
  """
  orderFulfill(
    """Fields required to create a fulfillment."""
    input: OrderFulfillInput!

    """ID of the order to be fulfilled."""
    order: ID
  ): OrderFulfill

  """
  Cancels existing fulfillment and optionally restocks items. Requires one of the following permissions: MANAGE_ORDERS.
  """
  orderFulfillmentCancel(
    """ID of a fulfillment to cancel."""
    id: ID!

    """Fields required to cancel a fulfillment."""
    input: FulfillmentCancelInput
  ): FulfillmentCancel

  """
  Added in Saleor 3.1. Approve existing fulfillment. Requires one of the following permissions: MANAGE_ORDERS.
  """
  orderFulfillmentApprove(
    """True if stock could be exceeded."""
    allowStockToBeExceeded: Boolean = false

    """ID of a fulfillment to approve."""
    id: ID!

    """True if confirmation email should be send."""
    notifyCustomer: Boolean!
  ): FulfillmentApprove

  """
  Updates a fulfillment for an order. Requires one of the following permissions: MANAGE_ORDERS.
  """
  orderFulfillmentUpdateTracking(
    """ID of a fulfillment to update."""
    id: ID!

    """Fields required to update a fulfillment."""
    input: FulfillmentUpdateTrackingInput!
  ): FulfillmentUpdateTracking

  """
  Refund products. Requires one of the following permissions: MANAGE_ORDERS.
  """
  orderFulfillmentRefundProducts(
    """Fields required to create an refund fulfillment."""
    input: OrderRefundProductsInput!

    """ID of the order to be refunded."""
    order: ID!
  ): FulfillmentRefundProducts

  """
  Return products. Requires one of the following permissions: MANAGE_ORDERS.
  """
  orderFulfillmentReturnProducts(
    """Fields required to return products."""
    input: OrderReturnProductsInput!

    """ID of the order to be returned."""
    order: ID!
  ): FulfillmentReturnProducts

  """
  Create order lines for an order. Requires one of the following permissions: MANAGE_ORDERS.
  """
  orderLinesCreate(
    """ID of the order to add the lines to."""
    id: ID!

    """Fields required to add order lines."""
    input: [OrderLineCreateInput!]!
  ): OrderLinesCreate

  """
  Deletes an order line from an order. Requires one of the following permissions: MANAGE_ORDERS.
  """
  orderLineDelete(
    """ID of the order line to delete."""
    id: ID!
  ): OrderLineDelete

  """
  Updates an order line of an order. Requires one of the following permissions: MANAGE_ORDERS.
  """
  orderLineUpdate(
    """ID of the order line to update."""
    id: ID!

    """Fields required to update an order line."""
    input: OrderLineInput!
  ): OrderLineUpdate

  """
  Adds discount to the order. Requires one of the following permissions: MANAGE_ORDERS.
  """
  orderDiscountAdd(
    """Fields required to create a discount for the order."""
    input: OrderDiscountCommonInput!

    """ID of an order to discount."""
    orderId: ID!
  ): OrderDiscountAdd

  """
  Update discount for the order. Requires one of the following permissions: MANAGE_ORDERS.
  """
  orderDiscountUpdate(
    """ID of a discount to update."""
    discountId: ID!

    """Fields required to update a discount for the order."""
    input: OrderDiscountCommonInput!
  ): OrderDiscountUpdate

  """
  Remove discount from the order. Requires one of the following permissions: MANAGE_ORDERS.
  """
  orderDiscountDelete(
    """ID of a discount to remove."""
    discountId: ID!
  ): OrderDiscountDelete

  """
  Update discount for the order line. Requires one of the following permissions: MANAGE_ORDERS.
  """
  orderLineDiscountUpdate(
    """Fields required to update price for the order line."""
    input: OrderDiscountCommonInput!

    """ID of a order line to update price"""
    orderLineId: ID!
  ): OrderLineDiscountUpdate

  """
  Remove discount applied to the order line. Requires one of the following permissions: MANAGE_ORDERS.
  """
  orderLineDiscountRemove(
    """ID of a order line to remove its discount"""
    orderLineId: ID!
  ): OrderLineDiscountRemove

  """
  Mark order as manually paid. Requires one of the following permissions: MANAGE_ORDERS.
  """
  orderMarkAsPaid(
    """ID of the order to mark paid."""
    id: ID!

    """The external transaction reference."""
    transactionReference: String
  ): OrderMarkAsPaid

  """
  Refund an order. Requires one of the following permissions: MANAGE_ORDERS.
  """
  orderRefund(
    """Amount of money to refund."""
    amount: PositiveDecimal!

    """ID of the order to refund."""
    id: ID!
  ): OrderRefund

  """
  Updates an order. Requires one of the following permissions: MANAGE_ORDERS.
  """
  orderUpdate(
    """ID of an order to update."""
    id: ID!

    """Fields required to update an order."""
    input: OrderUpdateInput!
  ): OrderUpdate

  """
  Updates a shipping method of the order. Requires shipping method ID to update, when null is passed then currently assigned shipping method is removed. Requires one of the following permissions: MANAGE_ORDERS.
  """
  orderUpdateShipping(
    """ID of the order to update a shipping method."""
    order: ID!

    """Fields required to change shipping method of the order."""
    input: OrderUpdateShippingInput!
  ): OrderUpdateShipping

  """
  Void an order. Requires one of the following permissions: MANAGE_ORDERS.
  """
  orderVoid(
    """ID of the order to void."""
    id: ID!
  ): OrderVoid

  """
  Cancels orders. Requires one of the following permissions: MANAGE_ORDERS.
  """
  orderBulkCancel(
    """List of orders IDs to cancel."""
    ids: [ID!]!
  ): OrderBulkCancel

  """
  Delete metadata of an object. To use it, you need to have access to the modified object.
  """
  deleteMetadata(
    """ID or token (for Order and Checkout) of an object to update."""
    id: ID!

    """Metadata keys to delete."""
    keys: [String!]!
  ): DeleteMetadata

  """
  Delete object's private metadata. To use it, you need to be an authenticated staff user or an app and have access to the modified object.
  """
  deletePrivateMetadata(
    """ID or token (for Order and Checkout) of an object to update."""
    id: ID!

    """Metadata keys to delete."""
    keys: [String!]!
  ): DeletePrivateMetadata

  """
  Updates metadata of an object. To use it, you need to have access to the modified object.
  """
  updateMetadata(
    """ID or token (for Order and Checkout) of an object to update."""
    id: ID!

    """Fields required to update the object's metadata."""
    input: [MetadataInput!]!
  ): UpdateMetadata

  """
  Updates private metadata of an object. To use it, you need to be an authenticated staff user or an app and have access to the modified object.
  """
  updatePrivateMetadata(
    """ID or token (for Order and Checkout) of an object to update."""
    id: ID!

    """Fields required to update the object's metadata."""
    input: [MetadataInput!]!
  ): UpdatePrivateMetadata

  """
  Assigns storefront's navigation menus. Requires one of the following permissions: MANAGE_MENUS, MANAGE_SETTINGS.
  """
  assignNavigation(
    """ID of the menu."""
    menu: ID

    """Type of the navigation bar to assign the menu to."""
    navigationType: NavigationType!
  ): AssignNavigation

  """
  Creates a new Menu. Requires one of the following permissions: MANAGE_MENUS.
  """
  menuCreate(
    """Fields required to create a menu."""
    input: MenuCreateInput!
  ): MenuCreate

  """
  Deletes a menu. Requires one of the following permissions: MANAGE_MENUS.
  """
  menuDelete(
    """ID of a menu to delete."""
    id: ID!
  ): MenuDelete

  """
  Deletes menus. Requires one of the following permissions: MANAGE_MENUS.
  """
  menuBulkDelete(
    """List of menu IDs to delete."""
    ids: [ID!]!
  ): MenuBulkDelete

  """
  Updates a menu. Requires one of the following permissions: MANAGE_MENUS.
  """
  menuUpdate(
    """ID of a menu to update."""
    id: ID!

    """Fields required to update a menu."""
    input: MenuInput!
  ): MenuUpdate

  """
  Creates a new menu item. Requires one of the following permissions: MANAGE_MENUS.
  """
  menuItemCreate(
    """
    Fields required to update a menu item. Only one of `url`, `category`, `page`, `collection` is allowed per item.
    """
    input: MenuItemCreateInput!
  ): MenuItemCreate

  """
  Deletes a menu item. Requires one of the following permissions: MANAGE_MENUS.
  """
  menuItemDelete(
    """ID of a menu item to delete."""
    id: ID!
  ): MenuItemDelete

  """
  Deletes menu items. Requires one of the following permissions: MANAGE_MENUS.
  """
  menuItemBulkDelete(
    """List of menu item IDs to delete."""
    ids: [ID!]!
  ): MenuItemBulkDelete

  """
  Updates a menu item. Requires one of the following permissions: MANAGE_MENUS.
  """
  menuItemUpdate(
    """ID of a menu item to update."""
    id: ID!

    """
    Fields required to update a menu item. Only one of `url`, `category`, `page`, `collection` is allowed per item.
    """
    input: MenuItemInput!
  ): MenuItemUpdate

  """
  Creates/updates translations for a menu item. Requires one of the following permissions: MANAGE_TRANSLATIONS.
  """
  menuItemTranslate(
    """MenuItem ID or MenuItemTranslatableContent ID."""
    id: ID!
    input: NameTranslationInput!

    """Translation language code."""
    languageCode: LanguageCodeEnum!
  ): MenuItemTranslate

  """
  Moves items of menus. Requires one of the following permissions: MANAGE_MENUS.
  """
  menuItemMove(
    """ID of the menu."""
    menu: ID!

    """The menu position data."""
    moves: [MenuItemMoveInput!]!
  ): MenuItemMove

  """
  Request an invoice for the order using plugin. Requires one of the following permissions: MANAGE_ORDERS.
  """
  invoiceRequest(
    """Invoice number, if not provided it will be generated."""
    number: String

    """ID of the order related to invoice."""
    orderId: ID!
  ): InvoiceRequest

  """
  Requests deletion of an invoice. Requires one of the following permissions: MANAGE_ORDERS.
  """
  invoiceRequestDelete(
    """ID of an invoice to request the deletion."""
    id: ID!
  ): InvoiceRequestDelete

  """
  Creates a ready to send invoice. Requires one of the following permissions: MANAGE_ORDERS.
  """
  invoiceCreate(
    """Fields required when creating an invoice."""
    input: InvoiceCreateInput!

    """ID of the order related to invoice."""
    orderId: ID!
  ): InvoiceCreate

  """
  Deletes an invoice. Requires one of the following permissions: MANAGE_ORDERS.
  """
  invoiceDelete(
    """ID of an invoice to delete."""
    id: ID!
  ): InvoiceDelete

  """
  Updates an invoice. Requires one of the following permissions: MANAGE_ORDERS.
  """
  invoiceUpdate(
    """ID of an invoice to update."""
    id: ID!

    """Fields to use when updating an invoice."""
    input: UpdateInvoiceInput!
  ): InvoiceUpdate

  """
  Send an invoice notification to the customer. Requires one of the following permissions: MANAGE_ORDERS.
  """
  invoiceSendNotification(
    """ID of an invoice to be sent."""
    id: ID!
  ): InvoiceSendNotification

  """
  Activate a gift card. Requires one of the following permissions: MANAGE_GIFT_CARD.
  """
  giftCardActivate(
    """ID of a gift card to activate."""
    id: ID!
  ): GiftCardActivate

  """
  Creates a new gift card. Requires one of the following permissions: MANAGE_GIFT_CARD.
  """
  giftCardCreate(
    """Fields required to create a gift card."""
    input: GiftCardCreateInput!
  ): GiftCardCreate

  """
  Added in Saleor 3.1. Delete gift card. Note: this feature is in a preview state and can be subject to changes at later point. Requires one of the following permissions: MANAGE_GIFT_CARD.
  """
  giftCardDelete(
    """ID of the gift card to delete."""
    id: ID!
  ): GiftCardDelete

  """
  Deactivate a gift card. Requires one of the following permissions: MANAGE_GIFT_CARD.
  """
  giftCardDeactivate(
    """ID of a gift card to deactivate."""
    id: ID!
  ): GiftCardDeactivate

  """
  Update a gift card. Requires one of the following permissions: MANAGE_GIFT_CARD.
  """
  giftCardUpdate(
    """ID of a gift card to update."""
    id: ID!

    """Fields required to update a gift card."""
    input: GiftCardUpdateInput!
  ): GiftCardUpdate

  """
  Added in Saleor 3.1. Resend a gift card. Note: this feature is in a preview state and can be subject to changes at later point. Requires one of the following permissions: MANAGE_GIFT_CARD.
  """
  giftCardResend(
    """Fields required to resend a gift card."""
    input: GiftCardResendInput!
  ): GiftCardResend

  """
  Added in Saleor 3.1. Adds note to the gift card. Note: this feature is in a preview state and can be subject to changes at later point. Requires one of the following permissions: MANAGE_GIFT_CARD.
  """
  giftCardAddNote(
    """ID of the gift card to add a note for."""
    id: ID!

    """Fields required to create a note for the gift card."""
    input: GiftCardAddNoteInput!
  ): GiftCardAddNote

  """
  Added in Saleor 3.1. Create gift cards. Note: this feature is in a preview state and can be subject to changes at later point. Requires one of the following permissions: MANAGE_GIFT_CARD.
  """
  giftCardBulkCreate(
    """Fields required to create gift cards."""
    input: GiftCardBulkCreateInput!
  ): GiftCardBulkCreate

  """
  Added in Saleor 3.1. Delete gift cards. Note: this feature is in a preview state and can be subject to changes at later point. Requires one of the following permissions: MANAGE_GIFT_CARD.
  """
  giftCardBulkDelete(
    """List of gift card IDs to delete."""
    ids: [ID!]!
  ): GiftCardBulkDelete

  """
  Added in Saleor 3.1. Activate gift cards. Note: this feature is in a preview state and can be subject to changes at later point. Requires one of the following permissions: MANAGE_GIFT_CARD.
  """
  giftCardBulkActivate(
    """List of gift card IDs to activate."""
    ids: [ID!]!
  ): GiftCardBulkActivate

  """
  Added in Saleor 3.1. Deactivate gift cards. Note: this feature is in a preview state and can be subject to changes at later point. Requires one of the following permissions: MANAGE_GIFT_CARD.
  """
  giftCardBulkDeactivate(
    """List of gift card IDs to deactivate."""
    ids: [ID!]!
  ): GiftCardBulkDeactivate

  """
  Update plugin configuration. Requires one of the following permissions: MANAGE_PLUGINS.
  """
  pluginUpdate(
    """ID of a channel for which the data should be modified."""
    channelId: ID

    """ID of plugin to update."""
    id: ID!

    """Fields required to update a plugin configuration."""
    input: PluginUpdateInput!
  ): PluginUpdate

  """
  Added in Saleor 3.1. Trigger sending a notification with the notify plugin method. Serializes nodes provided as ids parameter and includes this data in the notification payload.
  """
  externalNotificationTrigger(
    """
    Channel slug. Saleor will send a notification within a provided channel. Please, make sure that necessary plugins are active.
    """
    channel: String!

    """Input for External Notification Trigger."""
    input: ExternalNotificationTriggerInput!

    """The ID of notification plugin."""
    pluginId: String
  ): ExternalNotificationTrigger

  """
  Creates a new sale. Requires one of the following permissions: MANAGE_DISCOUNTS.
  """
  saleCreate(
    """Fields required to create a sale."""
    input: SaleInput!
  ): SaleCreate

  """
  Deletes a sale. Requires one of the following permissions: MANAGE_DISCOUNTS.
  """
  saleDelete(
    """ID of a sale to delete."""
    id: ID!
  ): SaleDelete

  """
  Deletes sales. Requires one of the following permissions: MANAGE_DISCOUNTS.
  """
  saleBulkDelete(
    """List of sale IDs to delete."""
    ids: [ID!]!
  ): SaleBulkDelete

  """
  Updates a sale. Requires one of the following permissions: MANAGE_DISCOUNTS.
  """
  saleUpdate(
    """ID of a sale to update."""
    id: ID!

    """Fields required to update a sale."""
    input: SaleInput!
  ): SaleUpdate

  """
  Adds products, categories, collections to a voucher. Requires one of the following permissions: MANAGE_DISCOUNTS.
  """
  saleCataloguesAdd(
    """ID of a sale."""
    id: ID!

    """Fields required to modify catalogue IDs of sale."""
    input: CatalogueInput!
  ): SaleAddCatalogues

  """
  Removes products, categories, collections from a sale. Requires one of the following permissions: MANAGE_DISCOUNTS.
  """
  saleCataloguesRemove(
    """ID of a sale."""
    id: ID!

    """Fields required to modify catalogue IDs of sale."""
    input: CatalogueInput!
  ): SaleRemoveCatalogues

  """
  Creates/updates translations for a sale. Requires one of the following permissions: MANAGE_TRANSLATIONS.
  """
  saleTranslate(
    """Sale ID or SaleTranslatableContent ID."""
    id: ID!
    input: NameTranslationInput!

    """Translation language code."""
    languageCode: LanguageCodeEnum!
  ): SaleTranslate

  """
  Manage sale's availability in channels. Requires one of the following permissions: MANAGE_DISCOUNTS.
  """
  saleChannelListingUpdate(
    """ID of a sale to update."""
    id: ID!

    """Fields required to update sale channel listings."""
    input: SaleChannelListingInput!
  ): SaleChannelListingUpdate

  """
  Creates a new voucher. Requires one of the following permissions: MANAGE_DISCOUNTS.
  """
  voucherCreate(
    """Fields required to create a voucher."""
    input: VoucherInput!
  ): VoucherCreate

  """
  Deletes a voucher. Requires one of the following permissions: MANAGE_DISCOUNTS.
  """
  voucherDelete(
    """ID of a voucher to delete."""
    id: ID!
  ): VoucherDelete

  """
  Deletes vouchers. Requires one of the following permissions: MANAGE_DISCOUNTS.
  """
  voucherBulkDelete(
    """List of voucher IDs to delete."""
    ids: [ID!]!
  ): VoucherBulkDelete

  """
  Updates a voucher. Requires one of the following permissions: MANAGE_DISCOUNTS.
  """
  voucherUpdate(
    """ID of a voucher to update."""
    id: ID!

    """Fields required to update a voucher."""
    input: VoucherInput!
  ): VoucherUpdate

  """
  Adds products, categories, collections to a voucher. Requires one of the following permissions: MANAGE_DISCOUNTS.
  """
  voucherCataloguesAdd(
    """ID of a voucher."""
    id: ID!

    """Fields required to modify catalogue IDs of voucher."""
    input: CatalogueInput!
  ): VoucherAddCatalogues

  """
  Removes products, categories, collections from a voucher. Requires one of the following permissions: MANAGE_DISCOUNTS.
  """
  voucherCataloguesRemove(
    """ID of a voucher."""
    id: ID!

    """Fields required to modify catalogue IDs of voucher."""
    input: CatalogueInput!
  ): VoucherRemoveCatalogues

  """
  Creates/updates translations for a voucher. Requires one of the following permissions: MANAGE_TRANSLATIONS.
  """
  voucherTranslate(
    """Voucher ID or VoucherTranslatableContent ID."""
    id: ID!
    input: NameTranslationInput!

    """Translation language code."""
    languageCode: LanguageCodeEnum!
  ): VoucherTranslate

  """
  Manage voucher's availability in channels. Requires one of the following permissions: MANAGE_DISCOUNTS.
  """
  voucherChannelListingUpdate(
    """ID of a voucher to update."""
    id: ID!

    """Fields required to update voucher channel listings."""
    input: VoucherChannelListingInput!
  ): VoucherChannelListingUpdate

  """
  Export products to csv file. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  exportProducts(
    """Fields required to export product data."""
    input: ExportProductsInput!
  ): ExportProducts

  """
  Added in Saleor 3.1. Export gift cards to csv file. Note: this feature is in a preview state and can be subject to changes at later point. Requires one of the following permissions: MANAGE_GIFT_CARD.
  """
  exportGiftCards(
    """Fields required to export gift cards data."""
    input: ExportGiftCardsInput!
  ): ExportGiftCards

  """
  Upload a file. This mutation must be sent as a `multipart` request. More detailed specs of the upload format can be found here: https://github.com/jaydenseric/graphql-multipart-request-spec Requires one of the following permissions: AUTHENTICATED_APP, AUTHENTICATED_STAFF_USER.
  """
  fileUpload(
    """Represents a file in a multipart request."""
    file: Upload!
  ): FileUpload

  """Adds a gift card or a voucher to a checkout."""
  checkoutAddPromoCode(
    """
    The ID of the checkout. 
    
    DEPRECATED: this field will be removed in Saleor 4.0. Use token instead.
    """
    checkoutId: ID

    """Gift card code or voucher code."""
    promoCode: String!

    """Checkout token."""
    token: UUID
  ): CheckoutAddPromoCode

  """Update billing address in the existing checkout."""
  checkoutBillingAddressUpdate(
    """The billing address of the checkout."""
    billingAddress: AddressInput!

    """
    The ID of the checkout. 
    
    DEPRECATED: this field will be removed in Saleor 4.0. Use token instead.
    """
    checkoutId: ID

    """Checkout token."""
    token: UUID
  ): CheckoutBillingAddressUpdate

  """
  Completes the checkout. As a result a new order is created and a payment charge is made. This action requires a successful payment before it can be performed. In case additional confirmation step as 3D secure is required confirmationNeeded flag will be set to True and no order created until payment is confirmed with second call of this mutation.
  """
  checkoutComplete(
    """
    The ID of the checkout. 
    
    DEPRECATED: this field will be removed in Saleor 4.0. Use token instead.
    """
    checkoutId: ID

    """Client-side generated data required to finalize the payment."""
    paymentData: JSONString

    """
    URL of a view where users should be redirected to see the order details. URL in RFC 1808 format.
    """
    redirectUrl: String

    """
    Determines whether to store the payment source for future usage. 
    
    DEPRECATED: this field will be removed in Saleor 4.0. Use checkoutPaymentCreate for this action.
    """
    storeSource: Boolean = false

    """Checkout token."""
    token: UUID
  ): CheckoutComplete

  """Create a new checkout."""
  checkoutCreate(
    """Fields required to create checkout."""
    input: CheckoutCreateInput!
  ): CheckoutCreate

  """
  Sets the customer as the owner of the checkout. Requires one of the following permissions: AUTHENTICATED_APP, AUTHENTICATED_USER.
  """
  checkoutCustomerAttach(
    """
    The ID of the checkout. 
    
    DEPRECATED: this field will be removed in Saleor 4.0. Use token instead.
    """
    checkoutId: ID

    """
    ID of customer to attach to checkout. Can be used to attach customer to checkout by staff or app. Requires IMPERSONATE_USER permission.
    """
    customerId: ID

    """Checkout token."""
    token: UUID
  ): CheckoutCustomerAttach

  """
  Removes the user assigned as the owner of the checkout. Requires one of the following permissions: AUTHENTICATED_APP, AUTHENTICATED_USER.
  """
  checkoutCustomerDetach(
    """
    The ID of the checkout. 
    
    DEPRECATED: this field will be removed in Saleor 4.0. Use token instead.
    """
    checkoutId: ID

    """Checkout token."""
    token: UUID
  ): CheckoutCustomerDetach

  """Updates email address in the existing checkout object."""
  checkoutEmailUpdate(
    """
    The ID of the checkout. 
    
    DEPRECATED: this field will be removed in Saleor 4.0. Use token instead.
    """
    checkoutId: ID

    """email."""
    email: String!

    """Checkout token."""
    token: UUID
  ): CheckoutEmailUpdate

  """Deletes a CheckoutLine."""
  checkoutLineDelete(
    """
    The ID of the checkout. 
    
    DEPRECATED: this field will be removed in Saleor 4.0. Use token instead.
    """
    checkoutId: ID

    """ID of the checkout line to delete."""
    lineId: ID

    """Checkout token."""
    token: UUID
  ): CheckoutLineDelete @deprecated(reason: "DEPRECATED: Will be removed in Saleor 4.0. Use `checkoutLinesDelete` instead.")

  """Deletes checkout lines."""
  checkoutLinesDelete(
    """A list of checkout lines."""
    linesIds: [ID!]!

    """Checkout token."""
    token: UUID!
  ): CheckoutLinesDelete

  """
  Adds a checkout line to the existing checkout.If line was already in checkout, its quantity will be increased.
  """
  checkoutLinesAdd(
    """
    The ID of the checkout. 
    
    DEPRECATED: this field will be removed in Saleor 4.0. Use token instead.
    """
    checkoutId: ID

    """
    A list of checkout lines, each containing information about an item in the checkout.
    """
    lines: [CheckoutLineInput!]!

    """Checkout token."""
    token: UUID
  ): CheckoutLinesAdd

  """Updates checkout line in the existing checkout."""
  checkoutLinesUpdate(
    """
    The ID of the checkout. 
    
    DEPRECATED: this field will be removed in Saleor 4.0. Use token instead.
    """
    checkoutId: ID

    """
    A list of checkout lines, each containing information about an item in the checkout.
    """
    lines: [CheckoutLineUpdateInput!]!

    """Checkout token."""
    token: UUID
  ): CheckoutLinesUpdate

  """Remove a gift card or a voucher from a checkout."""
  checkoutRemovePromoCode(
    """
    The ID of the checkout. 
    
    DEPRECATED: this field will be removed in Saleor 4.0. Use token instead.
    """
    checkoutId: ID

    """Gift card code or voucher code."""
    promoCode: String

    """Gift card or voucher ID."""
    promoCodeId: ID

    """Checkout token."""
    token: UUID
  ): CheckoutRemovePromoCode

  """Create a new payment for given checkout."""
  checkoutPaymentCreate(
    """
    The ID of the checkout. 
    
    DEPRECATED: this field will be removed in Saleor 4.0. Use token instead.
    """
    checkoutId: ID

    """Data required to create a new payment."""
    input: PaymentInput!

    """Checkout token."""
    token: UUID
  ): CheckoutPaymentCreate

  """Update shipping address in the existing checkout."""
  checkoutShippingAddressUpdate(
    """
    The ID of the checkout. 
    
    DEPRECATED: this field will be removed in Saleor 4.0. Use token instead.
    """
    checkoutId: ID

    """The mailing address to where the checkout will be shipped."""
    shippingAddress: AddressInput!

    """Checkout token."""
    token: UUID
  ): CheckoutShippingAddressUpdate

  """Updates the shipping method of the checkout."""
  checkoutShippingMethodUpdate(
    """
    The ID of the checkout. 
    
    DEPRECATED: this field will be removed in Saleor 4.0. Use token instead.
    """
    checkoutId: ID

    """Shipping method."""
    shippingMethodId: ID!

    """Checkout token."""
    token: UUID
  ): CheckoutShippingMethodUpdate @deprecated(reason: "This field will be removed in Saleor 4.0. Use `checkoutDeliveryMethodUpdate` instead.")

  """
  Added in Saleor 3.1. Updates the delivery method (shipping method or pick up point) of the checkout. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  checkoutDeliveryMethodUpdate(
    """Delivery Method ID (`Warehouse` ID or `ShippingMethod` ID)."""
    deliveryMethodId: ID

    """Checkout token."""
    token: UUID
  ): CheckoutDeliveryMethodUpdate

  """Update language code in the existing checkout."""
  checkoutLanguageCodeUpdate(
    """
    The ID of the checkout. 
    
    DEPRECATED: this field will be removed in Saleor 4.0. Use token instead.
    """
    checkoutId: ID

    """New language code."""
    languageCode: LanguageCodeEnum!

    """Checkout token."""
    token: UUID
  ): CheckoutLanguageCodeUpdate

  """
  Added in Saleor 3.2. Create new order from existing checkout. Note: this feature is in a preview state and can be subject to changes at later point. Requires one of the following permissions: HANDLE_CHECKOUTS.
  """
  orderCreateFromCheckout(
    """ID of a checkout that will be converted to an order."""
    id: ID!

    """
    Determines if checkout should be removed after creating an order. Default true.
    """
    removeCheckout: Boolean = true
  ): OrderCreateFromCheckout

  """
  Creates new channel. Requires one of the following permissions: MANAGE_CHANNELS.
  """
  channelCreate(
    """Fields required to create channel."""
    input: ChannelCreateInput!
  ): ChannelCreate

  """
  Update a channel. Requires one of the following permissions: MANAGE_CHANNELS.
  """
  channelUpdate(
    """ID of a channel to update."""
    id: ID!

    """Fields required to update a channel."""
    input: ChannelUpdateInput!
  ): ChannelUpdate

  """
  Delete a channel. Orders associated with the deleted channel will be moved to the target channel. Checkouts, product availability, and pricing will be removed. Requires one of the following permissions: MANAGE_CHANNELS.
  """
  channelDelete(
    """ID of a channel to delete."""
    id: ID!

    """Fields required to delete a channel."""
    input: ChannelDeleteInput
  ): ChannelDelete

  """
  Activate a channel. Requires one of the following permissions: MANAGE_CHANNELS.
  """
  channelActivate(
    """ID of the channel to activate."""
    id: ID!
  ): ChannelActivate

  """
  Deactivate a channel. Requires one of the following permissions: MANAGE_CHANNELS.
  """
  channelDeactivate(
    """ID of the channel to deactivate."""
    id: ID!
  ): ChannelDeactivate

  """Creates an attribute."""
  attributeCreate(
    """Fields required to create an attribute."""
    input: AttributeCreateInput!
  ): AttributeCreate

  """
  Deletes an attribute. Requires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
  """
  attributeDelete(
    """ID of an attribute to delete."""
    id: ID!
  ): AttributeDelete

  """
  Updates attribute. Requires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
  """
  attributeUpdate(
    """ID of an attribute to update."""
    id: ID!

    """Fields required to update an attribute."""
    input: AttributeUpdateInput!
  ): AttributeUpdate

  """
  Creates/updates translations for an attribute. Requires one of the following permissions: MANAGE_TRANSLATIONS.
  """
  attributeTranslate(
    """Attribute ID or AttributeTranslatableContent ID."""
    id: ID!
    input: NameTranslationInput!

    """Translation language code."""
    languageCode: LanguageCodeEnum!
  ): AttributeTranslate

  """
  Deletes attributes. Requires one of the following permissions: MANAGE_PAGE_TYPES_AND_ATTRIBUTES.
  """
  attributeBulkDelete(
    """List of attribute IDs to delete."""
    ids: [ID!]!
  ): AttributeBulkDelete

  """
  Deletes values of attributes. Requires one of the following permissions: MANAGE_PAGE_TYPES_AND_ATTRIBUTES.
  """
  attributeValueBulkDelete(
    """List of attribute value IDs to delete."""
    ids: [ID!]!
  ): AttributeValueBulkDelete

  """
  Creates a value for an attribute. Requires one of the following permissions: MANAGE_PRODUCTS.
  """
  attributeValueCreate(
    """Attribute to which value will be assigned."""
    attribute: ID!

    """Fields required to create an AttributeValue."""
    input: AttributeValueCreateInput!
  ): AttributeValueCreate

  """
  Deletes a value of an attribute. Requires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
  """
  attributeValueDelete(
    """ID of a value to delete."""
    id: ID!
  ): AttributeValueDelete

  """
  Updates value of an attribute. Requires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
  """
  attributeValueUpdate(
    """ID of an AttributeValue to update."""
    id: ID!

    """Fields required to update an AttributeValue."""
    input: AttributeValueUpdateInput!
  ): AttributeValueUpdate

  """
  Creates/updates translations for an attribute value. Requires one of the following permissions: MANAGE_TRANSLATIONS.
  """
  attributeValueTranslate(
    """AttributeValue ID or AttributeValueTranslatableContent ID."""
    id: ID!
    input: AttributeValueTranslationInput!

    """Translation language code."""
    languageCode: LanguageCodeEnum!
  ): AttributeValueTranslate

  """
  Reorder the values of an attribute. Requires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
  """
  attributeReorderValues(
    """ID of an attribute."""
    attributeId: ID!

    """The list of reordering operations for given attribute values."""
    moves: [ReorderInput!]!
  ): AttributeReorderValues

  """
  Creates a new app. Requires the following permissions: AUTHENTICATED_STAFF_USER and MANAGE_APPS.
  """
  appCreate(
    """Fields required to create a new app."""
    input: AppInput!
  ): AppCreate

  """
  Updates an existing app. Requires one of the following permissions: MANAGE_APPS.
  """
  appUpdate(
    """ID of an app to update."""
    id: ID!

    """Fields required to update an existing app."""
    input: AppInput!
  ): AppUpdate

  """
  Deletes an app. Requires one of the following permissions: MANAGE_APPS.
  """
  appDelete(
    """ID of an app to delete."""
    id: ID!
  ): AppDelete

  """
  Creates a new token. Requires one of the following permissions: MANAGE_APPS.
  """
  appTokenCreate(
    """Fields required to create a new auth token."""
    input: AppTokenInput!
  ): AppTokenCreate

  """
  Deletes an authentication token assigned to app. Requires one of the following permissions: MANAGE_APPS.
  """
  appTokenDelete(
    """ID of an auth token to delete."""
    id: ID!
  ): AppTokenDelete

  """Verify provided app token."""
  appTokenVerify(
    """App token to verify."""
    token: String!
  ): AppTokenVerify

  """
  Install new app by using app manifest. Requires the following permissions: AUTHENTICATED_STAFF_USER and MANAGE_APPS.
  """
  appInstall(
    """Fields required to install a new app."""
    input: AppInstallInput!
  ): AppInstall

  """
  Retry failed installation of new app. Requires one of the following permissions: MANAGE_APPS.
  """
  appRetryInstall(
    """Determine if app will be set active or not."""
    activateAfterInstallation: Boolean = true

    """ID of failed installation."""
    id: ID!
  ): AppRetryInstall

  """
  Delete failed installation. Requires one of the following permissions: MANAGE_APPS.
  """
  appDeleteFailedInstallation(
    """ID of failed installation to delete."""
    id: ID!
  ): AppDeleteFailedInstallation

  """
  Fetch and validate manifest. Requires one of the following permissions: MANAGE_APPS.
  """
  appFetchManifest(manifestUrl: String!): AppFetchManifest

  """
  Activate the app. Requires one of the following permissions: MANAGE_APPS.
  """
  appActivate(
    """ID of app to activate."""
    id: ID!
  ): AppActivate

  """
  Deactivate the app. Requires one of the following permissions: MANAGE_APPS.
  """
  appDeactivate(
    """ID of app to deactivate."""
    id: ID!
  ): AppDeactivate

  """Create JWT token."""
  tokenCreate(
    """Email of a user."""
    email: String!

    """Password of a user."""
    password: String!
  ): CreateToken

  """
  Refresh JWT token. Mutation tries to take refreshToken from the input.If it fails it will try to take refreshToken from the http-only cookie -refreshToken. csrfToken is required when refreshToken is provided as a cookie.
  """
  tokenRefresh(
    """
    CSRF token required to refresh token. This argument is required when refreshToken is provided as a cookie.
    """
    csrfToken: String

    """Refresh token."""
    refreshToken: String
  ): RefreshToken

  """Verify JWT token."""
  tokenVerify(
    """JWT token to validate."""
    token: String!
  ): VerifyToken

  """
  Deactivate all JWT tokens of the currently authenticated user. Requires one of the following permissions: AUTHENTICATED_USER.
  """
  tokensDeactivateAll: DeactivateAllUserTokens

  """Prepare external authentication url for user by custom plugin."""
  externalAuthenticationUrl(
    """The data required by plugin to create external authentication url."""
    input: JSONString!

    """The ID of the authentication plugin."""
    pluginId: String!
  ): ExternalAuthenticationUrl

  """Obtain external access tokens for user by custom plugin."""
  externalObtainAccessTokens(
    """The data required by plugin to create authentication data."""
    input: JSONString!

    """The ID of the authentication plugin."""
    pluginId: String!
  ): ExternalObtainAccessTokens

  """Refresh user's access by custom plugin."""
  externalRefresh(
    """The data required by plugin to proceed the refresh process."""
    input: JSONString!

    """The ID of the authentication plugin."""
    pluginId: String!
  ): ExternalRefresh

  """Logout user by custom plugin."""
  externalLogout(
    """The data required by plugin to proceed the logout process."""
    input: JSONString!

    """The ID of the authentication plugin."""
    pluginId: String!
  ): ExternalLogout

  """Verify external authentication data by plugin."""
  externalVerify(
    """The data required by plugin to proceed the verification."""
    input: JSONString!

    """The ID of the authentication plugin."""
    pluginId: String!
  ): ExternalVerify

  """Sends an email with the account password modification link."""
  requestPasswordReset(
    """
    Slug of a channel which will be used for notify user. Optional when only one channel exists.
    """
    channel: String

    """Email of the user that will be used for password recovery."""
    email: String!

    """
    URL of a view where users should be redirected to reset the password. URL in RFC 1808 format.
    """
    redirectUrl: String!
  ): RequestPasswordReset

  """Confirm user account with token sent by email during registration."""
  confirmAccount(
    """E-mail of the user performing account confirmation."""
    email: String!

    """A one-time token required to confirm the account."""
    token: String!
  ): ConfirmAccount

  """
  Sets the user's password from the token sent by email using the RequestPasswordReset mutation.
  """
  setPassword(
    """Email of a user."""
    email: String!

    """Password of a user."""
    password: String!

    """A one-time token required to set the password."""
    token: String!
  ): SetPassword

  """
  Change the password of the logged in user. Requires one of the following permissions: AUTHENTICATED_USER.
  """
  passwordChange(
    """New user password."""
    newPassword: String!

    """Current user password."""
    oldPassword: String!
  ): PasswordChange

  """
  Request email change of the logged in user. Requires one of the following permissions: AUTHENTICATED_USER.
  """
  requestEmailChange(
    """
    Slug of a channel which will be used to notify users. Optional when only one channel exists.
    """
    channel: String

    """New user email."""
    newEmail: String!

    """User password."""
    password: String!

    """
    URL of a view where users should be redirected to update the email address. URL in RFC 1808 format.
    """
    redirectUrl: String!
  ): RequestEmailChange

  """
  Confirm the email change of the logged-in user. Requires one of the following permissions: AUTHENTICATED_USER.
  """
  confirmEmailChange(
    """
    Slug of a channel which will be used to notify users. Optional when only one channel exists.
    """
    channel: String

    """A one-time token required to change the email."""
    token: String!
  ): ConfirmEmailChange

  """
  Create a new address for the customer. Requires one of the following permissions: AUTHENTICATED_USER.
  """
  accountAddressCreate(
    """Fields required to create address."""
    input: AddressInput!

    """
    A type of address. If provided, the new address will be automatically assigned as the customer's default address of that type.
    """
    type: AddressTypeEnum
  ): AccountAddressCreate

  """
  Updates an address of the logged-in user. Requires one of the following permissions: MANAGE_USERS, IS_OWNER.
  """
  accountAddressUpdate(
    """ID of the address to update."""
    id: ID!

    """Fields required to update the address."""
    input: AddressInput!
  ): AccountAddressUpdate

  """
  Delete an address of the logged-in user. Requires one of the following permissions: MANAGE_USERS, IS_OWNER.
  """
  accountAddressDelete(
    """ID of the address to delete."""
    id: ID!
  ): AccountAddressDelete

  """
  Sets a default address for the authenticated user. Requires one of the following permissions: AUTHENTICATED_USER.
  """
  accountSetDefaultAddress(
    """ID of the address to set as default."""
    id: ID!

    """The type of address."""
    type: AddressTypeEnum!
  ): AccountSetDefaultAddress

  """Register a new user."""
  accountRegister(
    """Fields required to create a user."""
    input: AccountRegisterInput!
  ): AccountRegister

  """
  Updates the account of the logged-in user. Requires one of the following permissions: AUTHENTICATED_USER.
  """
  accountUpdate(
    """Fields required to update the account of the logged-in user."""
    input: AccountInput!
  ): AccountUpdate

  """
  Sends an email with the account removal link for the logged-in user. Requires one of the following permissions: AUTHENTICATED_USER.
  """
  accountRequestDeletion(
    """
    Slug of a channel which will be used to notify users. Optional when only one channel exists.
    """
    channel: String

    """
    URL of a view where users should be redirected to delete their account. URL in RFC 1808 format.
    """
    redirectUrl: String!
  ): AccountRequestDeletion

  """
  Remove user account. Requires one of the following permissions: AUTHENTICATED_USER.
  """
  accountDelete(
    """
    A one-time token required to remove account. Sent by email using AccountRequestDeletion mutation.
    """
    token: String!
  ): AccountDelete

  """
  Creates user address. Requires one of the following permissions: MANAGE_USERS.
  """
  addressCreate(
    """Fields required to create address."""
    input: AddressInput!

    """ID of a user to create address for."""
    userId: ID!
  ): AddressCreate

  """
  Updates an address. Requires one of the following permissions: MANAGE_USERS.
  """
  addressUpdate(
    """ID of the address to update."""
    id: ID!

    """Fields required to update the address."""
    input: AddressInput!
  ): AddressUpdate

  """
  Deletes an address. Requires one of the following permissions: MANAGE_USERS.
  """
  addressDelete(
    """ID of the address to delete."""
    id: ID!
  ): AddressDelete

  """
  Sets a default address for the given user. Requires one of the following permissions: MANAGE_USERS.
  """
  addressSetDefault(
    """ID of the address."""
    addressId: ID!

    """The type of address."""
    type: AddressTypeEnum!

    """ID of the user to change the address for."""
    userId: ID!
  ): AddressSetDefault

  """
  Creates a new customer. Requires one of the following permissions: MANAGE_USERS.
  """
  customerCreate(
    """Fields required to create a customer."""
    input: UserCreateInput!
  ): CustomerCreate

  """
  Updates an existing customer. Requires one of the following permissions: MANAGE_USERS.
  """
  customerUpdate(
    """ID of a customer to update."""
    id: ID!

    """Fields required to update a customer."""
    input: CustomerInput!
  ): CustomerUpdate

  """
  Deletes a customer. Requires one of the following permissions: MANAGE_USERS.
  """
  customerDelete(
    """ID of a customer to delete."""
    id: ID!
  ): CustomerDelete

  """
  Deletes customers. Requires one of the following permissions: MANAGE_USERS.
  """
  customerBulkDelete(
    """List of user IDs to delete."""
    ids: [ID!]!
  ): CustomerBulkDelete

  """
  Creates a new staff user. Requires one of the following permissions: MANAGE_STAFF.
  """
  staffCreate(
    """Fields required to create a staff user."""
    input: StaffCreateInput!
  ): StaffCreate

  """
  Updates an existing staff user. Requires one of the following permissions: MANAGE_STAFF.
  """
  staffUpdate(
    """ID of a staff user to update."""
    id: ID!

    """Fields required to update a staff user."""
    input: StaffUpdateInput!
  ): StaffUpdate

  """
  Deletes a staff user. Requires one of the following permissions: MANAGE_STAFF.
  """
  staffDelete(
    """ID of a staff user to delete."""
    id: ID!
  ): StaffDelete

  """
  Deletes staff users. Requires one of the following permissions: MANAGE_STAFF.
  """
  staffBulkDelete(
    """List of user IDs to delete."""
    ids: [ID!]!
  ): StaffBulkDelete

  """
  Create a user avatar. Only for staff members. This mutation must be sent as a `multipart` request. More detailed specs of the upload format can be found here: https://github.com/jaydenseric/graphql-multipart-request-spec Requires one of the following permissions: AUTHENTICATED_STAFF_USER.
  """
  userAvatarUpdate(
    """Represents an image file in a multipart request."""
    image: Upload!
  ): UserAvatarUpdate

  """
  Deletes a user avatar. Only for staff members. Requires one of the following permissions: AUTHENTICATED_STAFF_USER.
  """
  userAvatarDelete: UserAvatarDelete

  """
  Activate or deactivate users. Requires one of the following permissions: MANAGE_USERS.
  """
  userBulkSetActive(
    """List of user IDs to (de)activate)."""
    ids: [ID!]!

    """Determine if users will be set active or not."""
    isActive: Boolean!
  ): UserBulkSetActive

  """
  Create new permission group. Requires one of the following permissions: MANAGE_STAFF.
  """
  permissionGroupCreate(
    """Input fields to create permission group."""
    input: PermissionGroupCreateInput!
  ): PermissionGroupCreate

  """
  Update permission group. Requires one of the following permissions: MANAGE_STAFF.
  """
  permissionGroupUpdate(
    """ID of the group to update."""
    id: ID!

    """Input fields to create permission group."""
    input: PermissionGroupUpdateInput!
  ): PermissionGroupUpdate

  """
  Delete permission group. Requires one of the following permissions: MANAGE_STAFF.
  """
  permissionGroupDelete(
    """ID of the group to delete."""
    id: ID!
  ): PermissionGroupDelete
}

"""Export Customer Material Mapping template and return link to download"""
type CustomerMaterialTemplateExport {
  fileName: String
  contentType: String
  exportedFileBase64: String
  errors: [ContractCheckoutError!]!
}

type ContractCheckoutError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: ContractCheckoutErrorCode!
}

"""An enumeration."""
enum ContractCheckoutErrorCode {
  ALREADY_EXISTS
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
  CONTRACT_ERROR
  PRODUCT_GROUP_ERROR
  DUPLICATE_ORDER
}

"""
Upload a file. This mutation must be sent as a `multipart` request. More detailed specs of the upload format can be found here: https://github.com/jaydenseric/graphql-multipart-request-spec Requires one of the following permissions: AUTHENTICATED_USER.
"""
type UploadCustomerMaterials {
  status: Boolean
  rows: String
  errors: [CustomerMaterialUploadError!]!
}

type CustomerMaterialUploadError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: ContractCheckoutErrorCode!
  data: CustomerMaterialErrorData
}

type CustomerMaterialErrorData {
  soldToCode: String
  salesOrganizationCode: String
  distributionChannelCode: String
  soldToMaterialCode: String
  materialCode: String
}

"""
Variables of this type must be set to null in mutations. They will be replaced with a filename from a following multipart part containing a binary file. See: https://github.com/jaydenseric/graphql-multipart-request-spec.
"""
scalar Upload

input CustomerMaterialUploadInput {
  soldToCode: String!
  saleOrgCode: String!
  distributionChannel: String!
}

"""
Download Customer Master Mappings based on search Requires one of the following permissions: AUTHENTICATED_USER.
"""
type DownloadCustomerMaterialExcel {
  exportedFileBase64: String
  fileName: String
  errorMessage: String
  success: Boolean
  errors: [ContractCheckoutError!]!
}

"""add products to order"""
type AddOrderLine {
  orderLines: [CipTempOrderLine]
  itemNoUpdated: Boolean
  checkoutErrors: [ContractCheckoutError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ContractCheckoutError!]!
  orderLine: CipTempOrderLine
}

"""delete order line"""
type DeleteOrderLine {
  checkoutErrors: [ContractCheckoutError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ContractCheckoutError!]!
  orderLines: CipTempOrderLine
}

"""update order line otc ship_to"""
type UpdateOrderLineOtcShipTo {
  id: ID
  checkoutErrors: [ContractCheckoutError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ContractCheckoutError!]!
  orderLines: CipTempOrderLine
}

input CipOrderOtcPartnerInput {
  soldToCode: String
  name1: String
  name2: String
  name3: String
  name4: String
  city: String
  postalCode: String
  district: String
  street1: String
  street2: String
  street3: String
  street4: String
  location: String
  transportZoneCode: String
  transportZoneName: String
  countryCode: String
  countryName: String
  telephoneNo: String
  telephoneExtension: String
  mobileNo: String
  faxNo: String
  faxNoExt: String
  email: String
  language: String
  taxNumber1: String
  taxNumber2: String
  taxId: String
  branchId: String
}

"""delete order line otc ship_to"""
type DeleteOrderLineOtcShipTo {
  errors: [CipOrderError!]!
  orderLines: CipTempOrderLine
}

type CipOrderError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: CipOrderErrorCode!
}

"""An enumeration."""
enum CipOrderErrorCode {
  ALREADY_EXISTS
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

"""Cancel Delete Order Lines"""
type CancelDeleteCipOrderLines {
  status: Boolean
  sapOrderMessages: [SapOrderMessage]
  sapItemMessages: [SapItemMessage]
  errors: [CipOrderError!]!
}

type SapOrderMessage {
  errorCode: String
  soNo: String
  errorMessage: String
}

type SapItemMessage {
  errorCode: String
  itemNo: String
  errorMessage: String
}

input CancelDeleteCipOrderLinesInput {
  itemNo: String!
  status: CipCancelItemStatus!
}

enum CipCancelItemStatus {
  Cancel
  Delete
}

"""Cancel All  Order Lines"""
type CancelCipOrder {
  status: Boolean
  sapOrderMessages: [SapOrderMessage]
  sapItemMessages: [SapItemMessage]
  errors: [CipOrderError!]!
}

"""Undo Cancel Delete Order Lines"""
type CipUndoOrderLines {
  success: Boolean
  sapOrderMessages: [SapOrderMessage]
  sapItemMessages: [SapItemMessage]
  errors: [CipOrderError!]!
}

"""update order"""
type CipChangeOrderAddNewOrderLine {
  success: Boolean
  sapOrderMessages: [SapOrderMessages]
  sapItemMessages: [SapItemMessages]
  cpItemMessages: [CPItemMessage]
  cpErrorMessages: [CPMessage]
  warningMessages: [WarningMessages]
  errors: [CipOrderError!]!
  order: CipTempOrder
}

type SapOrderMessages {
  id: String
  itemNo: String
  errorCode: String
  soNo: String
  errorMessage: String
}

type SapItemMessages {
  itemNo: String
  errorMessage: String
  errorCode: String
  id: String
}

type CPItemMessage {
  parentItemNo: String
  itemNo: String
  materialCode: String
  materialDescription: String
  quantity: String
  requestDate: String
  confirmDate: String
  originalDate: String
  bomFlag: String
  plant: String
  parentBom: String
  showInPopup: Boolean
}

type CPMessage {
  id: String
  itemNo: String
  errorMessage: String
  errorCode: String
}

type WarningMessages {
  source: String
  order: String
  message: String
}

input CipChangeOrderEditInput {
  headerDetails: CipChangeOrderHeaderInput

  """
  A list of order lines, each containing information about an item in the order.
  """
  itemDetails: [CipChangeOrderItemDetailsInput!]
}

input CipChangeOrderHeaderInput {
  cpNeed: Boolean
  soNo: String

  """date must be type yyyy-mm-dd"""
  requestDate: Date
  paymentTerms: String
  poNo: String
  saleGroupCode: String
  salesEmployee: String
  priceDate: String
  unLoadingPoint: String
  taxClass: String
  shipTo: String
  billTo: String
  fromHeader: String
  headerNote1: String
  cash: String
  internalCommentsToWarehouse: String
  internalCommentsToLogistic: String
  externalCommentsToCustomer: String
  productInformation: String
}

input CipChangeOrderItemDetailsInput {
  id: String
  itemNo: String
  materialNo: String
  quantity: Float
  unit: String
  saleQtyFactor: Int
  batchNo: String
  batchChoiceFlag: Boolean
  plant: String

  """date must be type yyyy-mm-dd"""
  requestDate: Date
  pricePerUnit: Float
  paymentTerm: String
  itemCategory: String
  confirmQuantity: String
  sapConfirmQty: String
  assignedQuantity: String
  poItemNo: String
  deliveryTolOver: Float
  deliveryTolUnder: Float
  shippingPoint: String
  poDetail: String
  shipTo: String
  internalCommentsToWarehouse: String
  externalCommentsToCustomer: String
  internalCommentsToLogistic: String
  remark: String
  saleText1: String
  saleText2: String
  saleText3: String
  saleText4: String
  itemNote: String
  prItemText: String
  lotNo: String
  productionMemo: String
  productionFlag: String

  """date must be type yyyy-mm-dd"""
  priceDate: Date
  manualPriceFlag: Boolean

  """information about One Time Customer Ship TO"""
  otcShipTo: CipOrderOtcPartnerInput
}

"""update order"""
type CipOrderUpdate {
  success: Boolean
  sapOrderNumber: String
  order: CipTempOrder
  sapOrderStatus: String
  sapOrderMessages: [SapOrderMessages]
  cpItemMessages: [CPItemMessage]
  cpErrorMessages: [CPMessage]
  sapItemMessages: [SapItemMessages]
  warningMessages: [WarningMessages]
  checkoutErrors: [CipOrderError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [CipOrderError!]!
}

input CipOrderUpdateInput {
  orderInformation: CipOrderInformationInput

  """information about order organization data"""
  orderOrganizationData: CipOrderOrganizationalDataInput

  """
  A list of order lines, each containing information about an item in the order.
  """
  lines: [CipOrderLineInput!]

  """"""
  status: ScgOrderStatus
}

input CipOrderInformationInput {
  customerId: ID

  """date must be type yyyy-mm-dd"""
  poDate: Date
  poNumber: String

  """date must be type yyyy-mm-dd"""
  requestDate: Date
  orderType: String
  soldToCode: String
  shipTo: String
  billTo: String
  customerGroup1Id: ID
  customerGroup2Id: ID
  customerGroup3Id: ID
  customerGroup4Id: ID
  fromHeader: String
  headerNote1: String
  cash: String
  internalCommentsToWarehouse: String
  internalCommentsToLogistic: String
  externalCommentsToCustomer: String
  productInformation: String
  shippingPoint: String
  route: String
  deliveryBlock: String
  incotermsId: ID
  taxClass: String
  unloadingPoint: String
  salesEmployee: String
  paymentTerm: String

  """information about One Time Customer Sold TO"""
  otcSoldTo: CipOrderOtcPartnerInput

  """information about One Time Customer Bill TO"""
  otcBillTo: CipOrderOtcPartnerInput

  """information about One Time Customer Ship TO"""
  otcShipTo: CipOrderOtcPartnerInput
}

input CipOrderOrganizationalDataInput {
  saleOrganizationCode: String
  distributionChannelCode: String
  divisionCode: String
  saleOfficeCode: String
  saleGroupCode: String
  salesEmployee: String
}

input CipOrderLineInput {
  """id of order line"""
  id: ID
  itemNo: String
  quantity: Float

  """date must be type yyyy-mm-dd"""
  requestDate: Date
  plant: String
  materialNo: String
  unit: String
  productInformation: String
  deliveryTolOver: Float
  deliveryTolUnder: Float
  deliveryTolUnlimited: Boolean
  weightUnit: String
  itemCategory: String
  shippingPoint: String
  route: String
  poNo: String
  poNoExternal: String
  poItemNo: String
  paymentTerm: String
  weight: Float
  requestDateChangeReason: String
  batchChoiceFlag: Boolean
  batchNo: String
  bomMaterialId: String
  bomFlag: Boolean
  productionFlag: String
  pricePerUnit: Float

  """date must be type yyyy-mm-dd"""
  priceDate: Date
  shipTo: String
  internalCommentsToWarehouse: String
  externalCommentsToCustomer: String
  internalCommentsToLogistic: String
  remark: String
  saleText1: String
  saleText2: String
  saleText3: String
  saleText4: String
  itemNote: String
  prItemText: String
  lotNo: String
  productionMemo: String
  manualPriceFlag: Boolean
}

enum ScgOrderStatus {
  DRAFT
  CONFIRMED
  FAILED_CONFIRM
  RECEIVED_ORDER
  CREDIT_CASH_ISSUE
  PARTIAL_COMMITTED_ORDER
  READY_FOR_DELIVERY
  PARTIAL_DELIVERY
  COMPLETED_DELIVERY
  CANCELED
  COMPLETED_ORDER
  PRE_DRAFT
  STATUS_RANK
}

"""update order"""
type CpOrderCreate {
  success: Boolean
  sapOrderNumber: String
  sapOrderStatus: String
  sapOrderMessages: [SapOrderMessages]
  cpItemMessages: [CPItemMessage]
  cpErrorMessages: [CPMessage]
  sapItemMessages: [SapItemMessages]
  warningMessages: [WarningMessages]
  checkoutErrors: [CipOrderError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [CipOrderError!]!
  order: CipTempOrder
}

input CpOrderUpdateInput {
  orderId: String

  """
  A list of order lines, each containing information about an item in the order.
  """
  lines: [CpOrderLineInput!]
}

input CpOrderLineInput {
  itemNo: String

  """date must be type yyyy-mm-dd"""
  requestDate: Date
  manualPriceFlag: Boolean
}

"""update order"""
type CipChangeOrderUpdate {
  success: Boolean
  sapOrderMessages: [SapOrderMessages]
  sapItemMessages: [SapItemMessages]
  cpItemMessages: [CPItemMessage]
  cpErrorMessages: [CPMessage]
  warningMessages: [WarningMessages]
  errors: [CipOrderError!]!
  order: CipTempOrder
}

"""Api for loading price details"""
type OrderLinePriceCalculator {
  response: PriceSummaryResponse
  success: Boolean
  sapOrderMessages: [SapOrderMessage]
  sapItemMessages: [SapItemMessage]
  errors: [CipOrderError!]!
}

type PriceSummaryResponse {
  orderItemsOut: [PriceCalcOrderItemsOut]
  orderHeaderOut: PriceCalcOrderHeaderOut
}

type PriceCalcOrderItemsOut {
  itemNo: String
  materialCode: String
  pricePerUnit: Float
  netValue: Float
  currency: String
  priceStatus: String
  priceStatusDesc: String
  materialDescription: String
  materialType: String
  manualPriceFlag: Boolean
}

type PriceCalcOrderHeaderOut {
  orderAmountBeforeVat: Float
  orderAmountVat: Float
  orderAmountAfterVat: Float
  currency: String
}

input PriceCalculationInput {
  orderInformation: OrderHeaderPriceInfo

  """
  A list of order lines, each containing information about an item in the order.
  """
  lines: [OrderLinePriceInfo!]!
}

input OrderHeaderPriceInfo {
  requestDate: String
  billTo: String
  shipTo: String
  orderType: String
  paymentTerm: String
  distributionChannel: String
  division: String
  salesOrganization: String
  currency: String
  taxClassId: Int
  soNo: String
  salesEmployee: String
}

input OrderLinePriceInfo {
  itemNo: String
  quantity: Float
  plant: String
  materialNo: String
  custMatCode: String
  saleUnit: String
  weightUnit: String
  itemCategory: String
  requestDate: String
  priceDate: String
  parentItemNo: String
  productionFlag: String
  batchNo: String
  shipTo: String
  rejectReason: String
}

"""Download PDF from preview order page"""
type PrintOrderFromPreviewPage {
  exportedFileBase64: String
  fileName: String
  errors: [ContractCheckoutError!]!
}

"""Create CIP split order lines"""
type AddCipSplitOrderLineItem {
  success: Boolean
  sapOrderMessages: [SapOrderMessages]
  sapItemMessages: [SapItemMessages]
  cpItemMessages: [CPItemMessage]
  cpErrorMessages: [CPMessage]
  errors: [CipOrderError!]!
}

input SplitCipOrderLineInput {
  id: Int
  itemNo: String
  quantity: Float
  requestDate: Date
  productionFlag: ProductionFlag
  isParent: Boolean
  originalItemId: Int
  internalCommentsToWarehouse: String
  externalCommentsToCustomer: String
  saleText1: String
  saleText2: String
  saleText3: String
  saleText4: String
  remark: String
  itemNoteCip: String
  prItemTextCip: String
  lotNo: String
  productionMemoPp: String
}

enum ProductionFlag {
  PRODUCED
  NOT_PRODUCED
}

"""Create CIP split order lines after CP Planning"""
type AddCipSplitOrderLineAfterCp {
  success: Boolean
  sapOrderMessages: [SapOrderMessages]
  sapItemMessages: [SapItemMessages]
  cpItemMessages: [CPItemMessage]
  cpErrorMessages: [CPMessage]
  errors: [CipOrderError!]!
}

input SplitCipOrderLineInputAfterCp {
  id: Int
  itemNo: String
  quantity: Float
  requestDate: Date
  productionFlag: ProductionFlag
  isParent: Boolean
  originalItemId: Int
  internalCommentsToWarehouse: String
  externalCommentsToCustomer: String
  saleText1: String
  saleText2: String
  saleText3: String
  saleText4: String
  remark: String
  itemNoteCip: String
  prItemTextCip: String
  lotNo: String
  productionMemoPp: String
  plant: String
  confirmDate: Date
  parentBom: String
}

"""
Send Order Email Requires one of the following permissions: AUTHENTICATED_USER.
"""
type SendEmailFromChangeOrder {
  status: String
  scgpExportError: [ContractCheckoutError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ContractCheckoutError!]!
}

"""Sync order data"""
type CipSyncOrderData {
  success: Boolean
  sapOrderMessages: [SapOrderMessages]
  sapItemMessages: [SapItemMessages]
  errors: [CipOrderError!]!
  order: CipTempOrder
}

"""duplicate order"""
type DuplicateOrderCip {
  errors: [CipOrderError!]!
  order: CipTempOrder
}

"""Export Excel Upload template and return link to download"""
type ExcelUploadTemplateExport {
  fileName: String
  contentType: String
  exportedFileBase64: String
  errors: [ContractCheckoutError!]!
}

"""Mulesoft Api Log"""
type MulesoftAPILogCreate {
  """Whether the mulesoft log was created."""
  success: Boolean
  graphqlError: [ContractCheckoutError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ContractCheckoutError!]!
  mulesoftLog: MulesoftLogType
}

type MulesoftLogType {
  """ID of the mulesoft log"""
  id: ID
}

input MulesoftAPILogCreateInput {
  """URL of the mulesoft log."""
  url: String!

  """Request of the mulesoft log."""
  request: String!

  """Response of the mulesoft log."""
  response: String

  """Exception of the mulesoft log."""
  exception: String

  """Response time of the mulesoft log."""
  responseTimeMs: Int

  """Retry count of the mulesoft log."""
  retryCount: Int

  """Retry of the mulesoft log."""
  retry: Boolean

  """Feature of the mulesoft log."""
  feature: String

  """Order number of the mulesoft log."""
  orderNumber: String

  """Order id of the mulesoft log."""
  orderid: Int
}

"""atp ctp request mutation"""
type ExportChangeOrderATPCTPRequestMutation {
  items: [ExportATPCTPRequestResultType!]
  iPlanMessages: [IPlanMessage]
  itemsFailed: [ExportATPCTPRequestResultType!]
  errors: [ScgpExportError!]!
}

type ExportATPCTPRequestResultType {
  originalItemNo: String!
  materialVariantCode: String!
  materialVariantDescription: String
  originalQuantity: Float!
  originalRequestDate: String!
  originalPlant: String
  orderNo: String
  lineId: ID
  listItems: [ExportATPCTPItemBaseListItemOutput]
}

type ExportATPCTPItemBaseListItemOutput {
  itemNo: String
  quantity: String
  confirmDate: String
  plant: String
  atpCtp: String
  atpCtpDetail: String
  blockCode: String
  runCode: String
  paperMachine: String
  unit: String
  onHandStock: Boolean
  orderType: String
}

type IPlanMessage {
  itemNo: String
  firstCode: String
  secondCode: String
  message: String
  soNo: String
}

type ScgpExportError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: ScgpExportErrorCode!
}

"""An enumeration."""
enum ScgpExportErrorCode {
  ALREADY_EXISTS
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
  IPLAN_ERROR
  PRODUCT_GROUP_ERROR
  DUPLICATE_ORDER
}

input ExportATPCTPRequestOrderLineInput {
  orderNo: String
  itemNo: String
  requestDate: String
  lineId: ID
  quantity: String
  plant: String
  inquiryMethod: InquiryMethodType
}

enum InquiryMethodType {
  DOMESTIC
  CUSTOMER
  EXPORT
  ASAP
}

"""atp ctp confirm mutation"""
type ExportChangeOrderATPCTPConfirmMutation {
  iPlanErrorMessages: [IPlanMessage]
  sapOrderErrorMessages: [SapOrderMessage]
  sapItemMessages: [SapItemMessage]
  items: [ExportATPCTPConfirmItemOutputType]
  errors: [ScgpExportError!]!
}

type ExportATPCTPConfirmItemOutputType {
  originalItemNo: String!
  materialVariantCode: String!
  materialVariantDescription: String
  originalQuantity: Float!
  originalRequestDate: String!
  originalPlant: String
  orderNo: String
  lineId: ID
  listItems: [ExportATPCTPItemBaseListItemOutput]
  action: ATPCTPActionType
  calculatedItemNo: String
}

enum ATPCTPActionType {
  COMMIT
  ROLLBACK
}

input ExportATPCTPConfirmInputType {
  items: [ExportATPCTPConfirmItemInputType]!
}

input ExportATPCTPConfirmItemInputType {
  originalItemNo: String!
  materialVariantCode: String!
  materialVariantDescription: String
  originalQuantity: Float!
  originalRequestDate: String!
  originalPlant: String
  orderNo: String
  lineId: ID
  listItems: [ExportATPCTPItemBaseListItemInput]
  action: ATPCTPActionType
  calculatedItemNo: String
}

input ExportATPCTPItemBaseListItemInput {
  itemNo: String
  quantity: String
  confirmDate: String
  plant: String
  atpCtp: String
  atpCtpDetail: String
  blockCode: String
  runCode: String
  paperMachine: String
  unit: String
  onHandStock: Boolean
  orderType: String
}

"""atp ctp request mutation"""
type CheckoutChangeOrderATPCTPRequestMutation {
  items: [CheckoutATPCTPRequestResultType!]
  iPlanMessages: [IPlanMessage]
  itemsFailed: [CheckoutATPCTPRequestResultType!]
  errors: [ContractCheckoutError!]!
}

type CheckoutATPCTPRequestResultType {
  originalItemNo: String!
  materialVariantCode: String!
  materialVariantDescription: String
  originalQuantity: Float!
  originalRequestDate: String!
  originalPlant: String
  orderNo: String
  lineId: ID
  listItems: [CheckoutATPCTPItemBaseListItemOutput]
}

type CheckoutATPCTPItemBaseListItemOutput {
  itemNo: String
  quantity: String
  confirmDate: String
  plant: String
  atpCtp: String
  atpCtpDetail: String
  blockCode: String
  runCode: String
  paperMachine: String
  unit: String
  onHandStock: Boolean
  orderType: String
}

input CheckoutATPCTPRequestOrderLineInput {
  orderNo: String
  itemNo: String
  requestDate: String
  lineId: ID
  quantity: String
  plant: String
  inquiryMethod: InquiryMethodType
  consignmentLocation: String
}

"""atp ctp confirm mutation"""
type CheckoutChangeOrderATPCTPConfirmMutation {
  iPlanMessages: [IPlanMessage]
  sapOrderMessages: [SapOrderMessage]
  sapItemMessages: [SapItemMessage]
  items: [CheckoutATPCTPConfirmItemOutputType]
  errors: [ContractCheckoutError!]!
}

type CheckoutATPCTPConfirmItemOutputType {
  originalItemNo: String!
  materialVariantCode: String!
  materialVariantDescription: String
  originalQuantity: Float!
  originalRequestDate: String!
  originalPlant: String
  orderNo: String
  lineId: ID
  listItems: [CheckoutATPCTPItemBaseListItemOutput]
  action: ATPCTPActionType
  calculatedItemNo: String
}

input CheckoutATPCTPConfirmInputType {
  items: [CheckoutATPCTPConfirmItemInputType]!
}

input CheckoutATPCTPConfirmItemInputType {
  originalItemNo: String!
  materialVariantCode: String!
  materialVariantDescription: String
  originalQuantity: Float!
  originalRequestDate: String!
  originalPlant: String
  orderNo: String
  lineId: ID
  listItems: [CheckoutATPCTPItemBaseListItemInput]
  action: ATPCTPActionType
  calculatedItemNo: String
}

input CheckoutATPCTPItemBaseListItemInput {
  itemNo: String
  quantity: String
  confirmDate: String
  plant: String
  atpCtp: String
  atpCtpDetail: String
  blockCode: String
  runCode: String
  paperMachine: String
  unit: String
  onHandStock: Boolean
  orderType: String
}

"""atp ctp request mutation"""
type RequireAttentionATPCTPRequestMutation {
  items: [RequireAttentionATPCTPRequestResultType!]
  iPlanMessages: [IPlanMessage]
  itemsFailed: [RequireAttentionATPCTPRequestResultType!]
  errors: [ScgpExportError!]!
}

type RequireAttentionATPCTPRequestResultType {
  orderNo: String
  lineId: String
  originalItemNo: String
  materialVariantCode: String
  materialVariantDescription: String
  originalQuantity: Float
  originalRequestDate: Date
  originalPlant: String
  uniqueId: String
  listItems: [ATPCTPListItems!]
  iplanRequestParams: IPlanResponseRequireAttentionRequestParamsOutput
}

type ATPCTPListItems {
  itemNo: String
  quantity: String
  confirmDate: String
  plant: String
  atpCtp: String
  atpCtpDetail: String
  blockCode: String
  runCode: String
  paperMachine: String
  unit: String
  onHandStock: Boolean
  orderType: String
}

type IPlanResponseRequireAttentionRequestParamsOutput {
  inquiryMethodCode: String
  useInventory: Boolean
  useConsignmentInventory: Boolean
  useProjectedInventory: Boolean
  useProduction: Boolean
  splitOrderItem: String
  singleSource: Boolean
  reAtpRequired: Boolean
  fixSourceAssignment: String
  requestType: String
  typeOfDelivery: String
  transportationMethod: String
}

input ATPCTPRequestOrderLineInput {
  orderNo: String
  itemNo: String
}

"""atp ctp request mutation"""
type ChangeOrderATPCTPRequestMutation {
  items: [ATPCTPRequestResultType!]
  iPlanMessages: [IPlanMessage]
  itemsFailed: [ATPCTPRequestResultType!]
  errors: [ScgpExportError!]!
}

type ATPCTPRequestResultType {
  orderNo: String
  lineId: String
  originalItemNo: String
  materialVariantCode: String
  materialVariantDescription: String
  originalQuantity: Float
  originalRequestDate: Date
  originalPlant: String
  uniqueId: String
  listItems: [ATPCTPListItems!]
  iplanRequestParams: IPlanRequireAttentionRequestParamsOutput
}

type IPlanRequireAttentionRequestParamsOutput {
  inquiryMethodCode: String
  useInventory: Boolean
  useConsignmentInventory: Boolean
  useProjectedInventory: Boolean
  useProduction: Boolean
  splitOrderItem: String
  singleSource: Boolean
  reAtpRequired: Boolean
  fixSourceAssignment: String
  requestType: String
  typeOfDelivery: String
  transportationMethod: String
}

input ChangeOrderATPCTPRequestOrderLineInput {
  orderNo: String
  itemNo: String
  lineId: ID
}

"""atp ctp confirm mutation"""
type ATPCTPConfirmMutation {
  iPlanMessages: [IPlanMessage]
  sapOrderMessages: [SapOrderMessage]
  sapItemMessages: [SapItemMessage]
  errors: [ScgpExportError!]!
}

input ATPCTPConfirmInputType {
  items: [ATPCTPConfirmItemInputType]!
}

input ATPCTPConfirmItemInputType {
  orderNo: String
  lineId: ID
  originalItemNo: String
  materialVariantCode: String
  materialVariantDescription: String
  originalQuantity: Float
  originalRequestDate: Date
  originalPlant: String
  uniqueId: String
  listItems: [ATPCTPListItemsInput]
  action: ATPCTPActionType
  iplanRequestParams: IplanRequireAttentionRequestParamsInput
}

input ATPCTPListItemsInput {
  itemNo: String
  quantity: String
  confirmDate: String
  plant: String
  atpCtp: String
  atpCtpDetail: String
  blockCode: String
  runCode: String
  paperMachine: String
  unit: String
  onHandStock: Boolean
  orderType: String
}

input IplanRequireAttentionRequestParamsInput {
  inquiryMethodCode: String
  useInventory: Boolean
  useConsignmentInventory: Boolean
  useProjectedInventory: Boolean
  useProduction: Boolean
  splitOrderItem: String
  singleSource: Boolean
  reAtpRequired: Boolean
  fixSourceAssignment: String
  requestType: String
  typeOfDelivery: String
  transportationMethod: String
}

"""Call to api realtime partner"""
type CallAPISapRealtimePartner {
  response: [RealtimePartner]
  rawResponse: String
  contractCheckoutError: [ContractCheckoutError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ContractCheckoutError!]!
}

type RealtimePartner {
  partnerFunction: String
  partnerFunctionDesc: String
  partnerNo: String
  partnerName: String
  displayText: String
  addressText: String
}

enum RealtimePartnerType {
  SHIP_TO
  BILL_TO
  SOLD_TO
  SALE_EMPLOYEE
  PAYER
}

"""Create PoUploadCustomerSettings"""
type PoUploadCustomerSettingsCreate {
  uploadErrors: [ScgpPoUploadError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ScgpPoUploadError!]!
  cart: PoUploadCustomerSettings
}

type ScgpPoUploadError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: ScgpPoUploadErrorCode!
}

"""An enumeration."""
enum ScgpPoUploadErrorCode {
  ALREADY_EXISTS
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
  FILE_EXCEED
}

"""Create PoUploadCustomerSettings"""
type PoUploadCustomerSettingsUpdate {
  uploadErrors: [ScgpPoUploadError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ScgpPoUploadError!]!
  cart: PoUploadCustomerSettings
}

"""Create PoUploadCustomerSettings"""
type PoUploadCustomerSettingsDelete {
  uploadErrors: [ScgpPoUploadError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ScgpPoUploadError!]!
  cart: Boolean
}

"""Update dosmetic order line"""
type CalculateDtpDtr {
  status: String
  tempOrderLine: [ContractCheckoutError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ContractCheckoutError!]!
  OrderLines: [TempOrderLine]
}

"""Post to SAP"""
type PostToSap {
  response: String
  tempOrderLine: [ContractCheckoutError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ContractCheckoutError!]!
}

"""Scgp PO Upload Send Mail"""
type ScgpPoUploadSendMail {
  """message send mail reset password"""
  message: String
  scgpPoUploadSendMailErrors: [ScgpPoUploadError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ScgpPoUploadError!]!
}

"""
Upload PO file. This mutation must be sent as a `multipart` request. More detailed specs of the upload format can be found here: https://github.com/jaydenseric/graphql-multipart-request-spec Requires one of the following permissions: AUTHENTICATED_USER.
"""
type PoUploadFileMutation {
  status: Boolean
  uploadErrors: [ScgpPoUploadError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ScgpPoUploadError!]!
}

"""
Upload Excel file. This mutation must be sent as a `multipart` request. More detailed specs of the upload format can be found here: https://github.com/jaydenseric/graphql-multipart-request-spec Requires one of the following permissions: AUTHENTICATED_USER.
"""
type ExcelUploadFileMutation {
  status: Boolean
  id: String
  created: String
  fileName: String
  rows: String
  uploadErrors: [ScgpPoUploadError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ScgpPoUploadError!]!
}

enum UploadType {
  GROUP
  NOT_GROUP
}

"""
Retry upload file Requires one of the following permissions: AUTHENTICATED_USER.
"""
type PoUploadRetryUploadFile {
  status: Boolean
  errors: [ScgpPoUploadError!]!
}

"""Check if the given excel file is not uploaded in last 30 days"""
type CheckExcelFileNameInvalid {
  """Excel file name is invalid or not"""
  valid: Boolean
  uploadErrors: [ScgpPoUploadError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ScgpPoUploadError!]!
}

"""
Upload a file. This mutation must be sent as a `multipart` request. More detailed specs of the upload format can be found here: https://github.com/jaydenseric/graphql-multipart-request-spec Requires one of the following permissions: AUTHENTICATED_USER.
"""
type UploadAlternativeMaterials {
  status: Boolean
  uploadErrors: [ContractCheckoutError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ContractCheckoutError!]!
}

"""Delete alternate material."""
type AlternativeMaterialOsDelete {
  status: String
  materialErrors: [ContractCheckoutError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ContractCheckoutError!]!
  alternateMaterialOs: AlternativeMaterialOs
}

"""
Add alternative material Requires one of the following permissions: AUTHENTICATED_USER.
"""
type AlternativeMaterialAdd {
  materialErrors: [ContractCheckoutError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ContractCheckoutError!]!
  alternativeMaterials: AlternativeMaterial
}

input AlternativeMaterialAddInput {
  """ID of the Sale Organization."""
  saleOrganizationId: ID!

  """ID of the sold to."""
  soldToId: ID!

  """Type of the Alternative Material."""
  type: String!

  """ID of the Material Own."""
  materialOwnId: ID

  """
  A list of Material Os, each containing information about an Alternative Material.
  """
  lines: [AlternativeMaterialItemInput!]!
}

input AlternativeMaterialItemInput {
  """Priority of the Alternative Material."""
  priority: Int!

  """ID of the Material Os."""
  materialOsId: ID

  """Diameter of the Material Os."""
  dia: String
}

"""
Edit alternative material Requires one of the following permissions: AUTHENTICATED_USER.
"""
type AlternativeMaterialEdit {
  materialErrors: [ContractCheckoutError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ContractCheckoutError!]!
  alternativeMaterial: AlternativeMaterial
}

input AlternativeMaterialEditInput {
  """ID of the Sale Organization."""
  saleOrganizationId: ID!

  """ID of the sold to."""
  soldToId: ID!

  """ID of the Material Own."""
  materialOwnId: ID

  """
  A list of alternative material os items, each containing information about an item in the Alternative Material.
  """
  lines: [AlternativeMaterialItemInput!]!
}

"""export alternated materials and return link to download"""
type AlternativeMaterialExport {
  fileName: String
  contentType: String
  exportedFileBase64: String
  errors: [ContractCheckoutError!]!
}

"""export alternated material log and return link to download"""
type AlternativeMaterialLogExport {
  fileName: String
  contentType: String
  exportedFileBase64: String
  errors: [ContractCheckoutError!]!
}

"""delete order line"""
type RequireAttentionItemsDelete {
  success: [RequireAttentionCancelDeleteItems]
  failed: [RequireAttentionCancelDeleteItems]
  totalSuccess: Int
  totalFailed: Int
  scgpRequireAttentionItemsError: [ScgpRequireAttentionItemsError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ScgpRequireAttentionItemsError!]!
}

type RequireAttentionCancelDeleteItems {
  orderNo: String
  itemNo: String
  materialCode: String
  materialDescription: String
  confirmQuantity: Float
  confirmDate: Date
  message: String
}

type ScgpRequireAttentionItemsError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: ScgpRequireAttentionItemsErrorCode!
}

"""An enumeration."""
enum ScgpRequireAttentionItemsErrorCode {
  ALREADY_EXISTS
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

input ReasonForRejectInput {
  reasonForReject: ReasonForReject
}

enum ReasonForReject {
  CANCEL_93
  DELETE
}

"""Update require attention items parameter"""
type RequireAttentionItemsUpdateParameter {
  scgpRequireAttentionItemsErrors: [ScgpRequireAttentionItemsError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ScgpRequireAttentionItemsError!]!
  requireAttentionItems: OrderLineIPlan
}

input RequireAttentionItemParameterUpdateInput {
  inquiryMethodCode: IPlanInquiryMethodCode
  transportationMethod: Int
  typeOfDelivery: ScgpRequireAttentionTypeOfDelivery
  fixSourceAssignment: String
  splitOrderItem: ScgpRequireAttentionSplitOrderItemPartialDelivery
  partialDelivery: ScgpRequireAttentionSplitOrderItemPartialDelivery
  consignment: ScgpRequireAttentionConsignment
}

enum IPlanInquiryMethodCode {
  JIT
  JITP
  JITCP
  ASAP
}

enum ScgpRequireAttentionTypeOfDelivery {
  ARRIVAL
  EX_MILL
}

enum ScgpRequireAttentionSplitOrderItemPartialDelivery {
  YES
  NO
}

enum ScgpRequireAttentionConsignment {
  FREE_STOCK_1000
  FREE_STOCK_1001
  FREE_STOCK_1002
}

"""delete order line"""
type AcceptConfirmDate {
  scgpRequireAttentionItemsError: [ScgpRequireAttentionItemsError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ScgpRequireAttentionItemsError!]!
  orderLines: ConfirmDate
}

type ConfirmDate {
  success(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): RequireAttentionItemsCountTableConnection
  failed(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): RequireAttentionItemsCountTableConnection
}

input AcceptConfirmDateInput {
  """
  A list of RequireAttentionItems items, each containing request_date want to accept
  """
  lines: [AcceptConfirmDateItemInput!]!
}

input AcceptConfirmDateItemInput {
  """ID of the pi product."""
  uniqueId: ID!
  requestDate: Date!
}

"""delete order line"""
type ChangeParameterIPlan {
  scgpRequireAttentionItemsError: [ScgpRequireAttentionItemsError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ScgpRequireAttentionItemsError!]!
  dropdown: ChangeParameterIPlanType
}

type ChangeParameterIPlanType {
  dropdownDomesticOrExport: String
  dropdownAsapClearStock: String
}

"""delete order line"""
type PassParameterToIPlan {
  scgpRequireAttentionItemsError: [ScgpRequireAttentionItemsError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ScgpRequireAttentionItemsError!]!
  status: Boolean
}

"""edit require attention items"""
type EditRequireAttentionItems {
  success: [RequireAttentionEditItems]
  failed: [RequireAttentionEditItems]
  totalSuccess: Int
  totalFailed: Int
  scgpRequireAttentionItemsError: [ScgpRequireAttentionItemsError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ScgpRequireAttentionItemsError!]!
}

type RequireAttentionEditItems {
  orderNo: String
  itemNo: String
  materialCode: String
  materialDescription: String
  requestDate: Date
  requestQuantity: Float
  originalQuantity: Float
  confirmQuantity: Float
  originalRequestDate: Date
  confirmDate: Date
  sapOrderMessages: [SapOrderMessage]
}

input EditRequireAttentionInput {
  lines: [EditRequireAttentionItemsInput!]!
}

input EditRequireAttentionItemsInput {
  id: ID!
  requestDate: Date
  quantity: Float
  itemNo: String
}

"""accept confirm date items"""
type AcceptConfirmDateRequireAttentionItems {
  success: [RequireAttentionEditItems]
  failed: [RequireAttentionEditItems]
  totalSuccess: Int
  totalFailed: Int
  scgpRequireAttentionItemsError: [ScgpRequireAttentionItemsError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ScgpRequireAttentionItemsError!]!
}

input AcceptConfirmDateRequireAttentionInput {
  lines: [AcceptConfirmDateRequireAttentionItemsInput!]!
}

input AcceptConfirmDateRequireAttentionItemsInput {
  id: ID!
  requestDate: Date
  itemNo: String
}

"""Scgp User Register"""
type ScgpUserRegister {
  cognitoErrors: [ScgpUserManagementError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ScgpUserManagementError!]!
  user: ScgpUser
}

type ScgpUserManagementError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: ScgpUserManagementErrorCode!
}

"""An enumeration."""
enum ScgpUserManagementErrorCode {
  ALREADY_EXISTS
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
  INVALID_CREDENTIALS
  NOT_ALLOW
  LOCK
}

input ScgpUserRegisterInput {
  """ID of user group."""
  userParentGroupId: ID!

  """Email of user"""
  email: String!

  """First name of user."""
  firstName: String!

  """Last name of user."""
  lastName: String!

  """ID of user roles."""
  groupIds: [ID]!

  """Ad user."""
  adUser: String

  """Id of sale."""
  saleId: String

  """Id of employee."""
  employeeId: String

  """Business Unit of user."""
  scgpBuIds: [ID]

  """Sales Organization of user."""
  scgpSalesOrganizationIds: [ID]

  """Sales Group of user."""
  scgpSalesGroupIds: [ID]

  """Distribution Channel of user."""
  scgpDistributionChannelIds: [ID]

  """Division of user."""
  scgpDivisionIds: [ID]

  """Sales Office of user."""
  scgpSalesOfficeIds: [ID]

  """Type of customer."""
  customerType: ScgpCustomerType

  """Email of company."""
  companyEmail: String

  """ID of sold to."""
  soldToIds: [ID]

  """Display name of user."""
  displayName: String

  """sap id of user."""
  sapId: String
}

enum ScgpCustomerType {
  INTERNAL
  EXTERNAL
}

"""Scgp User Update"""
type ScgpUserUpdate {
  cognitoErrors: [ScgpUserManagementError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ScgpUserManagementError!]!
  user: ScgpUser
}

input ScgpUserUpdateInput {
  """ID of user group."""
  userParentGroupId: ID!

  """Email of user"""
  email: String!

  """First name of user."""
  firstName: String!

  """Last name of user."""
  lastName: String!

  """ID of user roles."""
  groupIds: [ID]!

  """Ad user."""
  adUser: String

  """Id of sale."""
  saleId: String

  """Id of employee."""
  employeeId: String

  """Business Unit of user."""
  scgpBuIds: [ID]

  """Sales Organization of user."""
  scgpSalesOrganizationIds: [ID]

  """Sales Group of user."""
  scgpSalesGroupIds: [ID]

  """Distribution Channel of user."""
  scgpDistributionChannelIds: [ID]

  """Division of user."""
  scgpDivisionIds: [ID]

  """Sales Office of user."""
  scgpSalesOfficeIds: [ID]

  """Type of customer."""
  customerType: ScgpCustomerType

  """Email of company."""
  companyEmail: String

  """ID of sold to."""
  soldToIds: [ID]

  """Display name of user."""
  displayName: String

  """sap id of user."""
  sapId: String

  """Set user active status"""
  isActive: Boolean!
}

"""Change Scgp User Status"""
type ChangeScgpUserStatus {
  cognitoErrors: [ScgpUserManagementError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ScgpUserManagementError!]!
  user: ScgpUser
}

"""Scgp User Send Mail Reset Password"""
type ScgpUserSendMailResetPassword {
  """message send mail reset password"""
  message: String
  userSendMailResetPasswordErrors: [ScgpUserManagementError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ScgpUserManagementError!]!
}

"""Scgp User Check Valid Token Reset Password"""
type ScgpUserCheckValidTokenResetPassword {
  """Email of reset password"""
  email: String

  """Token of reset password"""
  token: String
  userCheckValidTokenResetPasswordErrors: [ScgpUserManagementError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ScgpUserManagementError!]!
}

"""Scgp User Confirm Reset Password"""
type ScgpUserConfirmResetPassword {
  """message of confirm forgot password"""
  message: String
  userConfirmResetPassword: [ScgpUserManagementError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ScgpUserManagementError!]!
}

"""Create JWT token."""
type ScgpUserLogin {
  """JWT token, required to authenticate."""
  token: String

  """JWT refresh token, required to re-generate access token."""
  refreshToken: String

  """CSRF token required to re-generate access token."""
  csrfToken: String

  """A user instance."""
  user: User

  """Use login status message."""
  message: String

  """User login status."""
  status: ScgpUserStatus

  """User token for first login."""
  tempToken: String

  """Username."""
  username: String
  accountErrors: [AccountError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AccountError!]!
}

enum ScgpUserStatus {
  FORCE_CHANGE_PASSWORD
  FORCE_ADD_EMAIL
}

type AccountError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: AccountErrorCode!

  """A type of address that causes the error."""
  addressType: AddressTypeEnum
}

"""An enumeration."""
enum AccountErrorCode {
  ACTIVATE_OWN_ACCOUNT
  ACTIVATE_SUPERUSER_ACCOUNT
  DUPLICATED_INPUT_ITEM
  DEACTIVATE_OWN_ACCOUNT
  DEACTIVATE_SUPERUSER_ACCOUNT
  DELETE_NON_STAFF_USER
  DELETE_OWN_ACCOUNT
  DELETE_STAFF_ACCOUNT
  DELETE_SUPERUSER_ACCOUNT
  GRAPHQL_ERROR
  INACTIVE
  INVALID
  INVALID_PASSWORD
  LEFT_NOT_MANAGEABLE_PERMISSION
  INVALID_CREDENTIALS
  NOT_FOUND
  OUT_OF_SCOPE_USER
  OUT_OF_SCOPE_GROUP
  OUT_OF_SCOPE_PERMISSION
  PASSWORD_ENTIRELY_NUMERIC
  PASSWORD_TOO_COMMON
  PASSWORD_TOO_SHORT
  PASSWORD_TOO_SIMILAR
  REQUIRED
  UNIQUE
  JWT_SIGNATURE_EXPIRED
  JWT_INVALID_TOKEN
  JWT_DECODE_ERROR
  JWT_MISSING_TOKEN
  JWT_INVALID_CSRF_TOKEN
  CHANNEL_INACTIVE
  MISSING_CHANNEL_SLUG
  ACCOUNT_NOT_CONFIRMED
}

"""Create JWT token."""
type ScgpUserFirstLoginUpdate {
  """JWT token, required to authenticate."""
  token: String

  """JWT refresh token, required to re-generate access token."""
  refreshToken: String

  """CSRF token required to re-generate access token."""
  csrfToken: String

  """A user instance."""
  user: User

  """Use login status message."""
  message: String

  """User login status."""
  status: ScgpUserStatus

  """User token for first login."""
  tempToken: String

  """Username."""
  username: String
  accountErrors: [AccountError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AccountError!]!
}

"""Mapping scgp user data"""
type ScgpUserMappingData {
  status: String
  uploadErrors: [AccountError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AccountError!]!
}

"""Delete User Requires one of the following permissions: MANAGE_STAFF."""
type ScgpDeleteUser {
  status: String
  uploadErrors: [AccountError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AccountError!]!
}

"""Update cart."""
type ExportCartUpdate {
  cartErrors: [ScgpExportError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ScgpExportError!]!
  cart: ExportCart
}

input ExportCartUpdateInput {
  """
  A list of export cart items, each containing information about an item in the cart.
  """
  lines: [ExportCartItemInput!]!
}

input ExportCartItemInput {
  """ID of the pi product."""
  piProductId: ID!
  quantity: Float!
}

"""Create cart."""
type ExportCartCreate {
  cartErrors: [ScgpExportError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ScgpExportError!]!
  cart: ExportCart
}

input ExportCartCreateInput {
  """ID of the export pi."""
  piId: ID!

  """ID of the sold to."""
  soldToId: ID!

  """
  A list of export cart items, each containing information about an item in the cart.
  """
  lines: [ExportCartItemInput!]!
}

"""Delete customer cart items."""
type ExportCartItemsDelete {
  status: String
  exportCartErrors: [ScgpExportError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ScgpExportError!]!
  cart: ExportCartItem
}

"""Update draft cart."""
type ExportCartDraftUpdate {
  cartErrors: [ScgpExportError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ScgpExportError!]!
  cart: ExportCart
}

input ExportCartDraftUpdateInput {
  """
  list of export cart items, each containing information about an item in the cart.
  """
  lines: [ExportCartItemDraftInput!]!
}

input ExportCartItemDraftInput {
  """ID of the export cart."""
  id: ID!
  quantity: Float!
}

"""
Update export order Requires one of the following permissions: AUTHENTICATED_USER.
"""
type ExportOrderUpdate {
  success: Boolean
  sapOrderMessages: [SapOrderMessage]
  sapItemMessages: [SapItemMessage]
  iPlanMessages: [IPlanMessage]
  warningMessages: [WarningMessage]
  scgpExportError: [ScgpExportError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ScgpExportError!]!
  order: ExportOrderExtended
}

type WarningMessage {
  source: String
  order: String
  message: String
}

input ExportOrderUpdateInput {
  agency: AgencyInput
  orderHeader: ExportOrderHeaderUpdateInput
  status: ScgpExportOrderStatus! = draft

  """Fields to update order line"""
  lines: [ExportOrderLineInput]
}

input AgencyInput {
  """Order Type"""
  orderType: ScgExportOrderType

  """Sales Org"""
  salesOrganizationId: ID

  """Distribution Channel"""
  distributionChannelId: ID

  """Division"""
  divisionId: ID

  """Sale office"""
  salesOfficeId: ID

  """Sales Group"""
  salesGroupId: ID
}

enum ScgExportOrderType {
  ZOR
  ZFC1
  ZFC2
  CREATE
  CHANGE
}

input ExportOrderHeaderUpdateInput {
  """Ship To"""
  shipTo: String

  """Bill To"""
  billTo: String

  """PO Date"""
  poDate: Date

  """PO Number"""
  poNo: String

  """Request Date"""
  requestDate: Date

  """Ref. Pi No."""
  refPiNo: String

  """Usage"""
  usage: String

  """Unloading Point"""
  unloadingPoint: String

  """Place of Delivery"""
  placeOfDelivery: String

  """Port of Discharge"""
  portOfDischarge: String

  """Port of Loading"""
  portOfLoading: String

  """No. of Containers"""
  noOfContainers: String

  """UOM"""
  uom: String

  """G.W.UOM"""
  gwUom: String

  """ETD"""
  etd: String

  """ETA"""
  eta: String

  """D-L/C : Expiry Date"""
  dlcExpiryDate: Date

  """D-L/C No."""
  dlcNo: String

  """D-L/C : Latest Delivery Date"""
  dlcLatestDeliveryDate: Date

  """Description"""
  description: String

  """Payer"""
  payer: String

  """End Customer"""
  endCustomer: String

  """Payment Instruction"""
  paymentInstruction: String

  """Remark"""
  remark: String

  """Production information"""
  productionInformation: String

  """Internal Comments to Warehouse"""
  internalCommentToWarehouse: String

  """Incoterms 2"""
  incoterms2: String

  """Shipping Mark"""
  shippingMark: String
}

input ExportOrderLineInput {
  id: ID
  quantity: Float
  quantityUnit: String
  weightUnit: String
  weight: Float
  itemCatEo: String
  plant: String
  refPiNo: String
  requestDate: Date
  route: String
  deliveryTolUnder: Float
  deliveryTolOver: Float
  deliveryTolUnlimited: Boolean
  rollDiameter: String
  rollCoreDiameter: String
  rollQuantity: String
  rollPerPallet: String
  palletSize: String
  palletNo: String
  packageQuantity: String
  packingList: String
  shippingPoint: String
  remark: String
  shippingMark: String
  rejectReason: ScgExportRejectReason
  piProduct: ID
  itemNo: String
}

enum ScgExportRejectReason {
  YES
  NO
}

"""
Update export order line Requires one of the following permissions: AUTHENTICATED_USER.
"""
type ExportOrderLineUpdate {
  order: ExportOrderExtended
  scgpExportError: [ScgpExportError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ScgpExportError!]!
  status: Boolean
}

input ExportOrderLineUpdateInput {
  """ID of an order line to update."""
  id: ID!
  quantity: Float
  quantityUnit: String
  weightUnit: String
  weight: Float
  itemCatEo: String
  plant: String
  refPiNo: String
  requestDate: Date
  route: String
  deliveryTolUnder: Float
  deliveryTolOver: Float
  deliveryTolUnlimited: Boolean
  rollDiameter: String
  rollCoreDiameter: String
  rollQuantity: String
  rollPerPallet: String
  palletSize: String
  palletNo: String
  packageQuantity: String
  packingList: String
  shippingPoint: String
  remark: String
  shippingMark: String
  rejectReason: ScgExportRejectReason
}

"""
Update export order Requires one of the following permissions: AUTHENTICATED_USER.
"""
type ExportOrderLineUpdateAll {
  order: ExportOrderExtended
  scgpExportError: [ScgpExportError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ScgpExportError!]!
  status: Boolean
}

input ExportOrderLineUpdateAllInput {
  requestDate: Date!
}

"""
Create export order Requires one of the following permissions: AUTHENTICATED_USER.
"""
type ExportOrderCreate {
  scgpExportError: [ScgpExportError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ScgpExportError!]!
  order: ExportOrderExtended
}

input ExportOrderCreateInput {
  orderHeader: ExportOrderHeaderCreateInput!
  lines: [ExportOrderLineCreateInput!]!
}

input ExportOrderHeaderCreateInput {
  piId: ID!
}

input ExportOrderLineCreateInput {
  piProduct: ID!
  quantity: Float!
  cartItemId: ID
}

"""
delete order line Requires one of the following permissions: AUTHENTICATED_USER.
"""
type ExportOrderLinesDelete {
  scgpCustomerError: [ScgpExportError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ScgpExportError!]!
  status: Boolean
}

"""
add product to order Requires one of the following permissions: AUTHENTICATED_USER.
"""
type ExportOrderAddProducts {
  scgpCustomerError: [ScgpExportError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ScgpExportError!]!
  order: ExportOrderExtended
}

input ExportOrderLineAddProductInput {
  piProduct: ID!
  quantity: Float!
}

"""
add product to order Requires one of the following permissions: AUTHENTICATED_USER.
"""
type ChangeExportOrderAddProducts {
  result: [ExportOrderLine]
  scgpCustomerError: [ScgpExportError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ScgpExportError!]!
}

input ChangeExportOrderLineAddProductInput {
  piProduct: ID!
  quantity: Float!
  orderlinesId: [ID]!
}

"""receive EO data"""
type ReceiveEoData {
  scgpExportError: [ScgpExportError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ScgpExportError!]!
  order: ExportOrderExtended
}

input HeaderInput {
  soldTo: String
  shipTo: String
  poNo: String
  salesGroup: String
  docCurrency: String
  usage: String
  unloadingPoint: String
  incoterms: String
  placeOfDelivery: String
  paymentTerm: String
  contactPerson: String
  author: String
  billTo: String
  payer: String
  salesEmployee: String
  internalCommentToWarehouse: String
  remark: String
  paymentInstruction: String
  portOfDischarge: String
  noOfContainers: String
  shippingMark: String
  ETD: String
  ETA: String
  dlcNo: String
  dlcExpiryDate: String
  dlcLatestDeliveryDate: String
  description: String
  salesEmail: String
  cc: String
  endCustomer: String
  productInfomation: String
  uom: String
  gwUom: String
}

input InitialInput {
  rejectReason: String
  contractType: String
  orderType: String
  salesOrg: String
  distributionChannel: String
  division: String
  contract: String
  requestDeliveryDate: String
  createAndChangeType: String
  salesOffice: String
  eoNo: String
  changeType: String
  lotNo: String
}

input ItemInput {
  rejectReason: String
  materialCode: String
  orderQuantity: Float
  unit: String
  itemCatPi: String
  itemCatEo: String
  plant: String
  conditionGroup1: String
  route: String
  price: Float
  priceCurrency: String
  noOfRolls: Float
  rollDiameterInch: String
  rollCoreDiameterInch: String
  remark: String
  palletSize: String
  reamRollPerPallet: Float
  palletNo: String
  noOfPackage: String
  packingListText: String
  commissionPercent: String
  commission: String
  commissionCurrency: String
  eoItemNo: String
  refPiStock: String
}

"""duplicate order"""
type DuplicateOrder {
  scgpExportError: [ScgpExportError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ScgpExportError!]!
  order: ExportOrderExtended
}

"""call api sap route"""
type CallAPISapRoute {
  response: RouteType
  scgpExportError: [ScgpExportError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ScgpExportError!]!
}

type RouteType {
  piMessageId: String
  status: String
  reason: String
  routeList: [RouteListType]
}

type RouteListType {
  route: String
  routeDescription: String
}

"""Cancel order"""
type CancelExportOrder {
  scgpExportError: [ScgpExportError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ScgpExportError!]!
  order: ExportOrderExtended
}

"""
Download PDF order Requires one of the following permissions: AUTHENTICATED_USER.
"""
type DownloadPDFOrder {
  exportedFileBase64: String
  fileName: String
  scgpExportError: [ScgpExportError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ScgpExportError!]!
}

"""Make a copy of an order"""
type CopyOrder {
  newOrderId: ID
  scgpExportError: [ScgpExportError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ScgpExportError!]!
}

"""change parameter of export"""
type ChangeParameterOfExport {
  scgpExportError: [ScgpExportError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ScgpExportError!]!
  dropDownList: ChangeParameterIPlanType
}

"""Update inquiry method of export"""
type UpdateInquiryMethodExport {
  scgpExportError: [ScgpExportError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ScgpExportError!]!
  orderLine: ExportOrderLine
}

input UpdateInquiryMethodExportInput {
  inquiryMethod: InquiryMethodType! = Export
}

"""
Update order line Requires one of the following permissions: AUTHENTICATED_USER.
"""
type ExportOrderLineUpdateDraft {
  """Order lines"""
  orderLines: [ExportOrderLine]
  scgpExportError: [ScgpExportError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ScgpExportError!]!
  status: Boolean
}

input ExportOrderUpdateDraftInput {
  """Fields to update draft order line"""
  lines: [ExportOrderLineDraftInput]
}

input ExportOrderLineDraftInput {
  """ID of an order line to update."""
  id: ID!
  quantity: Float
  requestDate: Date
}

"""
add product to order Requires one of the following permissions: AUTHENTICATED_USER.
"""
type ExportAddProductToOrder {
  result: [ExportOrderLine]
  scgpCustomerError: [ScgpExportError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ScgpExportError!]!
}

"""Edit export order"""
type EditExportOrderMutation {
  success: Boolean
  iplanMessages: [IPlanYT65156Message]
  sapItemMessages: [SapItemMessage]
  sapOrderMessages: [SapOrderMessage]
  sapWarningMessages: [WarningMessage]
  scgpExportError: [ScgpExportError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ScgpExportError!]!
}

type IPlanYT65156Message {
  itemNo: String
  firstCode: String
  secondCode: String
  message: String
}

input EditExportOrderInput {
  soNo: String
  orderHeader: EditExportOrderHeaderInput
  orderItems: [EditOrderItemInput!]
}

input EditExportOrderHeaderInput {
  poNo: String

  """PO Date"""
  poDate: Date
  refPiNo: String
  requestDate: Date
  usage: String
  unloadingPoint: String
  placeOfDelivery: String
  portOfDischarge: String
  portOfLoading: String
  noOfContainers: String
  uom: String
  gwUom: String
  etd: Date
  eta: Date
  dlcExpiryDate: Date
  dlcNo: String
  dlcLatestDeliveryDate: Date
  description: String
  endCustomer: String
  shippingMark: String
  shipTo: String
  billTo: String
  payer: String
  paymentInstruction: String
  remark: String
  productionInformation: String
  internalCommentToWarehouse: String
}

input EditOrderItemInput {
  id: ID
  quantity: Float
  weightUnit: String
  itemCatEo: String
  plant: String
  refPiStock: String
  requestDate: Date
  route: String
  deliveryTolUnder: Float
  deliveryTolOver: Float
  deliveryTolUnlimited: Boolean
  conditionGroup1: String
  rollDiameter: String
  rollCoreDiameter: String
  rollQuantity: String
  rollPerPallet: String
  palletSize: String
  palletNo: String
  packageQuantity: String
  packingList: String
  shippingPoint: String
  remark: String
  inquiryMethod: InquiryMethodType
  shippingMark: String
}

"""cancel/delete order line"""
type CancelDeleteExportOrder {
  iPlanMessages: [IPlanMessage]
  sapOrderMessages: [SapOrderMessage]
  sapItemMessages: [SapItemMessage]
  scgpExportError: [ScgpExportError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ScgpExportError!]!
}

input ExportOrderReasonForRejectInput {
  reasonForReject: ChangeExportRejectReason
}

enum ChangeExportRejectReason {
  CANCEL_93
  DELETE
}

"""Undo Order Lines Export"""
type UndoOrderLinesExport {
  success: Boolean
  iPlanMessages: [IPlanMessage]
  sapItemMessages: [SapItemMessage]
  sapOrderMessages: [SapOrderMessage]
  scgpExportError: [ScgpExportError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ScgpExportError!]!
}

"""Export add new order line"""
type ExportChangeOrderAddNewOrderLine {
  success: Boolean
  iPlanMessages: [IPlanMessage]
  sapOrderMessages: [SapOrderMessage]
  sapItemMessages: [SapItemMessage]
  orderLines: [ExportOrderLine]
  checkoutErrors: [ScgpExportError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ScgpExportError!]!
}

input ExportAddNewOrderLineInput {
  """Fields to update order header"""
  orderHeader: ExportOrderHeaderFixedDataInput!

  """Fields to update order line"""
  line: [ExportAddNewItemsInput]!
}

input ExportOrderHeaderFixedDataInput {
  """PI No"""
  piNo: String!

  """EO No"""
  eoNo: String!

  """Sold to"""
  soldTo: String!

  """Bill to"""
  billTo: String!

  """Ship to"""
  shipTo: String!
}

input ExportAddNewItemsInput {
  id: ID
  quantity: Float
  quantityUnit: String
  weightUnit: String
  weight: Float
  itemCatEo: String
  plant: String
  refPiNo: String
  requestDate: Date
  route: String
  deliveryTolUnder: Float
  deliveryTolOver: Float
  deliveryTolUnlimited: Boolean
  rollDiameter: String
  rollCoreDiameter: String
  rollQuantity: String
  rollPerPallet: String
  palletSize: String
  palletNo: String
  packageQuantity: String
  packingList: String
  shippingPoint: String
  remark: String
  shippingMark: String
  rejectReason: ScgExportRejectReason

  """Material code"""
  materialCode: String!

  """Item no"""
  itemNo: String!
  inquiryMethod: String
}

"""
Delete an order line. Requires one of the following permissions: AUTHENTICATED_USER.
"""
type DeleteExportOrderLineDraft {
  success: Boolean
  checkoutErrors: [ScgpExportError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ScgpExportError!]!
}

"""Delete customer cart items."""
type CartItemsDelete {
  status: String
  customerCartErrors: [ScgpCustomerError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ScgpCustomerError!]!
  cart: CustomerCart
}

type ScgpCustomerError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: ScgpCustomerErrorCode!
}

"""An enumeration."""
enum ScgpCustomerErrorCode {
  ALREADY_EXISTS
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
  PRODUCT_GROUP_ERROR
}

"""Create a new cart."""
type CustomerCartCreate {
  cartErrors: [ScgpCustomerError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ScgpCustomerError!]!
  cart: CustomerCart
}

input CustomerCartCreateInput {
  """ID of the customer."""
  customerId: ID!

  """ID of the customer contract."""
  customerContractId: ID!

  """ID of the sold to."""
  soldToId: ID!

  """
  A list of cart items, each containing information about an item in the cart.
  """
  lines: [CustomerCartItemInput!]!
}

input CustomerCartItemInput {
  """ID of the customer product."""
  productId: ID!
  quantity: Float!

  """ID of the customer product variant."""
  variantId: ID

  """ID of the contract material id."""
  contractMaterialId: ID
}

"""Update cart."""
type CustomerCartUpdate {
  cartErrors: [ScgpCustomerError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ScgpCustomerError!]!
  cart: CustomerCart
}

input CustomerCartUpdateInput {
  """
  A list of cart items, each containing information about an item in the cart.
  """
  lines: [CustomerCartItemInput!]!
}

"""Update cart lines quantity."""
type CustomerCartLinesUpdateQuantity {
  cartErrors: [ScgpCustomerError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ScgpCustomerError!]!
  cart: CustomerCartLines
}

type CustomerCartLines {
  cartItems(sortBy: CustomerCartsSortingInput): [CustomerCartItem!]
}

input CustomerCartLinesUpdateQuantityInput {
  """
  A list of cart lines, each containing information about an item in the cart.
  """
  lines: [CustomerCartLineQuantityInput!]!
}

input CustomerCartLineQuantityInput {
  """ID of the cart line."""
  id: ID!
  quantity: Float!
  materialVariantId: ID
}

"""
Update customer order Requires one of the following permissions: AUTHENTICATED_USER.
"""
type CustomerOrderUpdate {
  success: Boolean
  sapOrderMessages: [SapOrderMessage]
  sapItemMessages: [SapItemMessage]
  iPlanMessages: [IPlanMessage]
  warningMessages: [WarningMessage]
  scgpCustomerError: [ScgpCustomerError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ScgpCustomerError!]!
  order: CustomerOrder
}

input CustomerOrderInformationUpdateInput {
  orderDate: Date
  orderNo: String
  requestDeliveryDate: Date
  shipTo: String
  billTo: String
  unloadingPoint: String
  remarkForInvoice: String
  remarkForLogistic: String
  confirm: Boolean
  internalCommentsToWarehouse: String
  internalCommentsToLogistic: String
}

"""
create a new order Requires one of the following permissions: AUTHENTICATED_USER.
"""
type CreateCustomerOrder {
  checkoutErrors: [ScgpCustomerError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ScgpCustomerError!]!
  order: CustomerOrder
}

input CreateCustomerOrderInput {
  orderInformation: CustomerOrderInformationInput!

  """Order lines"""
  lines: [CustomerOrderLineInput!]!
}

input CustomerOrderInformationInput {
  contractId: ID!
}

input CustomerOrderLineInput {
  contractProductId: ID!
  variantId: ID
  quantity: Float!
  cartItemId: ID!
}

"""
Update customer order lines Requires one of the following permissions: AUTHENTICATED_USER.
"""
type CustomerOrderLinesUpdate {
  scgpCustomerError: [ScgpCustomerError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ScgpCustomerError!]!
  order: CustomerOrder
}

input CustomerOrderLinesUpdateInput {
  requestDeliveryDate: Date
  applyAll: Boolean
  lines: [CustomerOrderLineUpdateInput!]
}

input CustomerOrderLineUpdateInput {
  """Id of order line"""
  id: ID!
  quantity: Float
  requestDeliveryDate: Date
}

"""
delete order line Requires one of the following permissions: AUTHENTICATED_USER.
"""
type CustomerOrderLinesDelete {
  scgpCustomerError: [ScgpCustomerError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ScgpCustomerError!]!
  status: Boolean
}

"""
add product to order Requires one of the following permissions: AUTHENTICATED_USER.
"""
type CustomerOrderAddProduct {
  scgpCustomerError: [ScgpCustomerError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ScgpCustomerError!]!
  order: CustomerOrder
}

"""
Update customer order Requires one of the following permissions: AUTHENTICATED_USER.
"""
type UpdateRequestDateOnIplan {
  status: Boolean
  scgpCustomerError: [ScgpCustomerError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ScgpCustomerError!]!
}

"""create a new order"""
type ContractOrderCreate {
  checkoutErrors: [ContractCheckoutError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ContractCheckoutError!]!
  order: TempOrder
}

input ContractOrderCreateInput {
  orderInformation: OrderInformationInput

  """
  A list of order lines, each containing information about an item in the order.
  """
  lines: [ContractOrderLineInput!]!
}

input OrderInformationInput {
  customerId: ID

  """date must be type yyyy-mm-dd"""
  poDate: Date
  poNumber: String

  """date must be type yyyy-mm-dd"""
  requestDate: Date
  contractId: ID
  orderType: String
  shipTo: String
  billTo: String
  customerGroup1Id: ID
  customerGroup2Id: ID
  customerGroup3Id: ID
  customerGroup4Id: ID
  internalCommentsToWarehouse: String
  internalCommentsToLogistic: String
  externalCommentsToCustomer: String
  productInformation: String
  shippingPoint: String
  route: String
  deliveryBlock: String
  incotermsId: ID
}

input ContractOrderLineInput {
  checkoutLineId: ID
  quantity: Float

  """date must be type yyyy-mm-dd"""
  requestDate: Date
  plant: String
  shipTo: String
  internalCommentsToWarehouse: String
  shippingMark: String
  materialNo: String
  unit: String
  productInformation: String
  variantId: ID
  overDeliveryTol: Float
  underDeliveryTol: Float
  weightUnit: String
  splitItems: [ContractOrderLineSplitInput]
  externalCommentsToCustomer: String
  internalCommentsToLogistic: String
  itemCategory: String
  shippingPoint: String
  route: String
  poNo: String
  poNoExternal: String
  deliveryTolUnlimited: Boolean
  paymentTerm: String
  weight: Float
  requestDateChangeReason: String
}

input ContractOrderLineSplitInput {
  id: ID!
  quantity: Int
  requestDate: Date
}

"""update order"""
type ContractOrderUpdate {
  success: Boolean
  sapOrderMessages: [SapOrderMessage]
  sapItemMessages: [SapItemMessage]
  iPlanMessages: [IPlanMessage]
  warningMessages: [WarningMessage]
  checkoutErrors: [ContractCheckoutError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ContractCheckoutError!]!
  order: TempOrder
}

input ContractOrderUpdateInput {
  orderInformation: OrderInformationInput

  """information about order organization data"""
  orderOrganizationData: OrderOrganizationalDataInput

  """
  A list of order lines, each containing information about an item in the order.
  """
  lines: [ContractOrderLineUpdateInput!]!

  """"""
  status: ScgOrderStatus
}

input OrderOrganizationalDataInput {
  saleOrganizationId: ID
  distributionChannelId: ID
  divisionId: ID
  saleOfficeId: ID
  saleGroupId: ID
}

input ContractOrderLineUpdateInput {
  checkoutLineId: ID
  quantity: Float

  """date must be type yyyy-mm-dd"""
  requestDate: Date
  plant: String
  shipTo: String
  internalCommentsToWarehouse: String
  shippingMark: String
  materialNo: String
  unit: String
  productInformation: String
  variantId: ID
  overDeliveryTol: Float
  underDeliveryTol: Float
  weightUnit: String
  splitItems: [ContractOrderLineSplitInput]
  externalCommentsToCustomer: String
  internalCommentsToLogistic: String
  itemCategory: String
  shippingPoint: String
  route: String
  poNo: String
  poNoExternal: String
  deliveryTolUnlimited: Boolean
  paymentTerm: String
  weight: Float
  requestDateChangeReason: String

  """id of order line"""
  id: ID!
  itemNo: String
}

"""delete order"""
type ContractOrderDelete {
  checkoutErrors: [ContractCheckoutError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ContractCheckoutError!]!
  order: TempOrder
}

"""delete order line"""
type ContractOrderLineDelete {
  checkoutErrors: [ContractCheckoutError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ContractCheckoutError!]!
  orderLine: TempOrderLine
}

"""delete order line"""
type ContractOrderLinesDelete {
  checkoutErrors: [ContractCheckoutError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ContractCheckoutError!]!
  orderLines: TempOrderLine
}

"""update order"""
type ContractOrderLinesUpdate {
  checkoutErrors: [ContractCheckoutError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ContractCheckoutError!]!
  order: TempOrder
}

input ContractOrderLinesUpdateInput {
  """date must be type yyyy-mm-dd"""
  requestDate: Date
  shipTo: String
  billTo: String
  externalCommentsToCustomer: String
  productInformation: String
  internalCommentsToWarehouse: String
  materialNo: String
  unit: String
  internalCommentsToLogistic: String
  shippingPoint: String
  route: String
}

"""update all order line"""
type ContractOrderLineALlUpdate {
  checkoutErrors: [ContractCheckoutError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ContractCheckoutError!]!
  orderline: [TempOrderLine]
}

"""cancel order line"""
type CancelRevertContractOrderLine {
  checkoutErrors: [ContractCheckoutError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ContractCheckoutError!]!
  orderline: [TempOrderLine]
}

enum OrderLineStatus {
  ENABLE
  CANCEL
  DELETE
}

"""update order line"""
type UpdateContractOrderLine {
  checkoutErrors: [ContractCheckoutError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ContractCheckoutError!]!
  orderline: TempOrderLine
}

"""update order line"""
type UpdateAtpCtpContractOrderLine {
  status: Boolean
  checkoutErrors: [ContractCheckoutError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ContractCheckoutError!]!
}

input UpdateAtpCtpContractOrderLineInput {
  id: Int!
  quantity: Float
  confirmedDate: Date
  plant: String
  atpCtpStatus: ScgOrderlineAtpCtpStatus
  atpCtp: String
  atpCtpDetail: String
  block: String
  run: String
}

enum ScgOrderlineAtpCtpStatus {
  ACCEPT
  ROLLBACK
}

"""finish_order"""
type FinishOrder {
  status: String
  finishOrder: [ContractCheckoutError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ContractCheckoutError!]!
}

"""add products to order"""
type AddProductsToDomesticOrder {
  orderLines: [TempOrderLine]
  checkoutErrors: [ContractCheckoutError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ContractCheckoutError!]!
  order: TempOrder
}

input DomesticOrderLineAddProductInput {
  contractMaterialId: ID!
  materialVariantId: ID
  quantity: Float!
}

"""add products to order"""
type DomesticAddProductToOrder {
  orderLines: [TempOrderLine]
  checkoutErrors: [ContractCheckoutError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ContractCheckoutError!]!
  order: TempOrder
}

input AddProductToOrderInput {
  contractMaterialId: ID!
  materialVariantId: ID
  quantity: Float!
}

"""Create a new split item for order line"""
type AddSplitOrderLineItem {
  status: Boolean
  sapOrderMessages: [SapOrderMessage]
  sapItemMessages: [SapItemMessage]
  checkoutErrors: [ContractCheckoutError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ContractCheckoutError!]!
}

input AddSplitOrderLineItemInput {
  id: Int
  itemNo: String
  quantity: Float
  requestDate: Date
}

"""Delete a split item from an order line"""
type DeleteSplitOrderLineItem {
  originalItem: TempOrderLine
  checkoutErrors: [ContractCheckoutError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ContractCheckoutError!]!
}

"""Download PDF order"""
type PrintOrder {
  exportedFileBase64: String
  fileName: String
  errors: [ContractCheckoutError!]!
}

"""
Download PDF order Requires one of the following permissions: AUTHENTICATED_USER.
"""
type PrintPDFOrderConfirmation {
  exportedFileBase64: String
  fileName: String
  scgpExportError: [ContractCheckoutError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ContractCheckoutError!]!
}

input SendEmailOrderInput {
  soNo: String
  contractNo: String
  createdDate: String
  poNo: String
  paymentTermDesc: String
  contractName: String
  itemNo: [String]
  orderLines: [SendEmailOrderLineInput]
  shipTo: String
  saleOrg: String
  isNotRef: Boolean
}

input SendEmailOrderLineInput {
  itemNo: String
  remark: String
  materialDescription: String
  orderQty: String
  confirmQty: String
  nonConfirmQty: String
  saleUnit: String
  firstDeliveryDate: String
  soldTo: String
  status: String
  iplanConfirmDate: String
  materialCode: String
}

"""Check remaining quantity of item in contract"""
type CheckRemainingItemQuantity {
  remainQuantity: Float
  rawResponse: String
  checkoutErrors: [ContractCheckoutError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ContractCheckoutError!]!
}

"""
Send Order Email Requires one of the following permissions: AUTHENTICATED_USER.
"""
type SendOrderEmail {
  status: String
  scgpExportError: [ContractCheckoutError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ContractCheckoutError!]!
}

"""
Download PDF order Requires one of the following permissions: AUTHENTICATED_USER.
"""
type PrintPendingOrderReport {
  exportedFileBase64: String
  fileName: String
  scgpExportError: [ContractCheckoutError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ContractCheckoutError!]!
}

input SAPPendingOrderReportInput {
  soldTo: [String]!
  saleOrg: [String]!
  shipTo: String
  materialNoMaterialDescription: [String]
  productGroup: String
  createDate: SAPPendingOrderReportDateInput
  requestDeliveryDate: SAPPendingOrderReportDateInput
  poNo: String
  soNo: String
  transactions: [String]
  productGroups: String
  reportFormat: String
  soldToSort: [SoldToSortInput]
  bu: String
  isOrderTracking: Boolean
  sourceOfApp: String
}

"""
Send Email Pending Order Requires one of the following permissions: AUTHENTICATED_USER.
"""
type SendEmailPendingOrder {
  status: String
  emailError: [ContractCheckoutError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ContractCheckoutError!]!
}

"""Download Excel pending order"""
type DownloadPendingOrderReportExcel {
  exportedFileBase64: String
  fileName: String
  scgCheckoutError: [ContractCheckoutError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ContractCheckoutError!]!
}

"""Cancel Delete Order Lines"""
type CancelDeleteOrderLines {
  status: Boolean
  iPlanMessages: [IPlanMessage]
  sapOrderMessages: [SapOrderMessage]
  sapItemMessages: [SapItemMessage]
  scgCheckoutError: [ContractCheckoutError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ContractCheckoutError!]!
}

input CancelDeleteOrderLinesInput {
  itemNo: String!
  status: String
}

"""update order"""
type ChangeOrderUpdate {
  success: Boolean
  sapOrderMessages: [SapOrderMessage]
  sapItemMessages: [SapItemMessage]
  iPlanMessages: [IPlanMessage]
  sapWarningMessages: [WarningMessage]
  iplanConfirmFailedErrors: [Error]
  checkoutErrors: [ContractCheckoutError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ContractCheckoutError!]!
  order: TempOrder
}

"""Represents an error in the input of a mutation."""
type Error {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String
}

input ChangeOrderEditInput {
  header: ChangeOrderHeaderInput
  itemDetails: [ChangeOrderItemDetailsInput]

  """"""
  status: ScgOrderStatus
}

input ChangeOrderHeaderInput {
  fixedData: ChangeOrderHeaderFixedDataInput
  partner: ChangeOrderHeaderPartnerInput
  additionalData: ChangeOrderHeaderAdditionalDataInput
}

input ChangeOrderHeaderFixedDataInput {
  soNo: String
  poNo: String
  contractNo: String
  shipToCode: String
  soldToCode: String
  billToCode: String
}

input ChangeOrderHeaderPartnerInput {
  shipTo: String
  billTo: String
  customerGroup1: ID
  customerGroup2: ID
  customerGroup3: ID
  customerGroup4: ID

  """dd/mm/YYYY"""
  poDate: String
  poNo: String
  incoterms1: ID
}

input ChangeOrderHeaderAdditionalDataInput {
  internalCommentsToWarehouse: String
  internalCommentsToLogistic: String
  externalCommentsToCustomer: String
  productionInformation: String
}

input ChangeOrderItemDetailsInput {
  itemNo: String
  orderInformation: ChangeOrderItemDetailsOrderInformationInput
  iplanDetails: ChangeOrderItemDetailsIplanDetailsInput
  additionalData: ChangeOrderItemDetailsAdditionalDataInput

  """Check if the order line is newly created"""
  new: Boolean
  cancelItem: CancelItem

  """input item_no of order line original"""
  splitFrom: String
}

input ChangeOrderItemDetailsOrderInformationInput {
  materialCode: String

  """input format DD/MM/YYYY"""
  requestDate: String
  reasonForChangeRequestDate: ReasonForChangeRequestDateEnum
  quantity: Float
  unit: String
  weight: Float
  weightUnit: WeightUnitEnum
  plant: String
  itemCategory: String
  shippingPoint: String

  """Input code"""
  route: String
  poNo: String
  deliveryTolerance: DeliveryTolerance
}

enum ReasonForChangeRequestDateEnum {
  C3
  C4
  X
}

enum WeightUnitEnum {
  TON
  KG
}

input DeliveryTolerance {
  under: Int
  over: Int
  unlimited: DeliveryUnlimited
}

enum DeliveryUnlimited {
  X
  Y
}

input ChangeOrderItemDetailsIplanDetailsInput {
  inputParameter: InquiryMethodType
  consignmentLocation: String
}

input ChangeOrderItemDetailsAdditionalDataInput {
  """Input code"""
  shipToParty: String
  internalCommentsToWarehouse: String
  externalCommentsToCustomer: String
  shippingMark: String
}

enum CancelItem {
  CANCEL_93
  DELETE
}

"""Add new order line"""
type ChangeOrderAddNewOrderLine {
  success: Boolean
  isRedirectPreview: Boolean
  iPlanMessages: [IPlanMessage]
  sapOrderMessages: [SapOrderMessage]
  sapItemMessages: [SapItemMessage]
  iplanConfirmFailedErrors: [Error]
  checkoutErrors: [ContractCheckoutError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ContractCheckoutError!]!
}

input ChangeOrderAddNewOrderLineInput {
  orderHeaders: ChangeOrderHeaderFixedDataInput
  listNewItems: [ChangeOrderAddNewItemItemDetails]
}

input ChangeOrderAddNewItemItemDetails {
  itemNo: String!
  orderInformation: ChangeOrderItemDetailsOrderInformationInput
  additionalData: ChangeOrderItemDetailsAdditionalDataInput
  refDocIt: String
}

"""Cancel Delete Order Lines"""
type UndoOrderLines {
  success: Boolean
  iPlanMessages: [IPlanMessage]
  sapOrderMessages: [SapOrderMessage]
  sapItemMessages: [SapItemMessage]
  scgCheckoutError: [ContractCheckoutError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ContractCheckoutError!]!
}

"""Create a new checkout."""
type ContractCheckoutCreate {
  checkoutErrors: [ContractCheckoutError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ContractCheckoutError!]!
  checkout: ContractCheckout
}

input ContractCheckoutCreateInput {
  """ID of the contract."""
  contractId: ID!

  """ID of the contract."""
  userId: ID!

  """
  A list of checkout lines, each containing information about an item in the checkout.
  """
  lines: [ContractCheckoutLineInput!]!
}

input ContractCheckoutLineInput {
  """ID of the contract."""
  productId: ID!

  """The number of items purchased."""
  quantity: Float!

  """ID of the contract material"""
  contractMaterialId: ID

  """ID of the product variant."""
  variantId: ID

  """price positive"""
  price: PositiveDecimal
}

"""Create a new checkout."""
type ContractCheckoutUpdate {
  checkoutErrors: [ContractCheckoutError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ContractCheckoutError!]!
  checkout: ContractCheckout
}

input ContractCheckoutUpdateInput {
  """ID of the contract."""
  contractId: ID

  """ID of the contract."""
  userId: ID

  """
  A list of checkout lines, each containing information about an item in the checkout.
  """
  lines: [ContractCheckoutLineUpdateInput!]!
}

input ContractCheckoutLineUpdateInput {
  """ID of the contract."""
  id: ID!

  """ID of the contract."""
  productId: ID!

  """The number of items purchased."""
  quantity: Int!

  """ID of the product variant."""
  variantId: ID!

  """price positive"""
  price: PositiveDecimal

  """ID of the product variant."""
  selected: Boolean!
}

"""Delete checkout lines."""
type ContractCheckoutLinesDeleteDelete {
  status: String
  checkoutErrors: [ContractCheckoutError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ContractCheckoutError!]!
  checkout: ContractCheckout
}

"""Delete checkout lines."""
type DeleteNewlyAddedOrderLineDelete {
  status: String
  checkoutErrors: [ContractCheckoutError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ContractCheckoutError!]!
  checkout: ContractCheckout
}

"""Delete checkout lines."""
type DeleteAndSyncOrderLine {
  status: String
  checkoutErrors: [ContractCheckoutError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ContractCheckoutError!]!
  checkout: ContractCheckout
}

"""Recheck if Contract Expired/Complete/Invalid"""
type CheckContractExpiredCompleteInvalid {
  """Contract is invalid or not"""
  isInvalid: Boolean
  checkoutErrors: [ContractCheckoutError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ContractCheckoutError!]!
}

"""generate token from cognito"""
type GenerateTokenFromCognito {
  """JWT token, required to authenticate."""
  token: String

  """JWT refresh token, required to re-generate access token."""
  refreshToken: String

  """CSRF token required to re-generate access token."""
  csrfToken: String

  """A user instance."""
  user: User
  cognitoErrors: [CognitoError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [CognitoError!]!
}

type CognitoError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: CognitoErrorCode!
}

"""An enumeration."""
enum CognitoErrorCode {
  ALREADY_EXISTS
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
  INVALID_CREDENTIALS
}

"""
Creates a new webhook subscription. Requires one of the following permissions: MANAGE_APPS, AUTHENTICATED_APP.
"""
type WebhookCreate {
  webhookErrors: [WebhookError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [WebhookError!]!
  webhook: Webhook
}

type WebhookError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: WebhookErrorCode!
}

"""An enumeration."""
enum WebhookErrorCode {
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

input WebhookCreateInput {
  """The name of the webhook."""
  name: String

  """The url to receive the payload."""
  targetUrl: String

  """
  The events that webhook wants to subscribe. 
  
  DEPRECATED: this field will be removed in Saleor 4.0. Use `asyncEvents` or `syncEvents` instead.
  """
  events: [WebhookEventTypeEnum!]

  """The asynchronous events that webhook wants to subscribe."""
  asyncEvents: [WebhookEventTypeAsyncEnum!]

  """The synchronous events that webhook wants to subscribe."""
  syncEvents: [WebhookEventTypeSyncEnum!]

  """ID of the app to which webhook belongs."""
  app: ID

  """Determine if webhook will be set active or not."""
  isActive: Boolean

  """The secret key used to create a hash signature with each payload."""
  secretKey: String

  """
  Added in Saleor 3.2. Subscription query used to define a webhook payload. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  query: String
}

"""
Deletes a webhook subscription. Requires one of the following permissions: MANAGE_APPS, AUTHENTICATED_APP.
"""
type WebhookDelete {
  webhookErrors: [WebhookError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [WebhookError!]!
  webhook: Webhook
}

"""
Updates a webhook subscription. Requires one of the following permissions: MANAGE_APPS.
"""
type WebhookUpdate {
  webhookErrors: [WebhookError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [WebhookError!]!
  webhook: Webhook
}

input WebhookUpdateInput {
  """The new name of the webhook."""
  name: String

  """The url to receive the payload."""
  targetUrl: String

  """
  The events that webhook wants to subscribe. 
  
  DEPRECATED: this field will be removed in Saleor 4.0. Use `asyncEvents` or `syncEvents` instead.
  """
  events: [WebhookEventTypeEnum!]

  """The asynchronous events that webhook wants to subscribe."""
  asyncEvents: [WebhookEventTypeAsyncEnum!]

  """The synchronous events that webhook wants to subscribe."""
  syncEvents: [WebhookEventTypeSyncEnum!]

  """ID of the app to which webhook belongs."""
  app: ID

  """Determine if webhook will be set active or not."""
  isActive: Boolean

  """Use to create a hash signature with each payload."""
  secretKey: String

  """
  Added in Saleor 3.2. Subscription query used to define a webhook payload. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  query: String
}

"""
Retries event delivery. Requires one of the following permissions: MANAGE_APPS.
"""
type EventDeliveryRetry {
  """Event delivery."""
  delivery: EventDelivery
  errors: [WebhookError!]!
}

"""
Creates new warehouse. Requires one of the following permissions: MANAGE_PRODUCTS.
"""
type WarehouseCreate {
  warehouseErrors: [WarehouseError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [WarehouseError!]!
  warehouse: Warehouse
}

type WarehouseError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: WarehouseErrorCode!
}

"""An enumeration."""
enum WarehouseErrorCode {
  ALREADY_EXISTS
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

input WarehouseCreateInput {
  """Warehouse slug."""
  slug: String

  """The email address of the warehouse."""
  email: String

  """Warehouse name."""
  name: String!

  """Address of the warehouse."""
  address: AddressInput!

  """Shipping zones supported by the warehouse."""
  shippingZones: [ID!]
}

"""
Updates given warehouse. Requires one of the following permissions: MANAGE_PRODUCTS.
"""
type WarehouseUpdate {
  warehouseErrors: [WarehouseError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [WarehouseError!]!
  warehouse: Warehouse
}

input WarehouseUpdateInput {
  """Warehouse slug."""
  slug: String

  """The email address of the warehouse."""
  email: String

  """Warehouse name."""
  name: String

  """Address of the warehouse."""
  address: AddressInput

  """
  Added in Saleor 3.1. Click and collect options: local, all or disabled. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  clickAndCollectOption: WarehouseClickAndCollectOptionEnum

  """
  Added in Saleor 3.1. Visibility of warehouse stocks. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  isPrivate: Boolean
}

"""
Deletes selected warehouse. Requires one of the following permissions: MANAGE_PRODUCTS.
"""
type WarehouseDelete {
  warehouseErrors: [WarehouseError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [WarehouseError!]!
  warehouse: Warehouse
}

"""
Add shipping zone to given warehouse. Requires one of the following permissions: MANAGE_PRODUCTS.
"""
type WarehouseShippingZoneAssign {
  warehouseErrors: [WarehouseError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [WarehouseError!]!
  warehouse: Warehouse
}

"""
Remove shipping zone from given warehouse. Requires one of the following permissions: MANAGE_PRODUCTS.
"""
type WarehouseShippingZoneUnassign {
  warehouseErrors: [WarehouseError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [WarehouseError!]!
  warehouse: Warehouse
}

"""
Creates a new staff notification recipient. Requires one of the following permissions: MANAGE_SETTINGS.
"""
type StaffNotificationRecipientCreate {
  shopErrors: [ShopError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ShopError!]!
  staffNotificationRecipient: StaffNotificationRecipient
}

type ShopError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: ShopErrorCode!
}

"""An enumeration."""
enum ShopErrorCode {
  ALREADY_EXISTS
  CANNOT_FETCH_TAX_RATES
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

input StaffNotificationRecipientInput {
  """The ID of the user subscribed to email notifications.."""
  user: ID

  """Email address of a user subscribed to email notifications."""
  email: String

  """Determines if a notification active."""
  active: Boolean
}

"""
Updates a staff notification recipient. Requires one of the following permissions: MANAGE_SETTINGS.
"""
type StaffNotificationRecipientUpdate {
  shopErrors: [ShopError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ShopError!]!
  staffNotificationRecipient: StaffNotificationRecipient
}

"""
Delete staff notification recipient. Requires one of the following permissions: MANAGE_SETTINGS.
"""
type StaffNotificationRecipientDelete {
  shopErrors: [ShopError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ShopError!]!
  staffNotificationRecipient: StaffNotificationRecipient
}

"""
Updates site domain of the shop. Requires one of the following permissions: MANAGE_SETTINGS.
"""
type ShopDomainUpdate {
  """Updated shop."""
  shop: Shop
  shopErrors: [ShopError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ShopError!]!
}

input SiteDomainInput {
  """Domain name for shop."""
  domain: String

  """Shop site name."""
  name: String
}

"""
Updates shop settings. Requires one of the following permissions: MANAGE_SETTINGS.
"""
type ShopSettingsUpdate {
  """Updated shop."""
  shop: Shop
  shopErrors: [ShopError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ShopError!]!
}

input ShopSettingsInput {
  """Header text."""
  headerText: String

  """SEO description."""
  description: String

  """Include taxes in prices."""
  includeTaxesInPrices: Boolean

  """Display prices with tax in store."""
  displayGrossPrices: Boolean

  """Charge taxes on shipping."""
  chargeTaxesOnShipping: Boolean

  """Enable inventory tracking."""
  trackInventoryByDefault: Boolean

  """Default weight unit."""
  defaultWeightUnit: WeightUnitsEnum

  """Enable automatic fulfillment for all digital products."""
  automaticFulfillmentDigitalProducts: Boolean

  """
  Added in Saleor 3.1. Enable automatic approval of all new fulfillments.
  """
  fulfillmentAutoApprove: Boolean

  """
  Added in Saleor 3.1. Enable ability to approve fulfillments which are unpaid.
  """
  fulfillmentAllowUnpaid: Boolean

  """Default number of max downloads per digital content URL."""
  defaultDigitalMaxDownloads: Int

  """Default number of days which digital content URL will be valid."""
  defaultDigitalUrlValidDays: Int

  """Default email sender's name."""
  defaultMailSenderName: String

  """Default email sender's address."""
  defaultMailSenderAddress: String

  """URL of a view where customers can set their password."""
  customerSetPasswordUrl: String

  """
  Added in Saleor 3.1. Default number of minutes stock will be reserved for anonymous checkout. Enter 0 or null to disable.
  """
  reserveStockDurationAnonymousUser: Int

  """
  Added in Saleor 3.1. Default number of minutes stock will be reserved for authenticated checkout. Enter 0 or null to disable.
  """
  reserveStockDurationAuthenticatedUser: Int

  """
  Added in Saleor 3.1. Default number of maximum line quantity in single checkout. Minimum possible value is 1, default value is 50. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  limitQuantityPerCheckout: Int
}

"""
Fetch tax rates. Requires one of the following permissions: MANAGE_SETTINGS.
"""
type ShopFetchTaxRates {
  """Updated shop."""
  shop: Shop
  shopErrors: [ShopError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ShopError!]!
}

"""
Creates/updates translations for shop settings. Requires one of the following permissions: MANAGE_TRANSLATIONS.
"""
type ShopSettingsTranslate {
  """Updated shop settings."""
  shop: Shop
  translationErrors: [TranslationError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [TranslationError!]!
}

type TranslationError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: TranslationErrorCode!
}

"""An enumeration."""
enum TranslationErrorCode {
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
}

input ShopSettingsTranslationInput {
  headerText: String
  description: String
}

"""
Update the shop's address. If the `null` value is passed, the currently selected address will be deleted. Requires one of the following permissions: MANAGE_SETTINGS.
"""
type ShopAddressUpdate {
  """Updated shop."""
  shop: Shop
  shopErrors: [ShopError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ShopError!]!
}

"""
Update shop order settings. Requires one of the following permissions: MANAGE_ORDERS.
"""
type OrderSettingsUpdate {
  """Order settings."""
  orderSettings: OrderSettings
  orderSettingsErrors: [OrderSettingsError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [OrderSettingsError!]!
}

type OrderSettingsError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: OrderSettingsErrorCode!
}

"""An enumeration."""
enum OrderSettingsErrorCode {
  INVALID
}

input OrderSettingsUpdateInput {
  """
  When disabled, all new orders from checkout will be marked as unconfirmed. When enabled orders from checkout will become unfulfilled immediately.
  """
  automaticallyConfirmAllNewOrders: Boolean

  """
  When enabled, all non-shippable gift card orders will be fulfilled automatically.
  """
  automaticallyFulfillNonShippableGiftCard: Boolean
}

"""
Update gift card settings. Requires one of the following permissions: MANAGE_GIFT_CARD.
"""
type GiftCardSettingsUpdate {
  """Gift card settings."""
  giftCardSettings: GiftCardSettings
  errors: [GiftCardSettingsError!]!
}

type GiftCardSettingsError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: GiftCardSettingsErrorCode!
}

"""An enumeration."""
enum GiftCardSettingsErrorCode {
  INVALID
  REQUIRED
  GRAPHQL_ERROR
}

input GiftCardSettingsUpdateInput {
  """Defines gift card default expiry settings."""
  expiryType: GiftCardSettingsExpiryTypeEnum

  """Defines gift card expiry period."""
  expiryPeriod: TimePeriodInputType
}

input TimePeriodInputType {
  """The length of the period."""
  amount: Int!

  """The type of the period."""
  type: TimePeriodTypeEnum!
}

"""
Manage shipping method's availability in channels. Requires one of the following permissions: MANAGE_SHIPPING.
"""
type ShippingMethodChannelListingUpdate {
  """An updated shipping method instance."""
  shippingMethod: ShippingMethodType
  shippingErrors: [ShippingError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ShippingError!]!
}

type ShippingError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: ShippingErrorCode!

  """List of warehouse IDs which causes the error."""
  warehouses: [ID!]

  """List of channels IDs which causes the error."""
  channels: [ID!]
}

"""An enumeration."""
enum ShippingErrorCode {
  ALREADY_EXISTS
  GRAPHQL_ERROR
  INVALID
  MAX_LESS_THAN_MIN
  NOT_FOUND
  REQUIRED
  UNIQUE
  DUPLICATED_INPUT_ITEM
}

input ShippingMethodChannelListingInput {
  """List of channels to which the shipping method should be assigned."""
  addChannels: [ShippingMethodChannelListingAddInput!]

  """List of channels from which the shipping method should be unassigned."""
  removeChannels: [ID!]
}

input ShippingMethodChannelListingAddInput {
  """ID of a channel."""
  channelId: ID!

  """Shipping price of the shipping method in this channel."""
  price: PositiveDecimal

  """Minimum order price to use this shipping method."""
  minimumOrderPrice: PositiveDecimal

  """Maximum order price to use this shipping method."""
  maximumOrderPrice: PositiveDecimal
}

"""
Creates a new shipping price. Requires one of the following permissions: MANAGE_SHIPPING.
"""
type ShippingPriceCreate {
  """A shipping zone to which the shipping method belongs."""
  shippingZone: ShippingZone
  shippingMethod: ShippingMethodType
  shippingErrors: [ShippingError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ShippingError!]!
}

input ShippingPriceInput {
  """Name of the shipping method."""
  name: String

  """Shipping method description."""
  description: JSONString

  """Minimum order weight to use this shipping method."""
  minimumOrderWeight: WeightScalar

  """Maximum order weight to use this shipping method."""
  maximumOrderWeight: WeightScalar

  """Maximum number of days for delivery."""
  maximumDeliveryDays: Int

  """Minimal number of days for delivery."""
  minimumDeliveryDays: Int

  """Shipping type: price or weight based."""
  type: ShippingMethodTypeEnum

  """Shipping zone this method belongs to."""
  shippingZone: ID

  """Postal code rules to add."""
  addPostalCodeRules: [ShippingPostalCodeRulesCreateInputRange!]

  """Postal code rules to delete."""
  deletePostalCodeRules: [ID!]

  """Inclusion type for currently assigned postal code rules."""
  inclusionType: PostalCodeRuleInclusionTypeEnum
}

scalar WeightScalar

input ShippingPostalCodeRulesCreateInputRange {
  """Start range of the postal code."""
  start: String!

  """End range of the postal code."""
  end: String
}

"""
Deletes a shipping price. Requires one of the following permissions: MANAGE_SHIPPING.
"""
type ShippingPriceDelete {
  """A shipping method to delete."""
  shippingMethod: ShippingMethodType

  """A shipping zone to which the shipping method belongs."""
  shippingZone: ShippingZone
  shippingErrors: [ShippingError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ShippingError!]!
}

"""
Deletes shipping prices. Requires one of the following permissions: MANAGE_SHIPPING.
"""
type ShippingPriceBulkDelete {
  """Returns how many objects were affected."""
  count: Int!
  shippingErrors: [ShippingError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ShippingError!]!
}

"""
Updates a new shipping price. Requires one of the following permissions: MANAGE_SHIPPING.
"""
type ShippingPriceUpdate {
  """A shipping zone to which the shipping method belongs."""
  shippingZone: ShippingZone
  shippingMethod: ShippingMethodType
  shippingErrors: [ShippingError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ShippingError!]!
}

"""
Creates/updates translations for a shipping method. Requires one of the following permissions: MANAGE_TRANSLATIONS.
"""
type ShippingPriceTranslate {
  translationErrors: [TranslationError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [TranslationError!]!
  shippingMethod: ShippingMethodType
}

input ShippingPriceTranslationInput {
  name: String

  """Translated shipping method description (JSON)."""
  description: JSONString
}

"""
Exclude products from shipping price. Requires one of the following permissions: MANAGE_SHIPPING.
"""
type ShippingPriceExcludeProducts {
  """A shipping method with new list of excluded products."""
  shippingMethod: ShippingMethodType
  shippingErrors: [ShippingError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ShippingError!]!
}

input ShippingPriceExcludeProductsInput {
  """List of products which will be excluded."""
  products: [ID!]!
}

"""
Remove product from excluded list for shipping price. Requires one of the following permissions: MANAGE_SHIPPING.
"""
type ShippingPriceRemoveProductFromExclude {
  """A shipping method with new list of excluded products."""
  shippingMethod: ShippingMethodType
  shippingErrors: [ShippingError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ShippingError!]!
}

"""
Creates a new shipping zone. Requires one of the following permissions: MANAGE_SHIPPING.
"""
type ShippingZoneCreate {
  shippingErrors: [ShippingError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ShippingError!]!
  shippingZone: ShippingZone
}

input ShippingZoneCreateInput {
  """Shipping zone's name. Visible only to the staff."""
  name: String

  """Description of the shipping zone."""
  description: String

  """List of countries in this shipping zone."""
  countries: [String!]

  """
  Default shipping zone will be used for countries not covered by other zones.
  """
  default: Boolean

  """List of warehouses to assign to a shipping zone"""
  addWarehouses: [ID!]

  """List of channels to assign to the shipping zone."""
  addChannels: [ID!]
}

"""
Deletes a shipping zone. Requires one of the following permissions: MANAGE_SHIPPING.
"""
type ShippingZoneDelete {
  shippingErrors: [ShippingError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ShippingError!]!
  shippingZone: ShippingZone
}

"""
Deletes shipping zones. Requires one of the following permissions: MANAGE_SHIPPING.
"""
type ShippingZoneBulkDelete {
  """Returns how many objects were affected."""
  count: Int!
  shippingErrors: [ShippingError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ShippingError!]!
}

"""
Updates a new shipping zone. Requires one of the following permissions: MANAGE_SHIPPING.
"""
type ShippingZoneUpdate {
  shippingErrors: [ShippingError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ShippingError!]!
  shippingZone: ShippingZone
}

input ShippingZoneUpdateInput {
  """Shipping zone's name. Visible only to the staff."""
  name: String

  """Description of the shipping zone."""
  description: String

  """List of countries in this shipping zone."""
  countries: [String!]

  """
  Default shipping zone will be used for countries not covered by other zones.
  """
  default: Boolean

  """List of warehouses to assign to a shipping zone"""
  addWarehouses: [ID!]

  """List of channels to assign to the shipping zone."""
  addChannels: [ID!]

  """List of warehouses to unassign from a shipping zone"""
  removeWarehouses: [ID!]

  """List of channels to unassign from the shipping zone."""
  removeChannels: [ID!]
}

"""
Assign attributes to a given product type. Requires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
"""
type ProductAttributeAssign {
  """The updated product type."""
  productType: ProductType
  productErrors: [ProductError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ProductError!]!
}

type ProductError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: ProductErrorCode!

  """List of attributes IDs which causes the error."""
  attributes: [ID!]

  """List of attribute values IDs which causes the error."""
  values: [ID!]
}

"""An enumeration."""
enum ProductErrorCode {
  ALREADY_EXISTS
  ATTRIBUTE_ALREADY_ASSIGNED
  ATTRIBUTE_CANNOT_BE_ASSIGNED
  ATTRIBUTE_VARIANTS_DISABLED
  MEDIA_ALREADY_ASSIGNED
  DUPLICATED_INPUT_ITEM
  GRAPHQL_ERROR
  INVALID
  PRODUCT_WITHOUT_CATEGORY
  NOT_PRODUCTS_IMAGE
  NOT_PRODUCTS_VARIANT
  NOT_FOUND
  REQUIRED
  UNIQUE
  VARIANT_NO_DIGITAL_CONTENT
  CANNOT_MANAGE_PRODUCT_WITHOUT_VARIANT
  PRODUCT_NOT_ASSIGNED_TO_CHANNEL
  UNSUPPORTED_MEDIA_PROVIDER
  PREORDER_VARIANT_CANNOT_BE_DEACTIVATED
}

input ProductAttributeAssignInput {
  """The ID of the attribute to assign."""
  id: ID!

  """The attribute type to be assigned as."""
  type: ProductAttributeType!

  """
  Added in Saleor 3.1. Whether attribute is allowed in variant selection. Allowed types are: ['dropdown', 'boolean', 'swatch', 'numeric'].
  """
  variantSelection: Boolean
}

enum ProductAttributeType {
  PRODUCT
  VARIANT
}

"""
Added in Saleor 3.1. Update attributes assigned to product variant for given product type. Requires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
"""
type ProductAttributeAssignmentUpdate {
  """The updated product type."""
  productType: ProductType
  productErrors: [ProductError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ProductError!]!
}

input ProductAttributeAssignmentUpdateInput {
  """The ID of the attribute to assign."""
  id: ID!

  """
  Added in Saleor 3.1. Whether attribute is allowed in variant selection. Allowed types are: ['dropdown', 'boolean', 'swatch', 'numeric'].
  """
  variantSelection: Boolean!
}

"""
Un-assign attributes from a given product type. Requires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
"""
type ProductAttributeUnassign {
  """The updated product type."""
  productType: ProductType
  productErrors: [ProductError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ProductError!]!
}

"""
Creates a new category. Requires one of the following permissions: MANAGE_PRODUCTS.
"""
type CategoryCreate {
  productErrors: [ProductError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ProductError!]!
  category: Category
}

input CategoryInput {
  """Category description (JSON)."""
  description: JSONString

  """Category name."""
  name: String

  """Category slug."""
  slug: String

  """Search engine optimization fields."""
  seo: SeoInput

  """Background image file."""
  backgroundImage: Upload

  """Alt text for a product media."""
  backgroundImageAlt: String
}

input SeoInput {
  """SEO title."""
  title: String

  """SEO description."""
  description: String
}

"""
Deletes a category. Requires one of the following permissions: MANAGE_PRODUCTS.
"""
type CategoryDelete {
  productErrors: [ProductError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ProductError!]!
  category: Category
}

"""
Deletes categories. Requires one of the following permissions: MANAGE_PRODUCTS.
"""
type CategoryBulkDelete {
  """Returns how many objects were affected."""
  count: Int!
  productErrors: [ProductError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ProductError!]!
}

"""
Updates a category. Requires one of the following permissions: MANAGE_PRODUCTS.
"""
type CategoryUpdate {
  productErrors: [ProductError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ProductError!]!
  category: Category
}

"""
Creates/updates translations for a category. Requires one of the following permissions: MANAGE_TRANSLATIONS.
"""
type CategoryTranslate {
  translationErrors: [TranslationError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [TranslationError!]!
  category: Category
}

input TranslationInput {
  seoTitle: String
  seoDescription: String
  name: String
  description: JSONString
}

"""
Adds products to a collection. Requires one of the following permissions: MANAGE_PRODUCTS.
"""
type CollectionAddProducts {
  """Collection to which products will be added."""
  collection: Collection
  collectionErrors: [CollectionError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [CollectionError!]!
}

type CollectionError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """List of products IDs which causes the error."""
  products: [ID!]

  """The error code."""
  code: CollectionErrorCode!
}

"""An enumeration."""
enum CollectionErrorCode {
  DUPLICATED_INPUT_ITEM
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
  CANNOT_MANAGE_PRODUCT_WITHOUT_VARIANT
}

"""
Creates a new collection. Requires one of the following permissions: MANAGE_PRODUCTS.
"""
type CollectionCreate {
  collectionErrors: [CollectionError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [CollectionError!]!
  collection: Collection
}

input CollectionCreateInput {
  """Informs whether a collection is published."""
  isPublished: Boolean

  """Name of the collection."""
  name: String

  """Slug of the collection."""
  slug: String

  """Description of the collection (JSON)."""
  description: JSONString

  """Background image file."""
  backgroundImage: Upload

  """Alt text for an image."""
  backgroundImageAlt: String

  """Search engine optimization fields."""
  seo: SeoInput

  """
  Publication date. ISO 8601 standard. 
  
  DEPRECATED: this field will be removed in Saleor 4.0.
  """
  publicationDate: Date

  """List of products to be added to the collection."""
  products: [ID!]
}

"""
Deletes a collection. Requires one of the following permissions: MANAGE_PRODUCTS.
"""
type CollectionDelete {
  collectionErrors: [CollectionError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [CollectionError!]!
  collection: Collection
}

"""
Reorder the products of a collection. Requires one of the following permissions: MANAGE_PRODUCTS.
"""
type CollectionReorderProducts {
  """Collection from which products are reordered."""
  collection: Collection
  collectionErrors: [CollectionError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [CollectionError!]!
}

input MoveProductInput {
  """The ID of the product to move."""
  productId: ID!

  """
  The relative sorting position of the product (from -inf to +inf) starting from the first given product's actual position.1 moves the item one position forward, -1 moves the item one position backward, 0 leaves the item unchanged.
  """
  sortOrder: Int
}

"""
Deletes collections. Requires one of the following permissions: MANAGE_PRODUCTS.
"""
type CollectionBulkDelete {
  """Returns how many objects were affected."""
  count: Int!
  collectionErrors: [CollectionError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [CollectionError!]!
}

"""
Remove products from a collection. Requires one of the following permissions: MANAGE_PRODUCTS.
"""
type CollectionRemoveProducts {
  """Collection from which products will be removed."""
  collection: Collection
  collectionErrors: [CollectionError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [CollectionError!]!
}

"""
Updates a collection. Requires one of the following permissions: MANAGE_PRODUCTS.
"""
type CollectionUpdate {
  collectionErrors: [CollectionError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [CollectionError!]!
  collection: Collection
}

input CollectionInput {
  """Informs whether a collection is published."""
  isPublished: Boolean

  """Name of the collection."""
  name: String

  """Slug of the collection."""
  slug: String

  """Description of the collection (JSON)."""
  description: JSONString

  """Background image file."""
  backgroundImage: Upload

  """Alt text for an image."""
  backgroundImageAlt: String

  """Search engine optimization fields."""
  seo: SeoInput

  """
  Publication date. ISO 8601 standard. 
  
  DEPRECATED: this field will be removed in Saleor 4.0.
  """
  publicationDate: Date
}

"""
Creates/updates translations for a collection. Requires one of the following permissions: MANAGE_TRANSLATIONS.
"""
type CollectionTranslate {
  translationErrors: [TranslationError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [TranslationError!]!
  collection: Collection
}

"""
Manage collection's availability in channels. Requires one of the following permissions: MANAGE_PRODUCTS.
"""
type CollectionChannelListingUpdate {
  """An updated collection instance."""
  collection: Collection
  collectionChannelListingErrors: [CollectionChannelListingError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [CollectionChannelListingError!]!
}

type CollectionChannelListingError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: ProductErrorCode!

  """List of attributes IDs which causes the error."""
  attributes: [ID!]

  """List of attribute values IDs which causes the error."""
  values: [ID!]

  """List of channels IDs which causes the error."""
  channels: [ID!]
}

input CollectionChannelListingUpdateInput {
  """List of channels to which the collection should be assigned."""
  addChannels: [PublishableChannelListingInput!]

  """List of channels from which the collection should be unassigned."""
  removeChannels: [ID!]
}

input PublishableChannelListingInput {
  """ID of a channel."""
  channelId: ID!

  """Determines if object is visible to customers."""
  isPublished: Boolean

  """
  Publication date. ISO 8601 standard. 
  
  DEPRECATED: this field will be removed in Saleor 4.0. Use `publishedAt` field instead.
  """
  publicationDate: Date

  """Added in Saleor 3.3. Publication date time. ISO 8601 standard."""
  publishedAt: DateTime
}

"""
Creates a new product. Requires one of the following permissions: MANAGE_PRODUCTS.
"""
type ProductCreate {
  productErrors: [ProductError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ProductError!]!
  product: Product
}

input ProductCreateInput {
  """List of attributes."""
  attributes: [AttributeValueInput!]

  """ID of the product's category."""
  category: ID

  """Determine if taxes are being charged for the product."""
  chargeTaxes: Boolean

  """List of IDs of collections that the product belongs to."""
  collections: [ID!]

  """Product description (JSON)."""
  description: JSONString

  """Product name."""
  name: String

  """Product slug."""
  slug: String

  """Tax rate for enabled tax gateway."""
  taxCode: String

  """Search engine optimization fields."""
  seo: SeoInput

  """Weight of the Product."""
  weight: WeightScalar

  """Defines the product rating value."""
  rating: Float

  """ID of the type that product belongs to."""
  productType: ID!
}

input AttributeValueInput {
  """ID of the selected attribute."""
  id: ID

  """
  The value or slug of an attribute to resolve. If the passed value is non-existent, it will be created.
  """
  values: [String!]

  """URL of the file attribute. Every time, a new value is created."""
  file: String

  """File content type."""
  contentType: String

  """List of entity IDs that will be used as references."""
  references: [ID!]

  """Text content in JSON format."""
  richText: JSONString

  """Represents the boolean value of the attribute value."""
  boolean: Boolean

  """Represents the date value of the attribute value."""
  date: Date

  """Represents the date/time value of the attribute value."""
  dateTime: DateTime
}

"""
Deletes a product. Requires one of the following permissions: MANAGE_PRODUCTS.
"""
type ProductDelete {
  productErrors: [ProductError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ProductError!]!
  product: Product
}

"""
Deletes products. Requires one of the following permissions: MANAGE_PRODUCTS.
"""
type ProductBulkDelete {
  """Returns how many objects were affected."""
  count: Int!
  productErrors: [ProductError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ProductError!]!
}

"""
Updates an existing product. Requires one of the following permissions: MANAGE_PRODUCTS.
"""
type ProductUpdate {
  productErrors: [ProductError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ProductError!]!
  product: Product
}

input ProductInput {
  """List of attributes."""
  attributes: [AttributeValueInput!]

  """ID of the product's category."""
  category: ID

  """Determine if taxes are being charged for the product."""
  chargeTaxes: Boolean

  """List of IDs of collections that the product belongs to."""
  collections: [ID!]

  """Product description (JSON)."""
  description: JSONString

  """Product name."""
  name: String

  """Product slug."""
  slug: String

  """Tax rate for enabled tax gateway."""
  taxCode: String

  """Search engine optimization fields."""
  seo: SeoInput

  """Weight of the Product."""
  weight: WeightScalar

  """Defines the product rating value."""
  rating: Float
}

"""
Creates/updates translations for a product. Requires one of the following permissions: MANAGE_TRANSLATIONS.
"""
type ProductTranslate {
  translationErrors: [TranslationError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [TranslationError!]!
  product: Product
}

"""
Manage product's availability in channels. Requires one of the following permissions: MANAGE_PRODUCTS.
"""
type ProductChannelListingUpdate {
  """An updated product instance."""
  product: Product
  productChannelListingErrors: [ProductChannelListingError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ProductChannelListingError!]!
}

type ProductChannelListingError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: ProductErrorCode!

  """List of attributes IDs which causes the error."""
  attributes: [ID!]

  """List of attribute values IDs which causes the error."""
  values: [ID!]

  """List of channels IDs which causes the error."""
  channels: [ID!]

  """List of variants IDs which causes the error."""
  variants: [ID!]
}

input ProductChannelListingUpdateInput {
  """List of channels to which the product should be assigned or updated."""
  updateChannels: [ProductChannelListingAddInput!]

  """List of channels from which the product should be unassigned."""
  removeChannels: [ID!]
}

input ProductChannelListingAddInput {
  """ID of a channel."""
  channelId: ID!

  """Determines if object is visible to customers."""
  isPublished: Boolean

  """
  Publication date. ISO 8601 standard. 
  
  DEPRECATED: this field will be removed in Saleor 4.0. Use `publishedAt` field instead.
  """
  publicationDate: Date

  """Added in Saleor 3.3. Publication date time. ISO 8601 standard."""
  publishedAt: DateTime

  """
  Determines if product is visible in product listings (doesn't apply to product collections).
  """
  visibleInListings: Boolean

  """Determine if product should be available for purchase."""
  isAvailableForPurchase: Boolean

  """
  A start date from which a product will be available for purchase. When not set and isAvailable is set to True, the current day is assumed. 
  
  DEPRECATED: this field will be removed in Saleor 4.0. Use `availableForPurchaseAt` field instead.
  """
  availableForPurchaseDate: Date

  """
  Added in Saleor 3.3. A start date time from which a product will be available for purchase. When not set and `isAvailable` is set to True, the current day is assumed.
  """
  availableForPurchaseAt: DateTime

  """List of variants to which the channel should be assigned."""
  addVariants: [ID!]

  """List of variants from which the channel should be unassigned."""
  removeVariants: [ID!]
}

"""
Create a media object (image or video URL) associated with product. For image, this mutation must be sent as a `multipart` request. More detailed specs of the upload format can be found here: https://github.com/jaydenseric/graphql-multipart-request-spec Requires one of the following permissions: MANAGE_PRODUCTS.
"""
type ProductMediaCreate {
  product: Product
  media: ProductMedia
  productErrors: [ProductError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ProductError!]!
}

input ProductMediaCreateInput {
  """Alt text for a product media."""
  alt: String

  """Represents an image file in a multipart request."""
  image: Upload

  """ID of an product."""
  product: ID!

  """Represents an URL to an external media."""
  mediaUrl: String
}

"""
Reorder the variants of a product. Mutation updates updated_at on product and triggers PRODUCT_UPDATED webhook. Requires one of the following permissions: MANAGE_PRODUCTS.
"""
type ProductVariantReorder {
  product: Product
  productErrors: [ProductError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ProductError!]!
}

input ReorderInput {
  """The ID of the item to move."""
  id: ID!

  """
  The new relative sorting position of the item (from -inf to +inf). 1 moves the item one position forward, -1 moves the item one position backward, 0 leaves the item unchanged.
  """
  sortOrder: Int
}

"""
Deletes a product media. Requires one of the following permissions: MANAGE_PRODUCTS.
"""
type ProductMediaDelete {
  product: Product
  media: ProductMedia
  productErrors: [ProductError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ProductError!]!
}

"""
Deletes product media. Requires one of the following permissions: MANAGE_PRODUCTS.
"""
type ProductMediaBulkDelete {
  """Returns how many objects were affected."""
  count: Int!
  productErrors: [ProductError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ProductError!]!
}

"""
Changes ordering of the product media. Requires one of the following permissions: MANAGE_PRODUCTS.
"""
type ProductMediaReorder {
  product: Product
  media: [ProductMedia!]
  productErrors: [ProductError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ProductError!]!
}

"""
Updates a product media. Requires one of the following permissions: MANAGE_PRODUCTS.
"""
type ProductMediaUpdate {
  product: Product
  media: ProductMedia
  productErrors: [ProductError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ProductError!]!
}

input ProductMediaUpdateInput {
  """Alt text for a product media."""
  alt: String
}

"""
Creates a new product type. Requires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
"""
type ProductTypeCreate {
  productErrors: [ProductError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ProductError!]!
  productType: ProductType
}

input ProductTypeInput {
  """Name of the product type."""
  name: String

  """Product type slug."""
  slug: String

  """The product type kind."""
  kind: ProductTypeKindEnum

  """
  Determines if product of this type has multiple variants. This option mainly simplifies product management in the dashboard. There is always at least one variant created under the hood.
  """
  hasVariants: Boolean

  """List of attributes shared among all product variants."""
  productAttributes: [ID!]

  """
  List of attributes used to distinguish between different variants of a product.
  """
  variantAttributes: [ID!]

  """Determines if shipping is required for products of this variant."""
  isShippingRequired: Boolean

  """Determines if products are digital."""
  isDigital: Boolean

  """Weight of the ProductType items."""
  weight: WeightScalar

  """Tax rate for enabled tax gateway."""
  taxCode: String
}

"""
Deletes a product type. Requires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
"""
type ProductTypeDelete {
  productErrors: [ProductError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ProductError!]!
  productType: ProductType
}

"""
Deletes product types. Requires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
"""
type ProductTypeBulkDelete {
  """Returns how many objects were affected."""
  count: Int!
  productErrors: [ProductError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ProductError!]!
}

"""
Updates an existing product type. Requires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
"""
type ProductTypeUpdate {
  productErrors: [ProductError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ProductError!]!
  productType: ProductType
}

"""
Reorder the attributes of a product type. Requires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
"""
type ProductTypeReorderAttributes {
  """Product type from which attributes are reordered."""
  productType: ProductType
  productErrors: [ProductError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ProductError!]!
}

"""
Reorder product attribute values. Requires one of the following permissions: MANAGE_PRODUCTS.
"""
type ProductReorderAttributeValues {
  """Product from which attribute values are reordered."""
  product: Product
  productErrors: [ProductError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ProductError!]!
}

"""
Create new digital content. This mutation must be sent as a `multipart` request. More detailed specs of the upload format can be found here: https://github.com/jaydenseric/graphql-multipart-request-spec Requires one of the following permissions: MANAGE_PRODUCTS.
"""
type DigitalContentCreate {
  variant: ProductVariant
  content: DigitalContent
  productErrors: [ProductError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ProductError!]!
}

input DigitalContentUploadInput {
  """Use default digital content settings for this product."""
  useDefaultSettings: Boolean!

  """
  Determines how many times a download link can be accessed by a customer.
  """
  maxDownloads: Int

  """
  Determines for how many days a download link is active since it was generated.
  """
  urlValidDays: Int

  """Overwrite default automatic_fulfillment setting for variant."""
  automaticFulfillment: Boolean

  """Represents an file in a multipart request."""
  contentFile: Upload!
}

"""
Remove digital content assigned to given variant. Requires one of the following permissions: MANAGE_PRODUCTS.
"""
type DigitalContentDelete {
  variant: ProductVariant
  productErrors: [ProductError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ProductError!]!
}

"""
Update digital content. Requires one of the following permissions: MANAGE_PRODUCTS.
"""
type DigitalContentUpdate {
  variant: ProductVariant
  content: DigitalContent
  productErrors: [ProductError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ProductError!]!
}

input DigitalContentInput {
  """Use default digital content settings for this product."""
  useDefaultSettings: Boolean!

  """
  Determines how many times a download link can be accessed by a customer.
  """
  maxDownloads: Int

  """
  Determines for how many days a download link is active since it was generated.
  """
  urlValidDays: Int

  """Overwrite default automatic_fulfillment setting for variant."""
  automaticFulfillment: Boolean
}

"""
Generate new URL to digital content. Requires one of the following permissions: MANAGE_PRODUCTS.
"""
type DigitalContentUrlCreate {
  productErrors: [ProductError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ProductError!]!
  digitalContentUrl: DigitalContentUrl
}

input DigitalContentUrlCreateInput {
  """Digital content ID which URL will belong to."""
  content: ID!
}

"""
Creates a new variant for a product. Requires one of the following permissions: MANAGE_PRODUCTS.
"""
type ProductVariantCreate {
  productErrors: [ProductError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ProductError!]!
  productVariant: ProductVariant
}

input ProductVariantCreateInput {
  """List of attributes specific to this variant."""
  attributes: [AttributeValueInput!]!

  """Stock keeping unit."""
  sku: String

  """
  Determines if the inventory of this variant should be tracked. If false, the quantity won't change when customers buy this item.
  """
  trackInventory: Boolean

  """Weight of the Product Variant."""
  weight: WeightScalar

  """
  Added in Saleor 3.1. Determines if variant is in preorder. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  preorder: PreorderSettingsInput

  """
  Added in Saleor 3.1. Determines maximum quantity of `ProductVariant`,that can be bought in a single checkout. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  quantityLimitPerCustomer: Int

  """Product ID of which type is the variant."""
  product: ID!

  """Stocks of a product available for sale."""
  stocks: [StockInput!]
}

input PreorderSettingsInput {
  """The global threshold for preorder variant."""
  globalThreshold: Int

  """The end date for preorder."""
  endDate: DateTime
}

input StockInput {
  """Warehouse in which stock is located."""
  warehouse: ID!

  """Quantity of items available for sell."""
  quantity: Int!
}

"""
Deletes a product variant. Requires one of the following permissions: MANAGE_PRODUCTS.
"""
type ProductVariantDelete {
  productErrors: [ProductError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ProductError!]!
  productVariant: ProductVariant
}

"""
Creates product variants for a given product. Requires one of the following permissions: MANAGE_PRODUCTS.
"""
type ProductVariantBulkCreate {
  """Returns how many objects were created."""
  count: Int!

  """List of the created variants."""
  productVariants: [ProductVariant!]!
  bulkProductErrors: [BulkProductError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [BulkProductError!]!
}

type BulkProductError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: ProductErrorCode!

  """List of attributes IDs which causes the error."""
  attributes: [ID!]

  """List of attribute values IDs which causes the error."""
  values: [ID!]

  """Index of an input list item that caused the error."""
  index: Int

  """List of warehouse IDs which causes the error."""
  warehouses: [ID!]

  """List of channel IDs which causes the error."""
  channels: [ID!]
}

input ProductVariantBulkCreateInput {
  """List of attributes specific to this variant."""
  attributes: [BulkAttributeValueInput!]!

  """Stock keeping unit."""
  sku: String

  """
  Determines if the inventory of this variant should be tracked. If false, the quantity won't change when customers buy this item.
  """
  trackInventory: Boolean

  """Weight of the Product Variant."""
  weight: WeightScalar

  """
  Added in Saleor 3.1. Determines if variant is in preorder. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  preorder: PreorderSettingsInput

  """
  Added in Saleor 3.1. Determines maximum quantity of `ProductVariant`,that can be bought in a single checkout. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  quantityLimitPerCustomer: Int

  """Stocks of a product available for sale."""
  stocks: [StockInput!]

  """List of prices assigned to channels."""
  channelListings: [ProductVariantChannelListingAddInput!]
}

input BulkAttributeValueInput {
  """ID of the selected attribute."""
  id: ID

  """
  The value or slug of an attribute to resolve. If the passed value is non-existent, it will be created.
  """
  values: [String!]

  """
  The boolean value of an attribute to resolve. If the passed value is non-existent, it will be created.
  """
  boolean: Boolean
}

input ProductVariantChannelListingAddInput {
  """ID of a channel."""
  channelId: ID!

  """Price of the particular variant in channel."""
  price: PositiveDecimal!

  """Cost price of the variant in channel."""
  costPrice: PositiveDecimal

  """
  Added in Saleor 3.1. The threshold for preorder variant in channel. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  preorderThreshold: Int
}

"""
Deletes product variants. Requires one of the following permissions: MANAGE_PRODUCTS.
"""
type ProductVariantBulkDelete {
  """Returns how many objects were affected."""
  count: Int!
  productErrors: [ProductError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ProductError!]!
}

"""
Creates stocks for product variant. Requires one of the following permissions: MANAGE_PRODUCTS.
"""
type ProductVariantStocksCreate {
  """Updated product variant."""
  productVariant: ProductVariant
  bulkStockErrors: [BulkStockError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [BulkStockError!]!
}

type BulkStockError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: ProductErrorCode!

  """List of attributes IDs which causes the error."""
  attributes: [ID!]

  """List of attribute values IDs which causes the error."""
  values: [ID!]

  """Index of an input list item that caused the error."""
  index: Int
}

"""
Delete stocks from product variant. Requires one of the following permissions: MANAGE_PRODUCTS.
"""
type ProductVariantStocksDelete {
  """Updated product variant."""
  productVariant: ProductVariant
  stockErrors: [StockError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [StockError!]!
}

type StockError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: StockErrorCode!
}

"""An enumeration."""
enum StockErrorCode {
  ALREADY_EXISTS
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

"""
Update stocks for product variant. Requires one of the following permissions: MANAGE_PRODUCTS.
"""
type ProductVariantStocksUpdate {
  """Updated product variant."""
  productVariant: ProductVariant
  bulkStockErrors: [BulkStockError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [BulkStockError!]!
}

"""
Updates an existing variant for product. Requires one of the following permissions: MANAGE_PRODUCTS.
"""
type ProductVariantUpdate {
  productErrors: [ProductError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ProductError!]!
  productVariant: ProductVariant
}

input ProductVariantInput {
  """List of attributes specific to this variant."""
  attributes: [AttributeValueInput!]

  """Stock keeping unit."""
  sku: String

  """
  Determines if the inventory of this variant should be tracked. If false, the quantity won't change when customers buy this item.
  """
  trackInventory: Boolean

  """Weight of the Product Variant."""
  weight: WeightScalar

  """
  Added in Saleor 3.1. Determines if variant is in preorder. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  preorder: PreorderSettingsInput

  """
  Added in Saleor 3.1. Determines maximum quantity of `ProductVariant`,that can be bought in a single checkout. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  quantityLimitPerCustomer: Int
}

"""
Set default variant for a product. Mutation triggers PRODUCT_UPDATED webhook. Requires one of the following permissions: MANAGE_PRODUCTS.
"""
type ProductVariantSetDefault {
  product: Product
  productErrors: [ProductError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ProductError!]!
}

"""
Creates/updates translations for a product variant. Requires one of the following permissions: MANAGE_TRANSLATIONS.
"""
type ProductVariantTranslate {
  translationErrors: [TranslationError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [TranslationError!]!
  productVariant: ProductVariant
}

input NameTranslationInput {
  name: String
}

"""
Manage product variant prices in channels. Requires one of the following permissions: MANAGE_PRODUCTS.
"""
type ProductVariantChannelListingUpdate {
  """An updated product variant instance."""
  variant: ProductVariant
  productChannelListingErrors: [ProductChannelListingError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ProductChannelListingError!]!
}

"""
Reorder product variant attribute values. Requires one of the following permissions: MANAGE_PRODUCTS.
"""
type ProductVariantReorderAttributeValues {
  """Product variant from which attribute values are reordered."""
  productVariant: ProductVariant
  productErrors: [ProductError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ProductError!]!
}

"""
Added in Saleor 3.1. Deactivates product variant preorder. It changes all preorder allocation into regular allocation. Note: this feature is in a preview state and can be subject to changes at later point. Requires one of the following permissions: MANAGE_PRODUCTS.
"""
type ProductVariantPreorderDeactivate {
  """Product variant with ended preorder."""
  productVariant: ProductVariant
  errors: [ProductError!]!
}

"""
Assign an media to a product variant. Requires one of the following permissions: MANAGE_PRODUCTS.
"""
type VariantMediaAssign {
  productVariant: ProductVariant
  media: ProductMedia
  productErrors: [ProductError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ProductError!]!
}

"""
Unassign an media from a product variant. Requires one of the following permissions: MANAGE_PRODUCTS.
"""
type VariantMediaUnassign {
  productVariant: ProductVariant
  media: ProductMedia
  productErrors: [ProductError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ProductError!]!
}

"""
Captures the authorized payment amount. Requires one of the following permissions: MANAGE_ORDERS.
"""
type PaymentCapture {
  """Updated payment."""
  payment: Payment
  paymentErrors: [PaymentError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [PaymentError!]!
}

type PaymentError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: PaymentErrorCode!

  """List of varint IDs which causes the error."""
  variants: [ID!]
}

"""An enumeration."""
enum PaymentErrorCode {
  BILLING_ADDRESS_NOT_SET
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
  PARTIAL_PAYMENT_NOT_ALLOWED
  SHIPPING_ADDRESS_NOT_SET
  INVALID_SHIPPING_METHOD
  SHIPPING_METHOD_NOT_SET
  PAYMENT_ERROR
  NOT_SUPPORTED_GATEWAY
  CHANNEL_INACTIVE
  BALANCE_CHECK_ERROR
  CHECKOUT_EMAIL_NOT_SET
  UNAVAILABLE_VARIANT_IN_CHANNEL
  NO_CHECKOUT_LINES
}

"""
Refunds the captured payment amount. Requires one of the following permissions: MANAGE_ORDERS.
"""
type PaymentRefund {
  """Updated payment."""
  payment: Payment
  paymentErrors: [PaymentError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [PaymentError!]!
}

"""
Voids the authorized payment. Requires one of the following permissions: MANAGE_ORDERS.
"""
type PaymentVoid {
  """Updated payment."""
  payment: Payment
  paymentErrors: [PaymentError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [PaymentError!]!
}

"""Initializes payment process when it is required by gateway."""
type PaymentInitialize {
  initializedPayment: PaymentInitialized
  paymentErrors: [PaymentError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [PaymentError!]!
}

"""
Server-side data generated by a payment gateway. Optional step when the payment provider requires an additional action to initialize payment session.
"""
type PaymentInitialized {
  """ID of a payment gateway."""
  gateway: String!

  """Payment gateway name."""
  name: String!

  """Initialized data by gateway."""
  data: JSONString
}

"""Check payment balance."""
type PaymentCheckBalance {
  """Response from the gateway."""
  data: JSONString
  paymentErrors: [PaymentError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [PaymentError!]!
}

input PaymentCheckBalanceInput {
  """An ID of a payment gateway to check."""
  gatewayId: String!

  """Payment method name."""
  method: String!

  """Slug of a channel for which the data should be returned."""
  channel: String!

  """Information about card."""
  card: CardInput!
}

input CardInput {
  """
  Payment method nonce, a token returned by the appropriate provider's SDK.
  """
  code: String!

  """Card security code."""
  cvc: String

  """Information about currency and amount."""
  money: MoneyInput!
}

input MoneyInput {
  """Currency code."""
  currency: String!

  """Amount of money."""
  amount: PositiveDecimal!
}

"""
Creates a new page. Requires one of the following permissions: MANAGE_PAGES.
"""
type PageCreate {
  pageErrors: [PageError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [PageError!]!
  page: Page
}

type PageError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: PageErrorCode!

  """List of attributes IDs which causes the error."""
  attributes: [ID!]

  """List of attribute values IDs which causes the error."""
  values: [ID!]
}

"""An enumeration."""
enum PageErrorCode {
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
  DUPLICATED_INPUT_ITEM
  ATTRIBUTE_ALREADY_ASSIGNED
}

input PageCreateInput {
  """Page internal name."""
  slug: String

  """Page title."""
  title: String

  """Page content in JSON format."""
  content: JSONString

  """List of attributes."""
  attributes: [AttributeValueInput!]

  """Determines if page is visible in the storefront."""
  isPublished: Boolean

  """
  Publication date. ISO 8601 standard. 
  
  DEPRECATED: this field will be removed in Saleor 4.0. Use `publishedAt` field instead.
  """
  publicationDate: String

  """Added in Saleor 3.3. Publication date time. ISO 8601 standard."""
  publishedAt: DateTime

  """Search engine optimization fields."""
  seo: SeoInput

  """ID of the page type that page belongs to."""
  pageType: ID!
}

"""
Deletes a page. Requires one of the following permissions: MANAGE_PAGES.
"""
type PageDelete {
  pageErrors: [PageError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [PageError!]!
  page: Page
}

"""
Deletes pages. Requires one of the following permissions: MANAGE_PAGES.
"""
type PageBulkDelete {
  """Returns how many objects were affected."""
  count: Int!
  pageErrors: [PageError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [PageError!]!
}

"""
Publish pages. Requires one of the following permissions: MANAGE_PAGES.
"""
type PageBulkPublish {
  """Returns how many objects were affected."""
  count: Int!
  pageErrors: [PageError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [PageError!]!
}

"""
Updates an existing page. Requires one of the following permissions: MANAGE_PAGES.
"""
type PageUpdate {
  pageErrors: [PageError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [PageError!]!
  page: Page
}

input PageInput {
  """Page internal name."""
  slug: String

  """Page title."""
  title: String

  """Page content in JSON format."""
  content: JSONString

  """List of attributes."""
  attributes: [AttributeValueInput!]

  """Determines if page is visible in the storefront."""
  isPublished: Boolean

  """
  Publication date. ISO 8601 standard. 
  
  DEPRECATED: this field will be removed in Saleor 4.0. Use `publishedAt` field instead.
  """
  publicationDate: String

  """Added in Saleor 3.3. Publication date time. ISO 8601 standard."""
  publishedAt: DateTime

  """Search engine optimization fields."""
  seo: SeoInput
}

"""
Creates/updates translations for a page. Requires one of the following permissions: MANAGE_TRANSLATIONS.
"""
type PageTranslate {
  translationErrors: [TranslationError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [TranslationError!]!
  page: PageTranslatableContent
}

input PageTranslationInput {
  seoTitle: String
  seoDescription: String
  title: String
  content: JSONString
}

"""
Create a new page type. Requires one of the following permissions: MANAGE_PAGE_TYPES_AND_ATTRIBUTES.
"""
type PageTypeCreate {
  pageErrors: [PageError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [PageError!]!
  pageType: PageType
}

input PageTypeCreateInput {
  """Name of the page type."""
  name: String

  """Page type slug."""
  slug: String

  """List of attribute IDs to be assigned to the page type."""
  addAttributes: [ID!]
}

"""
Update page type. Requires one of the following permissions: MANAGE_PAGE_TYPES_AND_ATTRIBUTES.
"""
type PageTypeUpdate {
  pageErrors: [PageError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [PageError!]!
  pageType: PageType
}

input PageTypeUpdateInput {
  """Name of the page type."""
  name: String

  """Page type slug."""
  slug: String

  """List of attribute IDs to be assigned to the page type."""
  addAttributes: [ID!]

  """List of attribute IDs to be assigned to the page type."""
  removeAttributes: [ID!]
}

"""
Delete a page type. Requires one of the following permissions: MANAGE_PAGE_TYPES_AND_ATTRIBUTES.
"""
type PageTypeDelete {
  pageErrors: [PageError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [PageError!]!
  pageType: PageType
}

"""
Delete page types. Requires one of the following permissions: MANAGE_PAGE_TYPES_AND_ATTRIBUTES.
"""
type PageTypeBulkDelete {
  """Returns how many objects were affected."""
  count: Int!
  pageErrors: [PageError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [PageError!]!
}

"""
Assign attributes to a given page type. Requires one of the following permissions: MANAGE_PAGE_TYPES_AND_ATTRIBUTES.
"""
type PageAttributeAssign {
  """The updated page type."""
  pageType: PageType
  pageErrors: [PageError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [PageError!]!
}

"""
Unassign attributes from a given page type. Requires one of the following permissions: MANAGE_PAGE_TYPES_AND_ATTRIBUTES.
"""
type PageAttributeUnassign {
  """The updated page type."""
  pageType: PageType
  pageErrors: [PageError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [PageError!]!
}

"""
Reorder the attributes of a page type. Requires one of the following permissions: MANAGE_PAGE_TYPES_AND_ATTRIBUTES.
"""
type PageTypeReorderAttributes {
  """Page type from which attributes are reordered."""
  pageType: PageType
  pageErrors: [PageError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [PageError!]!
}

"""
Reorder page attribute values. Requires one of the following permissions: MANAGE_PAGES.
"""
type PageReorderAttributeValues {
  """Page from which attribute values are reordered."""
  page: Page
  pageErrors: [PageError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [PageError!]!
}

"""
Completes creating an order. Requires one of the following permissions: MANAGE_ORDERS.
"""
type DraftOrderComplete {
  """Completed order."""
  order: Order
  orderErrors: [OrderError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [OrderError!]!
}

"""
Creates a new draft order. Requires one of the following permissions: MANAGE_ORDERS.
"""
type DraftOrderCreate {
  orderErrors: [OrderError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [OrderError!]!
  order: Order
}

input DraftOrderCreateInput {
  """Billing address of the customer."""
  billingAddress: AddressInput

  """Customer associated with the draft order."""
  user: ID

  """Email address of the customer."""
  userEmail: String

  """Discount amount for the order."""
  discount: PositiveDecimal

  """Shipping address of the customer."""
  shippingAddress: AddressInput

  """ID of a selected shipping method."""
  shippingMethod: ID

  """ID of the voucher associated with the order."""
  voucher: ID

  """A note from a customer. Visible by customers in the order summary."""
  customerNote: String

  """ID of the channel associated with the order."""
  channelId: ID

  """
  URL of a view where users should be redirected to see the order details. URL in RFC 1808 format.
  """
  redirectUrl: String

  """Variant line input consisting of variant ID and quantity of products."""
  lines: [OrderLineCreateInput!]
}

input OrderLineCreateInput {
  """Number of variant items ordered."""
  quantity: Int!

  """Product variant ID."""
  variantId: ID!
}

"""
Deletes a draft order. Requires one of the following permissions: MANAGE_ORDERS.
"""
type DraftOrderDelete {
  orderErrors: [OrderError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [OrderError!]!
  order: Order
}

"""
Deletes draft orders. Requires one of the following permissions: MANAGE_ORDERS.
"""
type DraftOrderBulkDelete {
  """Returns how many objects were affected."""
  count: Int!
  orderErrors: [OrderError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [OrderError!]!
}

"""
Deletes order lines. Requires one of the following permissions: MANAGE_ORDERS.
"""
type DraftOrderLinesBulkDelete {
  """Returns how many objects were affected."""
  count: Int!
  orderErrors: [OrderError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [OrderError!]!
}

"""
Updates a draft order. Requires one of the following permissions: MANAGE_ORDERS.
"""
type DraftOrderUpdate {
  orderErrors: [OrderError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [OrderError!]!
  order: Order
}

input DraftOrderInput {
  """Billing address of the customer."""
  billingAddress: AddressInput

  """Customer associated with the draft order."""
  user: ID

  """Email address of the customer."""
  userEmail: String

  """Discount amount for the order."""
  discount: PositiveDecimal

  """Shipping address of the customer."""
  shippingAddress: AddressInput

  """ID of a selected shipping method."""
  shippingMethod: ID

  """ID of the voucher associated with the order."""
  voucher: ID

  """A note from a customer. Visible by customers in the order summary."""
  customerNote: String

  """ID of the channel associated with the order."""
  channelId: ID

  """
  URL of a view where users should be redirected to see the order details. URL in RFC 1808 format.
  """
  redirectUrl: String
}

"""
Adds note to the order. Requires one of the following permissions: MANAGE_ORDERS.
"""
type OrderAddNote {
  """Order with the note added."""
  order: Order

  """Order note created."""
  event: OrderEvent
  orderErrors: [OrderError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [OrderError!]!
}

input OrderAddNoteInput {
  """Note message."""
  message: String!
}

"""
Cancel an order. Requires one of the following permissions: MANAGE_ORDERS.
"""
type OrderCancel {
  """Canceled order."""
  order: Order
  orderErrors: [OrderError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [OrderError!]!
}

"""
Capture an order. Requires one of the following permissions: MANAGE_ORDERS.
"""
type OrderCapture {
  """Captured order."""
  order: Order
  orderErrors: [OrderError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [OrderError!]!
}

"""
Confirms an unconfirmed order by changing status to unfulfilled. Requires one of the following permissions: MANAGE_ORDERS.
"""
type OrderConfirm {
  order: Order
  orderErrors: [OrderError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [OrderError!]!
}

"""
Creates new fulfillments for an order. Requires one of the following permissions: MANAGE_ORDERS.
"""
type OrderFulfill {
  """List of created fulfillments."""
  fulfillments: [Fulfillment!]

  """Fulfilled order."""
  order: Order
  orderErrors: [OrderError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [OrderError!]!
}

input OrderFulfillInput {
  """List of items informing how to fulfill the order."""
  lines: [OrderFulfillLineInput!]!

  """If true, send an email notification to the customer."""
  notifyCustomer: Boolean

  """If true, then allow proceed fulfillment when stock is exceeded."""
  allowStockToBeExceeded: Boolean = false
}

input OrderFulfillLineInput {
  """The ID of the order line."""
  orderLineId: ID

  """List of stock items to create."""
  stocks: [OrderFulfillStockInput!]!
}

input OrderFulfillStockInput {
  """The number of line items to be fulfilled from given warehouse."""
  quantity: Int!

  """ID of the warehouse from which the item will be fulfilled."""
  warehouse: ID!
}

"""
Cancels existing fulfillment and optionally restocks items. Requires one of the following permissions: MANAGE_ORDERS.
"""
type FulfillmentCancel {
  """A canceled fulfillment."""
  fulfillment: Fulfillment

  """Order which fulfillment was cancelled."""
  order: Order
  orderErrors: [OrderError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [OrderError!]!
}

input FulfillmentCancelInput {
  """
  ID of a warehouse where items will be restocked. Optional when fulfillment is in WAITING_FOR_APPROVAL state.
  """
  warehouseId: ID
}

"""
Added in Saleor 3.1. Approve existing fulfillment. Requires one of the following permissions: MANAGE_ORDERS.
"""
type FulfillmentApprove {
  """An approved fulfillment."""
  fulfillment: Fulfillment

  """Order which fulfillment was approved."""
  order: Order
  orderErrors: [OrderError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [OrderError!]!
}

"""
Updates a fulfillment for an order. Requires one of the following permissions: MANAGE_ORDERS.
"""
type FulfillmentUpdateTracking {
  """A fulfillment with updated tracking."""
  fulfillment: Fulfillment

  """Order for which fulfillment was updated."""
  order: Order
  orderErrors: [OrderError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [OrderError!]!
}

input FulfillmentUpdateTrackingInput {
  """Fulfillment tracking number."""
  trackingNumber: String

  """If true, send an email notification to the customer."""
  notifyCustomer: Boolean = false
}

"""
Refund products. Requires one of the following permissions: MANAGE_ORDERS.
"""
type FulfillmentRefundProducts {
  """A refunded fulfillment."""
  fulfillment: Fulfillment

  """Order which fulfillment was refunded."""
  order: Order
  orderErrors: [OrderError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [OrderError!]!
}

input OrderRefundProductsInput {
  """List of unfulfilled lines to refund."""
  orderLines: [OrderRefundLineInput!]

  """List of fulfilled lines to refund."""
  fulfillmentLines: [OrderRefundFulfillmentLineInput!]

  """The total amount of refund when the value is provided manually."""
  amountToRefund: PositiveDecimal

  """
  If true, Saleor will refund shipping costs. If amountToRefund is providedincludeShippingCosts will be ignored.
  """
  includeShippingCosts: Boolean = false
}

input OrderRefundLineInput {
  """The ID of the order line to refund."""
  orderLineId: ID!

  """The number of items to be refunded."""
  quantity: Int!
}

input OrderRefundFulfillmentLineInput {
  """The ID of the fulfillment line to refund."""
  fulfillmentLineId: ID!

  """The number of items to be refunded."""
  quantity: Int!
}

"""
Return products. Requires one of the following permissions: MANAGE_ORDERS.
"""
type FulfillmentReturnProducts {
  """A return fulfillment."""
  returnFulfillment: Fulfillment

  """A replace fulfillment."""
  replaceFulfillment: Fulfillment

  """Order which fulfillment was returned."""
  order: Order

  """A draft order which was created for products with replace flag."""
  replaceOrder: Order
  orderErrors: [OrderError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [OrderError!]!
}

input OrderReturnProductsInput {
  """List of unfulfilled lines to return."""
  orderLines: [OrderReturnLineInput!]

  """List of fulfilled lines to return."""
  fulfillmentLines: [OrderReturnFulfillmentLineInput!]

  """The total amount of refund when the value is provided manually."""
  amountToRefund: PositiveDecimal

  """
  If true, Saleor will refund shipping costs. If amountToRefund is providedincludeShippingCosts will be ignored.
  """
  includeShippingCosts: Boolean = false

  """If true, Saleor will call refund action for all lines."""
  refund: Boolean = false
}

input OrderReturnLineInput {
  """The ID of the order line to return."""
  orderLineId: ID!

  """The number of items to be returned."""
  quantity: Int!

  """Determines, if the line should be added to replace order."""
  replace: Boolean = false
}

input OrderReturnFulfillmentLineInput {
  """The ID of the fulfillment line to return."""
  fulfillmentLineId: ID!

  """The number of items to be returned."""
  quantity: Int!

  """Determines, if the line should be added to replace order."""
  replace: Boolean = false
}

"""
Create order lines for an order. Requires one of the following permissions: MANAGE_ORDERS.
"""
type OrderLinesCreate {
  """Related order."""
  order: Order

  """List of added order lines."""
  orderLines: [OrderLine!]
  orderErrors: [OrderError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [OrderError!]!
}

"""
Deletes an order line from an order. Requires one of the following permissions: MANAGE_ORDERS.
"""
type OrderLineDelete {
  """A related order."""
  order: Order

  """An order line that was deleted."""
  orderLine: OrderLine
  orderErrors: [OrderError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [OrderError!]!
}

"""
Updates an order line of an order. Requires one of the following permissions: MANAGE_ORDERS.
"""
type OrderLineUpdate {
  """Related order."""
  order: Order
  orderErrors: [OrderError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [OrderError!]!
  orderLine: OrderLine
}

input OrderLineInput {
  """Number of variant items ordered."""
  quantity: Int!
}

"""
Adds discount to the order. Requires one of the following permissions: MANAGE_ORDERS.
"""
type OrderDiscountAdd {
  """Order which has been discounted."""
  order: Order
  orderErrors: [OrderError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [OrderError!]!
}

input OrderDiscountCommonInput {
  """Type of the discount: fixed or percent"""
  valueType: DiscountValueTypeEnum!

  """Value of the discount. Can store fixed value or percent value"""
  value: PositiveDecimal!

  """Explanation for the applied discount."""
  reason: String
}

"""
Update discount for the order. Requires one of the following permissions: MANAGE_ORDERS.
"""
type OrderDiscountUpdate {
  """Order which has been discounted."""
  order: Order
  orderErrors: [OrderError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [OrderError!]!
}

"""
Remove discount from the order. Requires one of the following permissions: MANAGE_ORDERS.
"""
type OrderDiscountDelete {
  """Order which has removed discount."""
  order: Order
  orderErrors: [OrderError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [OrderError!]!
}

"""
Update discount for the order line. Requires one of the following permissions: MANAGE_ORDERS.
"""
type OrderLineDiscountUpdate {
  """Order line which has been discounted."""
  orderLine: OrderLine

  """Order which is related to the discounted line."""
  order: Order
  orderErrors: [OrderError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [OrderError!]!
}

"""
Remove discount applied to the order line. Requires one of the following permissions: MANAGE_ORDERS.
"""
type OrderLineDiscountRemove {
  """Order line which has removed discount."""
  orderLine: OrderLine

  """Order which is related to line which has removed discount."""
  order: Order
  orderErrors: [OrderError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [OrderError!]!
}

"""
Mark order as manually paid. Requires one of the following permissions: MANAGE_ORDERS.
"""
type OrderMarkAsPaid {
  """Order marked as paid."""
  order: Order
  orderErrors: [OrderError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [OrderError!]!
}

"""
Refund an order. Requires one of the following permissions: MANAGE_ORDERS.
"""
type OrderRefund {
  """A refunded order."""
  order: Order
  orderErrors: [OrderError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [OrderError!]!
}

"""
Updates an order. Requires one of the following permissions: MANAGE_ORDERS.
"""
type OrderUpdate {
  orderErrors: [OrderError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [OrderError!]!
  order: Order
}

input OrderUpdateInput {
  """Billing address of the customer."""
  billingAddress: AddressInput

  """Email address of the customer."""
  userEmail: String

  """Shipping address of the customer."""
  shippingAddress: AddressInput
}

"""
Updates a shipping method of the order. Requires shipping method ID to update, when null is passed then currently assigned shipping method is removed. Requires one of the following permissions: MANAGE_ORDERS.
"""
type OrderUpdateShipping {
  """Order with updated shipping method."""
  order: Order
  orderErrors: [OrderError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [OrderError!]!
}

input OrderUpdateShippingInput {
  """
  ID of the selected shipping method, pass null to remove currently assigned shipping method.
  """
  shippingMethod: ID
}

"""
Void an order. Requires one of the following permissions: MANAGE_ORDERS.
"""
type OrderVoid {
  """A voided order."""
  order: Order
  orderErrors: [OrderError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [OrderError!]!
}

"""
Cancels orders. Requires one of the following permissions: MANAGE_ORDERS.
"""
type OrderBulkCancel {
  """Returns how many objects were affected."""
  count: Int!
  orderErrors: [OrderError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [OrderError!]!
}

"""
Delete metadata of an object. To use it, you need to have access to the modified object.
"""
type DeleteMetadata {
  metadataErrors: [MetadataError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [MetadataError!]!
  item: ObjectWithMetadata
}

type MetadataError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: MetadataErrorCode!
}

"""An enumeration."""
enum MetadataErrorCode {
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  NOT_UPDATED
}

"""
Delete object's private metadata. To use it, you need to be an authenticated staff user or an app and have access to the modified object.
"""
type DeletePrivateMetadata {
  metadataErrors: [MetadataError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [MetadataError!]!
  item: ObjectWithMetadata
}

"""
Updates metadata of an object. To use it, you need to have access to the modified object.
"""
type UpdateMetadata {
  metadataErrors: [MetadataError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [MetadataError!]!
  item: ObjectWithMetadata
}

input MetadataInput {
  """Key of a metadata item."""
  key: String!

  """Value of a metadata item."""
  value: String!
}

"""
Updates private metadata of an object. To use it, you need to be an authenticated staff user or an app and have access to the modified object.
"""
type UpdatePrivateMetadata {
  metadataErrors: [MetadataError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [MetadataError!]!
  item: ObjectWithMetadata
}

"""
Assigns storefront's navigation menus. Requires one of the following permissions: MANAGE_MENUS, MANAGE_SETTINGS.
"""
type AssignNavigation {
  """Assigned navigation menu."""
  menu: Menu
  menuErrors: [MenuError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [MenuError!]!
}

type MenuError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: MenuErrorCode!
}

"""An enumeration."""
enum MenuErrorCode {
  CANNOT_ASSIGN_NODE
  GRAPHQL_ERROR
  INVALID
  INVALID_MENU_ITEM
  NO_MENU_ITEM_PROVIDED
  NOT_FOUND
  REQUIRED
  TOO_MANY_MENU_ITEMS
  UNIQUE
}

enum NavigationType {
  """Main storefront navigation."""
  MAIN

  """Secondary storefront navigation."""
  SECONDARY
}

"""
Creates a new Menu. Requires one of the following permissions: MANAGE_MENUS.
"""
type MenuCreate {
  menuErrors: [MenuError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [MenuError!]!
  menu: Menu
}

input MenuCreateInput {
  """Name of the menu."""
  name: String!

  """Slug of the menu. Will be generated if not provided."""
  slug: String

  """List of menu items."""
  items: [MenuItemInput!]
}

input MenuItemInput {
  """Name of the menu item."""
  name: String

  """URL of the pointed item."""
  url: String

  """Category to which item points."""
  category: ID

  """Collection to which item points."""
  collection: ID

  """Page to which item points."""
  page: ID
}

"""
Deletes a menu. Requires one of the following permissions: MANAGE_MENUS.
"""
type MenuDelete {
  menuErrors: [MenuError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [MenuError!]!
  menu: Menu
}

"""
Deletes menus. Requires one of the following permissions: MANAGE_MENUS.
"""
type MenuBulkDelete {
  """Returns how many objects were affected."""
  count: Int!
  menuErrors: [MenuError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [MenuError!]!
}

"""
Updates a menu. Requires one of the following permissions: MANAGE_MENUS.
"""
type MenuUpdate {
  menuErrors: [MenuError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [MenuError!]!
  menu: Menu
}

input MenuInput {
  """Name of the menu."""
  name: String

  """Slug of the menu."""
  slug: String
}

"""
Creates a new menu item. Requires one of the following permissions: MANAGE_MENUS.
"""
type MenuItemCreate {
  menuErrors: [MenuError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [MenuError!]!
  menuItem: MenuItem
}

input MenuItemCreateInput {
  """Name of the menu item."""
  name: String!

  """URL of the pointed item."""
  url: String

  """Category to which item points."""
  category: ID

  """Collection to which item points."""
  collection: ID

  """Page to which item points."""
  page: ID

  """Menu to which item belongs."""
  menu: ID!

  """ID of the parent menu. If empty, menu will be top level menu."""
  parent: ID
}

"""
Deletes a menu item. Requires one of the following permissions: MANAGE_MENUS.
"""
type MenuItemDelete {
  menuErrors: [MenuError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [MenuError!]!
  menuItem: MenuItem
}

"""
Deletes menu items. Requires one of the following permissions: MANAGE_MENUS.
"""
type MenuItemBulkDelete {
  """Returns how many objects were affected."""
  count: Int!
  menuErrors: [MenuError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [MenuError!]!
}

"""
Updates a menu item. Requires one of the following permissions: MANAGE_MENUS.
"""
type MenuItemUpdate {
  menuErrors: [MenuError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [MenuError!]!
  menuItem: MenuItem
}

"""
Creates/updates translations for a menu item. Requires one of the following permissions: MANAGE_TRANSLATIONS.
"""
type MenuItemTranslate {
  translationErrors: [TranslationError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [TranslationError!]!
  menuItem: MenuItem
}

"""
Moves items of menus. Requires one of the following permissions: MANAGE_MENUS.
"""
type MenuItemMove {
  """Assigned menu to move within."""
  menu: Menu
  menuErrors: [MenuError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [MenuError!]!
}

input MenuItemMoveInput {
  """The menu item ID to move."""
  itemId: ID!

  """ID of the parent menu. If empty, menu will be top level menu."""
  parentId: ID

  """
  The new relative sorting position of the item (from -inf to +inf). 1 moves the item one position forward, -1 moves the item one position backward, 0 leaves the item unchanged.
  """
  sortOrder: Int
}

"""
Request an invoice for the order using plugin. Requires one of the following permissions: MANAGE_ORDERS.
"""
type InvoiceRequest {
  """Order related to an invoice."""
  order: Order
  invoiceErrors: [InvoiceError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [InvoiceError!]!
  invoice: Invoice
}

type InvoiceError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: InvoiceErrorCode!
}

"""An enumeration."""
enum InvoiceErrorCode {
  REQUIRED
  NOT_READY
  URL_NOT_SET
  EMAIL_NOT_SET
  NUMBER_NOT_SET
  NOT_FOUND
  INVALID_STATUS
  NO_INVOICE_PLUGIN
}

"""
Requests deletion of an invoice. Requires one of the following permissions: MANAGE_ORDERS.
"""
type InvoiceRequestDelete {
  invoiceErrors: [InvoiceError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [InvoiceError!]!
  invoice: Invoice
}

"""
Creates a ready to send invoice. Requires one of the following permissions: MANAGE_ORDERS.
"""
type InvoiceCreate {
  invoiceErrors: [InvoiceError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [InvoiceError!]!
  invoice: Invoice
}

input InvoiceCreateInput {
  """Invoice number."""
  number: String!

  """URL of an invoice to download."""
  url: String!
}

"""
Deletes an invoice. Requires one of the following permissions: MANAGE_ORDERS.
"""
type InvoiceDelete {
  invoiceErrors: [InvoiceError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [InvoiceError!]!
  invoice: Invoice
}

"""
Updates an invoice. Requires one of the following permissions: MANAGE_ORDERS.
"""
type InvoiceUpdate {
  invoiceErrors: [InvoiceError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [InvoiceError!]!
  invoice: Invoice
}

input UpdateInvoiceInput {
  """Invoice number"""
  number: String

  """URL of an invoice to download."""
  url: String
}

"""
Send an invoice notification to the customer. Requires one of the following permissions: MANAGE_ORDERS.
"""
type InvoiceSendNotification {
  invoiceErrors: [InvoiceError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [InvoiceError!]!
  invoice: Invoice
}

"""
Activate a gift card. Requires one of the following permissions: MANAGE_GIFT_CARD.
"""
type GiftCardActivate {
  """Activated gift card."""
  giftCard: GiftCard
  giftCardErrors: [GiftCardError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [GiftCardError!]!
}

type GiftCardError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: GiftCardErrorCode!

  """List of tag values that cause the error."""
  tags: [String!]
}

"""An enumeration."""
enum GiftCardErrorCode {
  ALREADY_EXISTS
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
  EXPIRED_GIFT_CARD
  DUPLICATED_INPUT_ITEM
}

"""
Creates a new gift card. Requires one of the following permissions: MANAGE_GIFT_CARD.
"""
type GiftCardCreate {
  giftCardErrors: [GiftCardError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [GiftCardError!]!
  giftCard: GiftCard
}

input GiftCardCreateInput {
  """
  Added in Saleor 3.1. The gift card tags to add. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  addTags: [String!]

  """
  Added in Saleor 3.1. The gift card expiry date. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  expiryDate: Date

  """
  Start date of the gift card in ISO 8601 format. 
  
  DEPRECATED: this field will be removed in Saleor 4.0.
  """
  startDate: Date

  """
  End date of the gift card in ISO 8601 format. 
  
  DEPRECATED: this field will be removed in Saleor 4.0. Use `expiryDate` from `expirySettings` instead.
  """
  endDate: Date

  """Balance of the gift card."""
  balance: PriceInput!

  """Email of the customer to whom gift card will be sent."""
  userEmail: String

  """
  Added in Saleor 3.1. Slug of a channel from which the email should be sent. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  channel: String

  """
  Added in Saleor 3.1. Determine if gift card is active. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  isActive: Boolean!

  """
  Code to use the gift card. 
  
  DEPRECATED: this field will be removed in Saleor 4.0. The code is now auto generated.
  """
  code: String

  """
  Added in Saleor 3.1. The gift card note from the staff member. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  note: String
}

input PriceInput {
  """Currency code."""
  currency: String!

  """Amount of money."""
  amount: PositiveDecimal!
}

"""
Added in Saleor 3.1. Delete gift card. Note: this feature is in a preview state and can be subject to changes at later point. Requires one of the following permissions: MANAGE_GIFT_CARD.
"""
type GiftCardDelete {
  giftCardErrors: [GiftCardError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [GiftCardError!]!
  giftCard: GiftCard
}

"""
Deactivate a gift card. Requires one of the following permissions: MANAGE_GIFT_CARD.
"""
type GiftCardDeactivate {
  """Deactivated gift card."""
  giftCard: GiftCard
  giftCardErrors: [GiftCardError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [GiftCardError!]!
}

"""
Update a gift card. Requires one of the following permissions: MANAGE_GIFT_CARD.
"""
type GiftCardUpdate {
  giftCardErrors: [GiftCardError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [GiftCardError!]!
  giftCard: GiftCard
}

input GiftCardUpdateInput {
  """
  Added in Saleor 3.1. The gift card tags to add. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  addTags: [String!]

  """
  Added in Saleor 3.1. The gift card expiry date. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  expiryDate: Date

  """
  Start date of the gift card in ISO 8601 format. 
  
  DEPRECATED: this field will be removed in Saleor 4.0.
  """
  startDate: Date

  """
  End date of the gift card in ISO 8601 format. 
  
  DEPRECATED: this field will be removed in Saleor 4.0. Use `expiryDate` from `expirySettings` instead.
  """
  endDate: Date

  """
  Added in Saleor 3.1. The gift card tags to remove. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  removeTags: [String!]

  """
  Added in Saleor 3.1. The gift card balance amount. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  balanceAmount: PositiveDecimal
}

"""
Added in Saleor 3.1. Resend a gift card. Note: this feature is in a preview state and can be subject to changes at later point. Requires one of the following permissions: MANAGE_GIFT_CARD.
"""
type GiftCardResend {
  """Gift card which has been sent."""
  giftCard: GiftCard
  errors: [GiftCardError!]!
}

input GiftCardResendInput {
  """ID of a gift card to resend."""
  id: ID!

  """Email to which gift card should be send."""
  email: String

  """Slug of a channel from which the email should be sent."""
  channel: String!
}

"""
Added in Saleor 3.1. Adds note to the gift card. Note: this feature is in a preview state and can be subject to changes at later point. Requires one of the following permissions: MANAGE_GIFT_CARD.
"""
type GiftCardAddNote {
  """Gift card with the note added."""
  giftCard: GiftCard

  """Gift card note created."""
  event: GiftCardEvent
  errors: [GiftCardError!]!
}

input GiftCardAddNoteInput {
  """Note message."""
  message: String!
}

"""
Added in Saleor 3.1. Create gift cards. Note: this feature is in a preview state and can be subject to changes at later point. Requires one of the following permissions: MANAGE_GIFT_CARD.
"""
type GiftCardBulkCreate {
  """Returns how many objects were created."""
  count: Int!

  """List of created gift cards."""
  giftCards: [GiftCard!]!
  errors: [GiftCardError!]!
}

input GiftCardBulkCreateInput {
  """The number of cards to issue."""
  count: Int!

  """Balance of the gift card."""
  balance: PriceInput!

  """The gift card tags."""
  tags: [String!]

  """The gift card expiry date."""
  expiryDate: Date

  """Determine if gift card is active."""
  isActive: Boolean!
}

"""
Added in Saleor 3.1. Delete gift cards. Note: this feature is in a preview state and can be subject to changes at later point. Requires one of the following permissions: MANAGE_GIFT_CARD.
"""
type GiftCardBulkDelete {
  """Returns how many objects were affected."""
  count: Int!
  errors: [GiftCardError!]!
}

"""
Added in Saleor 3.1. Activate gift cards. Note: this feature is in a preview state and can be subject to changes at later point. Requires one of the following permissions: MANAGE_GIFT_CARD.
"""
type GiftCardBulkActivate {
  """Returns how many objects were affected."""
  count: Int!
  errors: [GiftCardError!]!
}

"""
Added in Saleor 3.1. Deactivate gift cards. Note: this feature is in a preview state and can be subject to changes at later point. Requires one of the following permissions: MANAGE_GIFT_CARD.
"""
type GiftCardBulkDeactivate {
  """Returns how many objects were affected."""
  count: Int!
  errors: [GiftCardError!]!
}

"""
Update plugin configuration. Requires one of the following permissions: MANAGE_PLUGINS.
"""
type PluginUpdate {
  plugin: Plugin
  pluginsErrors: [PluginError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [PluginError!]!
}

type PluginError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: PluginErrorCode!
}

"""An enumeration."""
enum PluginErrorCode {
  GRAPHQL_ERROR
  INVALID
  PLUGIN_MISCONFIGURED
  NOT_FOUND
  REQUIRED
  UNIQUE
}

input PluginUpdateInput {
  """Indicates whether the plugin should be enabled."""
  active: Boolean

  """Configuration of the plugin."""
  configuration: [ConfigurationItemInput!]
}

input ConfigurationItemInput {
  """Name of the field to update."""
  name: String!

  """Value of the given field to update."""
  value: String
}

"""
Added in Saleor 3.1. Trigger sending a notification with the notify plugin method. Serializes nodes provided as ids parameter and includes this data in the notification payload.
"""
type ExternalNotificationTrigger {
  errors: [ExternalNotificationError!]!
}

type ExternalNotificationError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: ExternalNotificationErrorCodes!
}

"""An enumeration."""
enum ExternalNotificationErrorCodes {
  REQUIRED
  INVALID_MODEL_TYPE
  NOT_FOUND
  CHANNEL_INACTIVE
}

input ExternalNotificationTriggerInput {
  """
  The list of customers or orders node IDs that will be serialized and included in the notification payload.
  """
  ids: [ID!]!

  """
  Additional payload that will be merged with the one based on the bussines object ID.
  """
  extraPayload: JSONString

  """
  External event type. This field is passed to a plugin as an event type.
  """
  externalEventType: String!
}

"""
Creates a new sale. Requires one of the following permissions: MANAGE_DISCOUNTS.
"""
type SaleCreate {
  discountErrors: [DiscountError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [DiscountError!]!
  sale: Sale
}

type DiscountError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """List of products IDs which causes the error."""
  products: [ID!]

  """The error code."""
  code: DiscountErrorCode!

  """List of channels IDs which causes the error."""
  channels: [ID!]
}

"""An enumeration."""
enum DiscountErrorCode {
  ALREADY_EXISTS
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
  CANNOT_MANAGE_PRODUCT_WITHOUT_VARIANT
  DUPLICATED_INPUT_ITEM
}

input SaleInput {
  """Voucher name."""
  name: String

  """Fixed or percentage."""
  type: DiscountValueTypeEnum

  """Value of the voucher."""
  value: PositiveDecimal

  """Products related to the discount."""
  products: [ID!]
  variants: [ID!]

  """Categories related to the discount."""
  categories: [ID!]

  """Collections related to the discount."""
  collections: [ID!]

  """Start date of the voucher in ISO 8601 format."""
  startDate: DateTime

  """End date of the voucher in ISO 8601 format."""
  endDate: DateTime
}

"""
Deletes a sale. Requires one of the following permissions: MANAGE_DISCOUNTS.
"""
type SaleDelete {
  discountErrors: [DiscountError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [DiscountError!]!
  sale: Sale
}

"""
Deletes sales. Requires one of the following permissions: MANAGE_DISCOUNTS.
"""
type SaleBulkDelete {
  """Returns how many objects were affected."""
  count: Int!
  discountErrors: [DiscountError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [DiscountError!]!
}

"""
Updates a sale. Requires one of the following permissions: MANAGE_DISCOUNTS.
"""
type SaleUpdate {
  discountErrors: [DiscountError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [DiscountError!]!
  sale: Sale
}

"""
Adds products, categories, collections to a voucher. Requires one of the following permissions: MANAGE_DISCOUNTS.
"""
type SaleAddCatalogues {
  """Sale of which catalogue IDs will be modified."""
  sale: Sale
  discountErrors: [DiscountError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [DiscountError!]!
}

input CatalogueInput {
  """Products related to the discount."""
  products: [ID!]

  """Categories related to the discount."""
  categories: [ID!]

  """Collections related to the discount."""
  collections: [ID!]

  """Added in Saleor 3.1. Product variant related to the discount."""
  variants: [ID!]
}

"""
Removes products, categories, collections from a sale. Requires one of the following permissions: MANAGE_DISCOUNTS.
"""
type SaleRemoveCatalogues {
  """Sale of which catalogue IDs will be modified."""
  sale: Sale
  discountErrors: [DiscountError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [DiscountError!]!
}

"""
Creates/updates translations for a sale. Requires one of the following permissions: MANAGE_TRANSLATIONS.
"""
type SaleTranslate {
  translationErrors: [TranslationError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [TranslationError!]!
  sale: Sale
}

"""
Manage sale's availability in channels. Requires one of the following permissions: MANAGE_DISCOUNTS.
"""
type SaleChannelListingUpdate {
  """An updated sale instance."""
  sale: Sale
  discountErrors: [DiscountError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [DiscountError!]!
}

input SaleChannelListingInput {
  """List of channels to which the sale should be assigned."""
  addChannels: [SaleChannelListingAddInput!]

  """List of channels from which the sale should be unassigned."""
  removeChannels: [ID!]
}

input SaleChannelListingAddInput {
  """ID of a channel."""
  channelId: ID!

  """The value of the discount."""
  discountValue: PositiveDecimal!
}

"""
Creates a new voucher. Requires one of the following permissions: MANAGE_DISCOUNTS.
"""
type VoucherCreate {
  discountErrors: [DiscountError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [DiscountError!]!
  voucher: Voucher
}

input VoucherInput {
  """Voucher type: PRODUCT, CATEGORY SHIPPING or ENTIRE_ORDER."""
  type: VoucherTypeEnum

  """Voucher name."""
  name: String

  """Code to use the voucher."""
  code: String

  """Start date of the voucher in ISO 8601 format."""
  startDate: DateTime

  """End date of the voucher in ISO 8601 format."""
  endDate: DateTime

  """Choices: fixed or percentage."""
  discountValueType: DiscountValueTypeEnum

  """Products discounted by the voucher."""
  products: [ID!]

  """Added in Saleor 3.1. Variants discounted by the voucher."""
  variants: [ID!]

  """Collections discounted by the voucher."""
  collections: [ID!]

  """Categories discounted by the voucher."""
  categories: [ID!]

  """Minimal quantity of checkout items required to apply the voucher."""
  minCheckoutItemsQuantity: Int

  """Country codes that can be used with the shipping voucher."""
  countries: [String!]

  """Voucher should be applied to the cheapest item or entire order."""
  applyOncePerOrder: Boolean

  """Voucher should be applied once per customer."""
  applyOncePerCustomer: Boolean

  """Voucher can be used only by staff user."""
  onlyForStaff: Boolean

  """Limit number of times this voucher can be used in total."""
  usageLimit: Int
}

"""
Deletes a voucher. Requires one of the following permissions: MANAGE_DISCOUNTS.
"""
type VoucherDelete {
  discountErrors: [DiscountError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [DiscountError!]!
  voucher: Voucher
}

"""
Deletes vouchers. Requires one of the following permissions: MANAGE_DISCOUNTS.
"""
type VoucherBulkDelete {
  """Returns how many objects were affected."""
  count: Int!
  discountErrors: [DiscountError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [DiscountError!]!
}

"""
Updates a voucher. Requires one of the following permissions: MANAGE_DISCOUNTS.
"""
type VoucherUpdate {
  discountErrors: [DiscountError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [DiscountError!]!
  voucher: Voucher
}

"""
Adds products, categories, collections to a voucher. Requires one of the following permissions: MANAGE_DISCOUNTS.
"""
type VoucherAddCatalogues {
  """Voucher of which catalogue IDs will be modified."""
  voucher: Voucher
  discountErrors: [DiscountError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [DiscountError!]!
}

"""
Removes products, categories, collections from a voucher. Requires one of the following permissions: MANAGE_DISCOUNTS.
"""
type VoucherRemoveCatalogues {
  """Voucher of which catalogue IDs will be modified."""
  voucher: Voucher
  discountErrors: [DiscountError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [DiscountError!]!
}

"""
Creates/updates translations for a voucher. Requires one of the following permissions: MANAGE_TRANSLATIONS.
"""
type VoucherTranslate {
  translationErrors: [TranslationError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [TranslationError!]!
  voucher: Voucher
}

"""
Manage voucher's availability in channels. Requires one of the following permissions: MANAGE_DISCOUNTS.
"""
type VoucherChannelListingUpdate {
  """An updated voucher instance."""
  voucher: Voucher
  discountErrors: [DiscountError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [DiscountError!]!
}

input VoucherChannelListingInput {
  """List of channels to which the voucher should be assigned."""
  addChannels: [VoucherChannelListingAddInput!]

  """List of channels from which the voucher should be unassigned."""
  removeChannels: [ID!]
}

input VoucherChannelListingAddInput {
  """ID of a channel."""
  channelId: ID!

  """Value of the voucher."""
  discountValue: PositiveDecimal

  """Min purchase amount required to apply the voucher."""
  minAmountSpent: PositiveDecimal
}

"""
Export products to csv file. Requires one of the following permissions: MANAGE_PRODUCTS.
"""
type ExportProducts {
  """
  The newly created export file job which is responsible for export data.
  """
  exportFile: ExportFile
  exportErrors: [ExportError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ExportError!]!
}

type ExportError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: ExportErrorCode!
}

"""An enumeration."""
enum ExportErrorCode {
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
}

input ExportProductsInput {
  """Determine which products should be exported."""
  scope: ExportScope!

  """Filtering options for products."""
  filter: ProductFilterInput

  """List of products IDs to export."""
  ids: [ID!]

  """Input with info about fields which should be exported."""
  exportInfo: ExportInfoInput

  """Type of exported file."""
  fileType: FileTypesEnum!
}

enum ExportScope {
  """Export all products."""
  ALL

  """Export products with given ids."""
  IDS

  """Export the filtered products."""
  FILTER
}

input ExportInfoInput {
  """List of attribute ids witch should be exported."""
  attributes: [ID!]

  """List of warehouse ids witch should be exported."""
  warehouses: [ID!]

  """List of channels ids which should be exported."""
  channels: [ID!]

  """List of product fields witch should be exported."""
  fields: [ProductFieldEnum!]
}

enum ProductFieldEnum {
  NAME
  DESCRIPTION
  PRODUCT_TYPE
  CATEGORY
  PRODUCT_WEIGHT
  COLLECTIONS
  CHARGE_TAXES
  PRODUCT_MEDIA
  VARIANT_ID
  VARIANT_SKU
  VARIANT_WEIGHT
  VARIANT_MEDIA
}

"""An enumeration."""
enum FileTypesEnum {
  CSV
  XLSX
}

"""
Added in Saleor 3.1. Export gift cards to csv file. Note: this feature is in a preview state and can be subject to changes at later point. Requires one of the following permissions: MANAGE_GIFT_CARD.
"""
type ExportGiftCards {
  """
  The newly created export file job which is responsible for export data.
  """
  exportFile: ExportFile
  errors: [ExportError!]!
}

input ExportGiftCardsInput {
  """Determine which gift cards should be exported."""
  scope: ExportScope!

  """Filtering options for gift cards."""
  filter: GiftCardFilterInput

  """List of gift cards IDs to export."""
  ids: [ID!]

  """Type of exported file."""
  fileType: FileTypesEnum!
}

"""
Upload a file. This mutation must be sent as a `multipart` request. More detailed specs of the upload format can be found here: https://github.com/jaydenseric/graphql-multipart-request-spec Requires one of the following permissions: AUTHENTICATED_APP, AUTHENTICATED_STAFF_USER.
"""
type FileUpload {
  uploadedFile: File
  uploadErrors: [UploadError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [UploadError!]!
}

type UploadError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: UploadErrorCode!
}

"""An enumeration."""
enum UploadErrorCode {
  GRAPHQL_ERROR
}

"""Adds a gift card or a voucher to a checkout."""
type CheckoutAddPromoCode {
  """The checkout with the added gift card or voucher."""
  checkout: Checkout
  checkoutErrors: [CheckoutError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [CheckoutError!]!
}

type CheckoutError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: CheckoutErrorCode!

  """List of varint IDs which causes the error."""
  variants: [ID!]

  """List of line Ids which cause the error."""
  lines: [ID!]

  """A type of address that causes the error."""
  addressType: AddressTypeEnum
}

"""An enumeration."""
enum CheckoutErrorCode {
  BILLING_ADDRESS_NOT_SET
  CHECKOUT_NOT_FULLY_PAID
  GRAPHQL_ERROR
  PRODUCT_NOT_PUBLISHED
  PRODUCT_UNAVAILABLE_FOR_PURCHASE
  INSUFFICIENT_STOCK
  INVALID
  INVALID_SHIPPING_METHOD
  NOT_FOUND
  PAYMENT_ERROR
  QUANTITY_GREATER_THAN_LIMIT
  REQUIRED
  SHIPPING_ADDRESS_NOT_SET
  SHIPPING_METHOD_NOT_APPLICABLE
  DELIVERY_METHOD_NOT_APPLICABLE
  SHIPPING_METHOD_NOT_SET
  SHIPPING_NOT_REQUIRED
  TAX_ERROR
  UNIQUE
  VOUCHER_NOT_APPLICABLE
  GIFT_CARD_NOT_APPLICABLE
  ZERO_QUANTITY
  MISSING_CHANNEL_SLUG
  CHANNEL_INACTIVE
  UNAVAILABLE_VARIANT_IN_CHANNEL
  EMAIL_NOT_SET
  NO_LINES
}

"""Update billing address in the existing checkout."""
type CheckoutBillingAddressUpdate {
  """An updated checkout."""
  checkout: Checkout
  checkoutErrors: [CheckoutError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [CheckoutError!]!
}

"""
Completes the checkout. As a result a new order is created and a payment charge is made. This action requires a successful payment before it can be performed. In case additional confirmation step as 3D secure is required confirmationNeeded flag will be set to True and no order created until payment is confirmed with second call of this mutation.
"""
type CheckoutComplete {
  """Placed order."""
  order: Order

  """
  Set to true if payment needs to be confirmed before checkout is complete.
  """
  confirmationNeeded: Boolean!

  """Confirmation data used to process additional authorization steps."""
  confirmationData: JSONString
  checkoutErrors: [CheckoutError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [CheckoutError!]!
}

"""Create a new checkout."""
type CheckoutCreate {
  """
  Whether the checkout was created or the current active one was returned. Refer to checkoutLinesAdd and checkoutLinesUpdate to merge a cart with an active checkout.
  """
  created: Boolean @deprecated(reason: "This field will be removed in Saleor 4.0. Always returns `true`.")
  checkoutErrors: [CheckoutError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [CheckoutError!]!
  checkout: Checkout
}

input CheckoutCreateInput {
  """Slug of a channel in which to create a checkout."""
  channel: String

  """
  A list of checkout lines, each containing information about an item in the checkout.
  """
  lines: [CheckoutLineInput!]!

  """The customer's email address."""
  email: String

  """
  The mailing address to where the checkout will be shipped. Note: the address will be ignored if the checkout doesn't contain shippable items.
  """
  shippingAddress: AddressInput

  """Billing address of the customer."""
  billingAddress: AddressInput

  """Checkout language code."""
  languageCode: LanguageCodeEnum
}

input CheckoutLineInput {
  """The number of items purchased."""
  quantity: Int!

  """ID of the product variant."""
  variantId: ID!

  """
  Added in Saleor 3.1. Custom price of the item. Can be set only by apps with `HANDLE_CHECKOUTS` permission. When the line with the same variant will be provided multiple times, the last price will be used. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  price: PositiveDecimal
}

"""
Sets the customer as the owner of the checkout. Requires one of the following permissions: AUTHENTICATED_APP, AUTHENTICATED_USER.
"""
type CheckoutCustomerAttach {
  """An updated checkout."""
  checkout: Checkout
  checkoutErrors: [CheckoutError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [CheckoutError!]!
}

"""
Removes the user assigned as the owner of the checkout. Requires one of the following permissions: AUTHENTICATED_APP, AUTHENTICATED_USER.
"""
type CheckoutCustomerDetach {
  """An updated checkout."""
  checkout: Checkout
  checkoutErrors: [CheckoutError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [CheckoutError!]!
}

"""Updates email address in the existing checkout object."""
type CheckoutEmailUpdate {
  """An updated checkout."""
  checkout: Checkout
  checkoutErrors: [CheckoutError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [CheckoutError!]!
}

"""Deletes a CheckoutLine."""
type CheckoutLineDelete {
  """An updated checkout."""
  checkout: Checkout
  checkoutErrors: [CheckoutError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [CheckoutError!]!
}

"""Deletes checkout lines."""
type CheckoutLinesDelete {
  """An updated checkout."""
  checkout: Checkout
  errors: [CheckoutError!]!
}

"""
Adds a checkout line to the existing checkout.If line was already in checkout, its quantity will be increased.
"""
type CheckoutLinesAdd {
  """An updated checkout."""
  checkout: Checkout
  checkoutErrors: [CheckoutError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [CheckoutError!]!
}

"""Updates checkout line in the existing checkout."""
type CheckoutLinesUpdate {
  """An updated checkout."""
  checkout: Checkout
  checkoutErrors: [CheckoutError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [CheckoutError!]!
}

input CheckoutLineUpdateInput {
  """
  The number of items purchased. Optional for apps, required for any other users.
  """
  quantity: Int

  """ID of the product variant."""
  variantId: ID!

  """
  Added in Saleor 3.1. Custom price of the item. Can be set only by apps with `HANDLE_CHECKOUTS` permission. When the line with the same variant will be provided multiple times, the last price will be used. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  price: PositiveDecimal
}

"""Remove a gift card or a voucher from a checkout."""
type CheckoutRemovePromoCode {
  """The checkout with the removed gift card or voucher."""
  checkout: Checkout
  checkoutErrors: [CheckoutError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [CheckoutError!]!
}

"""Create a new payment for given checkout."""
type CheckoutPaymentCreate {
  """Related checkout object."""
  checkout: Checkout

  """A newly created payment."""
  payment: Payment
  paymentErrors: [PaymentError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [PaymentError!]!
}

input PaymentInput {
  """A gateway to use with that payment."""
  gateway: String!

  """
  Client-side generated payment token, representing customer's billing data in a secure manner.
  """
  token: String

  """
  Total amount of the transaction, including all taxes and discounts. If no amount is provided, the checkout total will be used.
  """
  amount: PositiveDecimal

  """
  URL of a storefront view where user should be redirected after requiring additional actions. Payment with additional actions will not be finished if this field is not provided.
  """
  returnUrl: String

  """Added in Saleor 3.1. Payment store type."""
  storePaymentMethod: StorePaymentMethodEnum = none

  """Added in Saleor 3.1. User public metadata."""
  metadata: [MetadataInput!]
}

"""Enum representing the type of a payment storage in a gateway."""
enum StorePaymentMethodEnum {
  """
  On session storage type. The payment is stored only to be reused when the customer is present in the checkout flow.
  """
  ON_SESSION

  """
  Off session storage type. The payment is stored to be reused even if the customer is absent.
  """
  OFF_SESSION

  """Storage is disabled. The payment is not stored."""
  NONE
}

"""Update shipping address in the existing checkout."""
type CheckoutShippingAddressUpdate {
  """An updated checkout."""
  checkout: Checkout
  checkoutErrors: [CheckoutError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [CheckoutError!]!
}

"""Updates the shipping method of the checkout."""
type CheckoutShippingMethodUpdate {
  """An updated checkout."""
  checkout: Checkout
  checkoutErrors: [CheckoutError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [CheckoutError!]!
}

"""
Added in Saleor 3.1. Updates the delivery method (shipping method or pick up point) of the checkout. Note: this feature is in a preview state and can be subject to changes at later point.
"""
type CheckoutDeliveryMethodUpdate {
  """An updated checkout."""
  checkout: Checkout
  errors: [CheckoutError!]!
}

"""Update language code in the existing checkout."""
type CheckoutLanguageCodeUpdate {
  """An updated checkout."""
  checkout: Checkout
  checkoutErrors: [CheckoutError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [CheckoutError!]!
}

"""
Added in Saleor 3.2. Create new order from existing checkout. Note: this feature is in a preview state and can be subject to changes at later point. Requires one of the following permissions: HANDLE_CHECKOUTS.
"""
type OrderCreateFromCheckout {
  """Placed order."""
  order: Order
  errors: [OrderCreateFromCheckoutError!]!
}

type OrderCreateFromCheckoutError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: OrderCreateFromCheckoutErrorCode!

  """List of variant IDs which causes the error."""
  variants: [ID!]

  """List of line Ids which cause the error."""
  lines: [ID!]
}

"""An enumeration."""
enum OrderCreateFromCheckoutErrorCode {
  GRAPHQL_ERROR
  CHECKOUT_NOT_FOUND
  CHANNEL_INACTIVE
  INSUFFICIENT_STOCK
  VOUCHER_NOT_APPLICABLE
  GIFT_CARD_NOT_APPLICABLE
  TAX_ERROR
  SHIPPING_METHOD_NOT_SET
  BILLING_ADDRESS_NOT_SET
  SHIPPING_ADDRESS_NOT_SET
  INVALID_SHIPPING_METHOD
  NO_LINES
  EMAIL_NOT_SET
  UNAVAILABLE_VARIANT_IN_CHANNEL
}

"""
Creates new channel. Requires one of the following permissions: MANAGE_CHANNELS.
"""
type ChannelCreate {
  channelErrors: [ChannelError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ChannelError!]!
  channel: Channel
}

type ChannelError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: ChannelErrorCode!

  """List of shipping zone IDs which causes the error."""
  shippingZones: [ID!]
}

"""An enumeration."""
enum ChannelErrorCode {
  ALREADY_EXISTS
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
  CHANNELS_CURRENCY_MUST_BE_THE_SAME
  CHANNEL_WITH_ORDERS
  DUPLICATED_INPUT_ITEM
}

input ChannelCreateInput {
  """isActive flag."""
  isActive: Boolean

  """Name of the channel."""
  name: String!

  """Slug of the channel."""
  slug: String!

  """Currency of the channel."""
  currencyCode: String!

  """
  Added in Saleor 3.1. Default country for the channel. Default country can be used in checkout to determine the stock quantities or calculate taxes when the country was not explicitly provided.
  """
  defaultCountry: CountryCode!

  """List of shipping zones to assign to the channel."""
  addShippingZones: [ID!]
}

"""
Update a channel. Requires one of the following permissions: MANAGE_CHANNELS.
"""
type ChannelUpdate {
  channelErrors: [ChannelError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ChannelError!]!
  channel: Channel
}

input ChannelUpdateInput {
  """isActive flag."""
  isActive: Boolean

  """Name of the channel."""
  name: String

  """Slug of the channel."""
  slug: String

  """
  Added in Saleor 3.1. Default country for the channel. Default country can be used in checkout to determine the stock quantities or calculate taxes when the country was not explicitly provided.
  """
  defaultCountry: CountryCode

  """List of shipping zones to assign to the channel."""
  addShippingZones: [ID!]

  """List of shipping zones to unassign from the channel."""
  removeShippingZones: [ID!]
}

"""
Delete a channel. Orders associated with the deleted channel will be moved to the target channel. Checkouts, product availability, and pricing will be removed. Requires one of the following permissions: MANAGE_CHANNELS.
"""
type ChannelDelete {
  channelErrors: [ChannelError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ChannelError!]!
  channel: Channel
}

input ChannelDeleteInput {
  """ID of channel to migrate orders from origin channel."""
  channelId: ID!
}

"""
Activate a channel. Requires one of the following permissions: MANAGE_CHANNELS.
"""
type ChannelActivate {
  """Activated channel."""
  channel: Channel
  channelErrors: [ChannelError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ChannelError!]!
}

"""
Deactivate a channel. Requires one of the following permissions: MANAGE_CHANNELS.
"""
type ChannelDeactivate {
  """Deactivated channel."""
  channel: Channel
  channelErrors: [ChannelError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [ChannelError!]!
}

"""Creates an attribute."""
type AttributeCreate {
  attribute: Attribute
  attributeErrors: [AttributeError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AttributeError!]!
}

type AttributeError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: AttributeErrorCode!
}

"""An enumeration."""
enum AttributeErrorCode {
  ALREADY_EXISTS
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

input AttributeCreateInput {
  """The input type to use for entering attribute values in the dashboard."""
  inputType: AttributeInputTypeEnum

  """The entity type which can be used as a reference."""
  entityType: AttributeEntityTypeEnum

  """Name of an attribute displayed in the interface."""
  name: String!

  """Internal representation of an attribute name."""
  slug: String

  """The attribute type."""
  type: AttributeTypeEnum!

  """The unit of attribute values."""
  unit: MeasurementUnitsEnum

  """List of attribute's values."""
  values: [AttributeValueCreateInput!]

  """Whether the attribute requires values to be passed or not."""
  valueRequired: Boolean

  """Whether the attribute is for variants only."""
  isVariantOnly: Boolean

  """Whether the attribute should be visible or not in storefront."""
  visibleInStorefront: Boolean

  """Whether the attribute can be filtered in storefront."""
  filterableInStorefront: Boolean

  """Whether the attribute can be filtered in dashboard."""
  filterableInDashboard: Boolean

  """
  The position of the attribute in the storefront navigation (0 by default).
  """
  storefrontSearchPosition: Int

  """Whether the attribute can be displayed in the admin product list."""
  availableInGrid: Boolean
}

input AttributeValueCreateInput {
  """
  Represent value of the attribute value (e.g. color values for swatch attributes).
  """
  value: String

  """Represents the text (JSON) of the attribute value."""
  richText: JSONString

  """URL of the file attribute. Every time, a new value is created."""
  fileUrl: String

  """File content type."""
  contentType: String

  """Name of a value displayed in the interface."""
  name: String!
}

"""
Deletes an attribute. Requires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
"""
type AttributeDelete {
  attributeErrors: [AttributeError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AttributeError!]!
  attribute: Attribute
}

"""
Updates attribute. Requires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
"""
type AttributeUpdate {
  attribute: Attribute
  attributeErrors: [AttributeError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AttributeError!]!
}

input AttributeUpdateInput {
  """Name of an attribute displayed in the interface."""
  name: String

  """Internal representation of an attribute name."""
  slug: String

  """The unit of attribute values."""
  unit: MeasurementUnitsEnum

  """IDs of values to be removed from this attribute."""
  removeValues: [ID!]

  """New values to be created for this attribute."""
  addValues: [AttributeValueUpdateInput!]

  """Whether the attribute requires values to be passed or not."""
  valueRequired: Boolean

  """Whether the attribute is for variants only."""
  isVariantOnly: Boolean

  """Whether the attribute should be visible or not in storefront."""
  visibleInStorefront: Boolean

  """Whether the attribute can be filtered in storefront."""
  filterableInStorefront: Boolean

  """Whether the attribute can be filtered in dashboard."""
  filterableInDashboard: Boolean

  """
  The position of the attribute in the storefront navigation (0 by default).
  """
  storefrontSearchPosition: Int

  """Whether the attribute can be displayed in the admin product list."""
  availableInGrid: Boolean
}

input AttributeValueUpdateInput {
  """
  Represent value of the attribute value (e.g. color values for swatch attributes).
  """
  value: String

  """Represents the text (JSON) of the attribute value."""
  richText: JSONString

  """URL of the file attribute. Every time, a new value is created."""
  fileUrl: String

  """File content type."""
  contentType: String

  """Name of a value displayed in the interface."""
  name: String
}

"""
Creates/updates translations for an attribute. Requires one of the following permissions: MANAGE_TRANSLATIONS.
"""
type AttributeTranslate {
  translationErrors: [TranslationError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [TranslationError!]!
  attribute: Attribute
}

"""
Deletes attributes. Requires one of the following permissions: MANAGE_PAGE_TYPES_AND_ATTRIBUTES.
"""
type AttributeBulkDelete {
  """Returns how many objects were affected."""
  count: Int!
  attributeErrors: [AttributeError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AttributeError!]!
}

"""
Deletes values of attributes. Requires one of the following permissions: MANAGE_PAGE_TYPES_AND_ATTRIBUTES.
"""
type AttributeValueBulkDelete {
  """Returns how many objects were affected."""
  count: Int!
  attributeErrors: [AttributeError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AttributeError!]!
}

"""
Creates a value for an attribute. Requires one of the following permissions: MANAGE_PRODUCTS.
"""
type AttributeValueCreate {
  """The updated attribute."""
  attribute: Attribute
  attributeErrors: [AttributeError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AttributeError!]!
  attributeValue: AttributeValue
}

"""
Deletes a value of an attribute. Requires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
"""
type AttributeValueDelete {
  """The updated attribute."""
  attribute: Attribute
  attributeErrors: [AttributeError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AttributeError!]!
  attributeValue: AttributeValue
}

"""
Updates value of an attribute. Requires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
"""
type AttributeValueUpdate {
  """The updated attribute."""
  attribute: Attribute
  attributeErrors: [AttributeError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AttributeError!]!
  attributeValue: AttributeValue
}

"""
Creates/updates translations for an attribute value. Requires one of the following permissions: MANAGE_TRANSLATIONS.
"""
type AttributeValueTranslate {
  translationErrors: [TranslationError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [TranslationError!]!
  attributeValue: AttributeValue
}

input AttributeValueTranslationInput {
  name: String
  richText: JSONString
}

"""
Reorder the values of an attribute. Requires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
"""
type AttributeReorderValues {
  """Attribute from which values are reordered."""
  attribute: Attribute
  attributeErrors: [AttributeError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AttributeError!]!
}

"""
Creates a new app. Requires the following permissions: AUTHENTICATED_STAFF_USER and MANAGE_APPS.
"""
type AppCreate {
  """The newly created authentication token."""
  authToken: String
  appErrors: [AppError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AppError!]!
  app: App
}

type AppError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: AppErrorCode!

  """List of permissions which causes the error."""
  permissions: [PermissionEnum!]
}

"""An enumeration."""
enum AppErrorCode {
  FORBIDDEN
  GRAPHQL_ERROR
  INVALID
  INVALID_STATUS
  INVALID_PERMISSION
  INVALID_URL_FORMAT
  INVALID_MANIFEST_FORMAT
  MANIFEST_URL_CANT_CONNECT
  NOT_FOUND
  REQUIRED
  UNIQUE
  OUT_OF_SCOPE_APP
  OUT_OF_SCOPE_PERMISSION
}

input AppInput {
  """Name of the app."""
  name: String

  """List of permission code names to assign to this app."""
  permissions: [PermissionEnum!]
}

"""
Updates an existing app. Requires one of the following permissions: MANAGE_APPS.
"""
type AppUpdate {
  appErrors: [AppError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AppError!]!
  app: App
}

"""
Deletes an app. Requires one of the following permissions: MANAGE_APPS.
"""
type AppDelete {
  appErrors: [AppError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AppError!]!
  app: App
}

"""
Creates a new token. Requires one of the following permissions: MANAGE_APPS.
"""
type AppTokenCreate {
  """The newly created authentication token."""
  authToken: String
  appErrors: [AppError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AppError!]!
  appToken: AppToken
}

input AppTokenInput {
  """Name of the token."""
  name: String

  """ID of app."""
  app: ID!
}

"""
Deletes an authentication token assigned to app. Requires one of the following permissions: MANAGE_APPS.
"""
type AppTokenDelete {
  appErrors: [AppError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AppError!]!
  appToken: AppToken
}

"""Verify provided app token."""
type AppTokenVerify {
  """Determine if token is valid or not."""
  valid: Boolean!
  appErrors: [AppError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AppError!]!
}

"""
Install new app by using app manifest. Requires the following permissions: AUTHENTICATED_STAFF_USER and MANAGE_APPS.
"""
type AppInstall {
  appErrors: [AppError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AppError!]!
  appInstallation: AppInstallation
}

input AppInstallInput {
  """Name of the app to install."""
  appName: String

  """Url to app's manifest in JSON format."""
  manifestUrl: String

  """Determine if app will be set active or not."""
  activateAfterInstallation: Boolean = true

  """List of permission code names to assign to this app."""
  permissions: [PermissionEnum!]
}

"""
Retry failed installation of new app. Requires one of the following permissions: MANAGE_APPS.
"""
type AppRetryInstall {
  appErrors: [AppError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AppError!]!
  appInstallation: AppInstallation
}

"""
Delete failed installation. Requires one of the following permissions: MANAGE_APPS.
"""
type AppDeleteFailedInstallation {
  appErrors: [AppError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AppError!]!
  appInstallation: AppInstallation
}

"""
Fetch and validate manifest. Requires one of the following permissions: MANAGE_APPS.
"""
type AppFetchManifest {
  manifest: Manifest
  appErrors: [AppError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AppError!]!
}

"""The manifest definition."""
type Manifest {
  identifier: String!
  version: String!
  name: String!
  about: String
  permissions: [Permission!]
  appUrl: String
  configurationUrl: String
  tokenTargetUrl: String
  dataPrivacy: String
  dataPrivacyUrl: String
  homepageUrl: String
  supportUrl: String
  extensions: [AppManifestExtension!]!
}

type AppManifestExtension {
  """List of the app extension's permissions."""
  permissions: [Permission!]!

  """Label of the extension to show in the dashboard."""
  label: String!

  """URL of a view where extension's iframe is placed."""
  url: String!

  """Place where given extension will be mounted."""
  mount: AppExtensionMountEnum!

  """Type of way how app extension will be opened."""
  target: AppExtensionTargetEnum!
}

"""
Activate the app. Requires one of the following permissions: MANAGE_APPS.
"""
type AppActivate {
  appErrors: [AppError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AppError!]!
  app: App
}

"""
Deactivate the app. Requires one of the following permissions: MANAGE_APPS.
"""
type AppDeactivate {
  appErrors: [AppError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AppError!]!
  app: App
}

"""Create JWT token."""
type CreateToken {
  """JWT token, required to authenticate."""
  token: String

  """JWT refresh token, required to re-generate access token."""
  refreshToken: String

  """CSRF token required to re-generate access token."""
  csrfToken: String

  """A user instance."""
  user: User
  accountErrors: [AccountError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AccountError!]!
}

"""
Refresh JWT token. Mutation tries to take refreshToken from the input.If it fails it will try to take refreshToken from the http-only cookie -refreshToken. csrfToken is required when refreshToken is provided as a cookie.
"""
type RefreshToken {
  """JWT token, required to authenticate."""
  token: String

  """A user instance."""
  user: User
  accountErrors: [AccountError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AccountError!]!
}

"""Verify JWT token."""
type VerifyToken {
  """User assigned to token."""
  user: User

  """Determine if token is valid or not."""
  isValid: Boolean!

  """JWT payload."""
  payload: GenericScalar
  accountErrors: [AccountError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AccountError!]!
}

"""
The `GenericScalar` scalar type represents a generic
GraphQL scalar value that could be:
String, Boolean, Int, Float, List or Object.
"""
scalar GenericScalar

"""
Deactivate all JWT tokens of the currently authenticated user. Requires one of the following permissions: AUTHENTICATED_USER.
"""
type DeactivateAllUserTokens {
  accountErrors: [AccountError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AccountError!]!
}

"""Prepare external authentication url for user by custom plugin."""
type ExternalAuthenticationUrl {
  """The data returned by authentication plugin."""
  authenticationData: JSONString
  accountErrors: [AccountError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AccountError!]!
}

"""Obtain external access tokens for user by custom plugin."""
type ExternalObtainAccessTokens {
  """The token, required to authenticate."""
  token: String

  """The refresh token, required to re-generate external access token."""
  refreshToken: String

  """CSRF token required to re-generate external access token."""
  csrfToken: String

  """A user instance."""
  user: User
  accountErrors: [AccountError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AccountError!]!
}

"""Refresh user's access by custom plugin."""
type ExternalRefresh {
  """The token, required to authenticate."""
  token: String

  """The refresh token, required to re-generate external access token."""
  refreshToken: String

  """CSRF token required to re-generate external access token."""
  csrfToken: String

  """A user instance."""
  user: User
  accountErrors: [AccountError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AccountError!]!
}

"""Logout user by custom plugin."""
type ExternalLogout {
  """The data returned by authentication plugin."""
  logoutData: JSONString
  accountErrors: [AccountError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AccountError!]!
}

"""Verify external authentication data by plugin."""
type ExternalVerify {
  """User assigned to data."""
  user: User

  """Determine if authentication data is valid or not."""
  isValid: Boolean!

  """External data."""
  verifyData: JSONString
  accountErrors: [AccountError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AccountError!]!
}

"""Sends an email with the account password modification link."""
type RequestPasswordReset {
  accountErrors: [AccountError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AccountError!]!
}

"""Confirm user account with token sent by email during registration."""
type ConfirmAccount {
  """An activated user account."""
  user: User
  accountErrors: [AccountError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AccountError!]!
}

"""
Sets the user's password from the token sent by email using the RequestPasswordReset mutation.
"""
type SetPassword {
  """JWT token, required to authenticate."""
  token: String

  """JWT refresh token, required to re-generate access token."""
  refreshToken: String

  """CSRF token required to re-generate access token."""
  csrfToken: String

  """A user instance."""
  user: User
  accountErrors: [AccountError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AccountError!]!
}

"""
Change the password of the logged in user. Requires one of the following permissions: AUTHENTICATED_USER.
"""
type PasswordChange {
  """A user instance with a new password."""
  user: User
  accountErrors: [AccountError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AccountError!]!
}

"""
Request email change of the logged in user. Requires one of the following permissions: AUTHENTICATED_USER.
"""
type RequestEmailChange {
  """A user instance."""
  user: User
  accountErrors: [AccountError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AccountError!]!
}

"""
Confirm the email change of the logged-in user. Requires one of the following permissions: AUTHENTICATED_USER.
"""
type ConfirmEmailChange {
  """A user instance with a new email."""
  user: User
  accountErrors: [AccountError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AccountError!]!
}

"""
Create a new address for the customer. Requires one of the following permissions: AUTHENTICATED_USER.
"""
type AccountAddressCreate {
  """A user instance for which the address was created."""
  user: User
  accountErrors: [AccountError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AccountError!]!
  address: Address
}

"""
Updates an address of the logged-in user. Requires one of the following permissions: MANAGE_USERS, IS_OWNER.
"""
type AccountAddressUpdate {
  """A user object for which the address was edited."""
  user: User
  accountErrors: [AccountError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AccountError!]!
  address: Address
}

"""
Delete an address of the logged-in user. Requires one of the following permissions: MANAGE_USERS, IS_OWNER.
"""
type AccountAddressDelete {
  """A user instance for which the address was deleted."""
  user: User
  accountErrors: [AccountError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AccountError!]!
  address: Address
}

"""
Sets a default address for the authenticated user. Requires one of the following permissions: AUTHENTICATED_USER.
"""
type AccountSetDefaultAddress {
  """An updated user instance."""
  user: User
  accountErrors: [AccountError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AccountError!]!
}

"""Register a new user."""
type AccountRegister {
  """Informs whether users need to confirm their email address."""
  requiresConfirmation: Boolean
  accountErrors: [AccountError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AccountError!]!
  user: User
}

input AccountRegisterInput {
  """Given name."""
  firstName: String

  """Family name."""
  lastName: String

  """User language code."""
  languageCode: LanguageCodeEnum

  """The email address of the user."""
  email: String!

  """Password."""
  password: String!

  """Base of frontend URL that will be needed to create confirmation URL."""
  redirectUrl: String

  """User public metadata."""
  metadata: [MetadataInput!]

  """
  Slug of a channel which will be used to notify users. Optional when only one channel exists.
  """
  channel: String
}

"""
Updates the account of the logged-in user. Requires one of the following permissions: AUTHENTICATED_USER.
"""
type AccountUpdate {
  accountErrors: [AccountError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AccountError!]!
  user: User
}

input AccountInput {
  """Given name."""
  firstName: String

  """Family name."""
  lastName: String

  """User language code."""
  languageCode: LanguageCodeEnum

  """Billing address of the customer."""
  defaultBillingAddress: AddressInput

  """Shipping address of the customer."""
  defaultShippingAddress: AddressInput
}

"""
Sends an email with the account removal link for the logged-in user. Requires one of the following permissions: AUTHENTICATED_USER.
"""
type AccountRequestDeletion {
  accountErrors: [AccountError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AccountError!]!
}

"""
Remove user account. Requires one of the following permissions: AUTHENTICATED_USER.
"""
type AccountDelete {
  accountErrors: [AccountError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AccountError!]!
  user: User
}

"""
Creates user address. Requires one of the following permissions: MANAGE_USERS.
"""
type AddressCreate {
  """A user instance for which the address was created."""
  user: User
  accountErrors: [AccountError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AccountError!]!
  address: Address
}

"""
Updates an address. Requires one of the following permissions: MANAGE_USERS.
"""
type AddressUpdate {
  """A user object for which the address was edited."""
  user: User
  accountErrors: [AccountError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AccountError!]!
  address: Address
}

"""
Deletes an address. Requires one of the following permissions: MANAGE_USERS.
"""
type AddressDelete {
  """A user instance for which the address was deleted."""
  user: User
  accountErrors: [AccountError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AccountError!]!
  address: Address
}

"""
Sets a default address for the given user. Requires one of the following permissions: MANAGE_USERS.
"""
type AddressSetDefault {
  """An updated user instance."""
  user: User
  accountErrors: [AccountError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AccountError!]!
}

"""
Creates a new customer. Requires one of the following permissions: MANAGE_USERS.
"""
type CustomerCreate {
  accountErrors: [AccountError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AccountError!]!
  user: User
}

input UserCreateInput {
  """Billing address of the customer."""
  defaultBillingAddress: AddressInput

  """Shipping address of the customer."""
  defaultShippingAddress: AddressInput

  """Given name."""
  firstName: String

  """Family name."""
  lastName: String

  """The unique email address of the user."""
  email: String

  """User account is active."""
  isActive: Boolean

  """A note about the user."""
  note: String

  """User language code."""
  languageCode: LanguageCodeEnum

  """
  URL of a view where users should be redirected to set the password. URL in RFC 1808 format.
  """
  redirectUrl: String

  """
  Slug of a channel which will be used for notify user. Optional when only one channel exists.
  """
  channel: String
}

"""
Updates an existing customer. Requires one of the following permissions: MANAGE_USERS.
"""
type CustomerUpdate {
  accountErrors: [AccountError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AccountError!]!
  user: User
}

input CustomerInput {
  """Billing address of the customer."""
  defaultBillingAddress: AddressInput

  """Shipping address of the customer."""
  defaultShippingAddress: AddressInput

  """Given name."""
  firstName: String

  """Family name."""
  lastName: String

  """The unique email address of the user."""
  email: String

  """User account is active."""
  isActive: Boolean

  """A note about the user."""
  note: String

  """User language code."""
  languageCode: LanguageCodeEnum
}

"""
Deletes a customer. Requires one of the following permissions: MANAGE_USERS.
"""
type CustomerDelete {
  accountErrors: [AccountError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AccountError!]!
  user: User
}

"""
Deletes customers. Requires one of the following permissions: MANAGE_USERS.
"""
type CustomerBulkDelete {
  """Returns how many objects were affected."""
  count: Int!
  accountErrors: [AccountError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AccountError!]!
}

"""
Creates a new staff user. Requires one of the following permissions: MANAGE_STAFF.
"""
type StaffCreate {
  staffErrors: [StaffError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [StaffError!]!
  user: User
}

type StaffError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: AccountErrorCode!

  """A type of address that causes the error."""
  addressType: AddressTypeEnum

  """List of permissions which causes the error."""
  permissions: [PermissionEnum!]

  """List of permission group IDs which cause the error."""
  groups: [ID!]

  """List of user IDs which causes the error."""
  users: [ID!]
}

input StaffCreateInput {
  """Given name."""
  firstName: String

  """Family name."""
  lastName: String

  """The unique email address of the user."""
  email: String

  """User account is active."""
  isActive: Boolean

  """A note about the user."""
  note: String

  """List of permission group IDs to which user should be assigned."""
  addGroups: [ID!]

  """
  URL of a view where users should be redirected to set the password. URL in RFC 1808 format.
  """
  redirectUrl: String
}

"""
Updates an existing staff user. Requires one of the following permissions: MANAGE_STAFF.
"""
type StaffUpdate {
  staffErrors: [StaffError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [StaffError!]!
  user: User
}

input StaffUpdateInput {
  """Given name."""
  firstName: String

  """Family name."""
  lastName: String

  """The unique email address of the user."""
  email: String

  """User account is active."""
  isActive: Boolean

  """A note about the user."""
  note: String

  """List of permission group IDs to which user should be assigned."""
  addGroups: [ID!]

  """List of permission group IDs from which user should be unassigned."""
  removeGroups: [ID!]
}

"""
Deletes a staff user. Requires one of the following permissions: MANAGE_STAFF.
"""
type StaffDelete {
  staffErrors: [StaffError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [StaffError!]!
  user: User
}

"""
Deletes staff users. Requires one of the following permissions: MANAGE_STAFF.
"""
type StaffBulkDelete {
  """Returns how many objects were affected."""
  count: Int!
  staffErrors: [StaffError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [StaffError!]!
}

"""
Create a user avatar. Only for staff members. This mutation must be sent as a `multipart` request. More detailed specs of the upload format can be found here: https://github.com/jaydenseric/graphql-multipart-request-spec Requires one of the following permissions: AUTHENTICATED_STAFF_USER.
"""
type UserAvatarUpdate {
  """An updated user instance."""
  user: User
  accountErrors: [AccountError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AccountError!]!
}

"""
Deletes a user avatar. Only for staff members. Requires one of the following permissions: AUTHENTICATED_STAFF_USER.
"""
type UserAvatarDelete {
  """An updated user instance."""
  user: User
  accountErrors: [AccountError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AccountError!]!
}

"""
Activate or deactivate users. Requires one of the following permissions: MANAGE_USERS.
"""
type UserBulkSetActive {
  """Returns how many objects were affected."""
  count: Int!
  accountErrors: [AccountError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [AccountError!]!
}

"""
Create new permission group. Requires one of the following permissions: MANAGE_STAFF.
"""
type PermissionGroupCreate {
  permissionGroupErrors: [PermissionGroupError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [PermissionGroupError!]!
  group: Group
}

type PermissionGroupError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: PermissionGroupErrorCode!

  """List of permissions which causes the error."""
  permissions: [PermissionEnum!]

  """List of user IDs which causes the error."""
  users: [ID!]
}

"""An enumeration."""
enum PermissionGroupErrorCode {
  ASSIGN_NON_STAFF_MEMBER
  DUPLICATED_INPUT_ITEM
  CANNOT_REMOVE_FROM_LAST_GROUP
  LEFT_NOT_MANAGEABLE_PERMISSION
  OUT_OF_SCOPE_PERMISSION
  OUT_OF_SCOPE_USER
  REQUIRED
  UNIQUE
}

input PermissionGroupCreateInput {
  """List of permission code names to assign to this group."""
  addPermissions: [PermissionEnum!]

  """List of users to assign to this group."""
  addUsers: [ID!]

  """Group name."""
  name: String!
}

"""
Update permission group. Requires one of the following permissions: MANAGE_STAFF.
"""
type PermissionGroupUpdate {
  permissionGroupErrors: [PermissionGroupError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [PermissionGroupError!]!
  group: Group
}

input PermissionGroupUpdateInput {
  """List of permission code names to assign to this group."""
  addPermissions: [PermissionEnum!]

  """List of users to assign to this group."""
  addUsers: [ID!]

  """Group name."""
  name: String

  """List of permission code names to unassign from this group."""
  removePermissions: [PermissionEnum!]

  """List of users to unassign from this group."""
  removeUsers: [ID!]
}

"""
Delete permission group. Requires one of the following permissions: MANAGE_STAFF.
"""
type PermissionGroupDelete {
  permissionGroupErrors: [PermissionGroupError!]! @deprecated(reason: "This field will be removed in Saleor 4.0. Use `errors` field instead.")
  errors: [PermissionGroupError!]!
  group: Group
}

type Subscription {
  """
  Added in Saleor 3.2. Look up subscription event. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  event: Event
}

union Event = CategoryCreated | CategoryUpdated | CategoryDeleted | ChannelCreated | ChannelUpdated | ChannelDeleted | ChannelStatusChanged | GiftCardCreated | GiftCardUpdated | GiftCardDeleted | GiftCardStatusChanged | OrderCreated | OrderUpdated | OrderConfirmed | OrderFullyPaid | OrderCancelled | OrderFulfilled | DraftOrderCreated | DraftOrderUpdated | DraftOrderDeleted | ProductCreated | ProductUpdated | ProductDeleted | ProductVariantCreated | ProductVariantUpdated | ProductVariantOutOfStock | ProductVariantBackInStock | ProductVariantDeleted | SaleCreated | SaleUpdated | SaleDeleted | InvoiceRequested | InvoiceDeleted | InvoiceSent | FulfillmentCreated | FulfillmentCanceled | CustomerCreated | CustomerUpdated | CollectionCreated | CollectionUpdated | CollectionDeleted | CheckoutCreated | CheckoutUpdated | PageCreated | PageUpdated | PageDeleted | ShippingPriceCreated | ShippingPriceUpdated | ShippingPriceDeleted | ShippingZoneCreated | ShippingZoneUpdated | ShippingZoneDeleted | TranslationCreated | TranslationUpdated

type CategoryCreated {
  """
  Added in Saleor 3.2. Look up a category. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  category: Category
}

type CategoryUpdated {
  """
  Added in Saleor 3.2. Look up a category. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  category: Category
}

type CategoryDeleted {
  """
  Added in Saleor 3.2. Look up a category. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  category: Category
}

type ChannelCreated {
  """
  Added in Saleor 3.2. Look up a channel. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  channel: Channel
}

type ChannelUpdated {
  """
  Added in Saleor 3.2. Look up a channel. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  channel: Channel
}

type ChannelDeleted {
  """
  Added in Saleor 3.2. Look up a channel. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  channel: Channel
}

type ChannelStatusChanged {
  """
  Added in Saleor 3.2. Look up a channel. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  channel: Channel
}

type GiftCardCreated {
  """
  Added in Saleor 3.2. Look up a gift card. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  giftCard: GiftCard
}

type GiftCardUpdated {
  """
  Added in Saleor 3.2. Look up a gift card. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  giftCard: GiftCard
}

type GiftCardDeleted {
  """
  Added in Saleor 3.2. Look up a gift card. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  giftCard: GiftCard
}

type GiftCardStatusChanged {
  """
  Added in Saleor 3.2. Look up a gift card. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  giftCard: GiftCard
}

type OrderCreated {
  """
  Added in Saleor 3.2. Look up an order. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  order: Order
}

type OrderUpdated {
  """
  Added in Saleor 3.2. Look up an order. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  order: Order
}

type OrderConfirmed {
  """
  Added in Saleor 3.2. Look up an order. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  order: Order
}

type OrderFullyPaid {
  """
  Added in Saleor 3.2. Look up an order. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  order: Order
}

type OrderCancelled {
  """
  Added in Saleor 3.2. Look up an order. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  order: Order
}

type OrderFulfilled {
  """
  Added in Saleor 3.2. Look up an order. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  order: Order
}

type DraftOrderCreated {
  """
  Added in Saleor 3.2. Look up an order. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  order: Order
}

type DraftOrderUpdated {
  """
  Added in Saleor 3.2. Look up an order. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  order: Order
}

type DraftOrderDeleted {
  """
  Added in Saleor 3.2. Look up an order. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  order: Order
}

type ProductCreated {
  """
  Added in Saleor 3.2. Look up a product. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  product(
    """Slug of a channel for which the data should be returned."""
    channel: String
  ): Product

  """
  Added in Saleor 3.2. Look up a category. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  category: Category
}

type ProductUpdated {
  """
  Added in Saleor 3.2. Look up a product. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  product(
    """Slug of a channel for which the data should be returned."""
    channel: String
  ): Product

  """
  Added in Saleor 3.2. Look up a category. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  category: Category
}

type ProductDeleted {
  """
  Added in Saleor 3.2. Look up a product. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  product(
    """Slug of a channel for which the data should be returned."""
    channel: String
  ): Product

  """
  Added in Saleor 3.2. Look up a category. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  category: Category
}

type ProductVariantCreated {
  """
  Added in Saleor 3.2. Look up a product variant. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  productVariant(
    """Slug of a channel for which the data should be returned."""
    channel: String
  ): ProductVariant
}

type ProductVariantUpdated {
  """
  Added in Saleor 3.2. Look up a product variant. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  productVariant(
    """Slug of a channel for which the data should be returned."""
    channel: String
  ): ProductVariant
}

type ProductVariantOutOfStock {
  """
  Added in Saleor 3.2. Look up a product variant. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  productVariant(
    """Slug of a channel for which the data should be returned."""
    channel: String
  ): ProductVariant

  """
  Added in Saleor 3.2. Look up a warehouse. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  warehouse: Warehouse
}

type ProductVariantBackInStock {
  """
  Added in Saleor 3.2. Look up a product variant. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  productVariant(
    """Slug of a channel for which the data should be returned."""
    channel: String
  ): ProductVariant

  """
  Added in Saleor 3.2. Look up a warehouse. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  warehouse: Warehouse
}

type ProductVariantDeleted {
  """
  Added in Saleor 3.2. Look up a product variant. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  productVariant(
    """Slug of a channel for which the data should be returned."""
    channel: String
  ): ProductVariant
}

type SaleCreated {
  """
  Added in Saleor 3.2. Look up a sale. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  sale(
    """Slug of a channel for which the data should be returned."""
    channel: String
  ): Sale
}

type SaleUpdated {
  """
  Added in Saleor 3.2. Look up a sale. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  sale(
    """Slug of a channel for which the data should be returned."""
    channel: String
  ): Sale
}

type SaleDeleted {
  """
  Added in Saleor 3.2. Look up a sale. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  sale(
    """Slug of a channel for which the data should be returned."""
    channel: String
  ): Sale
}

type InvoiceRequested {
  """
  Added in Saleor 3.2. Look up an Invoice. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  invoice: Invoice
}

type InvoiceDeleted {
  """
  Added in Saleor 3.2. Look up an Invoice. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  invoice: Invoice
}

type InvoiceSent {
  """
  Added in Saleor 3.2. Look up an Invoice. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  invoice: Invoice
}

type FulfillmentCreated {
  """
  Added in Saleor 3.2. Look up a Fulfillment. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  fulfillment: Fulfillment
}

type FulfillmentCanceled {
  """
  Added in Saleor 3.2. Look up a Fulfillment. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  fulfillment: Fulfillment
}

type CustomerCreated {
  """
  Added in Saleor 3.2. Look up a user. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  user: User
}

type CustomerUpdated {
  """
  Added in Saleor 3.2. Look up a user. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  user: User
}

type CollectionCreated {
  """
  Added in Saleor 3.2. Look up a collection. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  collection(
    """Slug of a channel for which the data should be returned."""
    channel: String
  ): Collection
}

type CollectionUpdated {
  """
  Added in Saleor 3.2. Look up a collection. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  collection(
    """Slug of a channel for which the data should be returned."""
    channel: String
  ): Collection
}

type CollectionDeleted {
  """
  Added in Saleor 3.2. Look up a collection. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  collection(
    """Slug of a channel for which the data should be returned."""
    channel: String
  ): Collection
}

type CheckoutCreated {
  """
  Added in Saleor 3.2. Look up a Checkout. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  checkout: Checkout
}

type CheckoutUpdated {
  """
  Added in Saleor 3.2. Look up a Checkout. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  checkout: Checkout
}

type PageCreated {
  """
  Added in Saleor 3.2. Look up a page. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  page: Page
}

type PageUpdated {
  """
  Added in Saleor 3.2. Look up a page. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  page: Page
}

type PageDeleted {
  """
  Added in Saleor 3.2. Look up a page. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  page: Page
}

type ShippingPriceCreated {
  """
  Added in Saleor 3.2. Look up a shipping method. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  shippingMethod(
    """Slug of a channel for which the data should be returned."""
    channel: String
  ): ShippingMethodType

  """
  Added in Saleor 3.2. Look up a shipping zone. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  shippingZone(
    """Slug of a channel for which the data should be returned."""
    channel: String
  ): ShippingZone
}

type ShippingPriceUpdated {
  """
  Added in Saleor 3.2. Look up a shipping method. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  shippingMethod(
    """Slug of a channel for which the data should be returned."""
    channel: String
  ): ShippingMethodType

  """
  Added in Saleor 3.2. Look up a shipping zone. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  shippingZone(
    """Slug of a channel for which the data should be returned."""
    channel: String
  ): ShippingZone
}

type ShippingPriceDeleted {
  """
  Added in Saleor 3.2. Look up a shipping method. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  shippingMethod(
    """Slug of a channel for which the data should be returned."""
    channel: String
  ): ShippingMethodType

  """
  Added in Saleor 3.2. Look up a shipping zone. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  shippingZone(
    """Slug of a channel for which the data should be returned."""
    channel: String
  ): ShippingZone
}

type ShippingZoneCreated {
  """
  Added in Saleor 3.2. Look up a shipping zone. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  shippingZone(
    """Slug of a channel for which the data should be returned."""
    channel: String
  ): ShippingZone
}

type ShippingZoneUpdated {
  """
  Added in Saleor 3.2. Look up a shipping zone. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  shippingZone(
    """Slug of a channel for which the data should be returned."""
    channel: String
  ): ShippingZone
}

type ShippingZoneDeleted {
  """
  Added in Saleor 3.2. Look up a shipping zone. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  shippingZone(
    """Slug of a channel for which the data should be returned."""
    channel: String
  ): ShippingZone
}

type TranslationCreated {
  """
  Added in Saleor 3.2. Look up a translation. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  translation: TranslationTypes
}

union TranslationTypes = ProductTranslation | CollectionTranslation | CategoryTranslation | AttributeTranslation | AttributeValueTranslation | ProductVariantTranslation | PageTranslation | ShippingMethodTranslation | SaleTranslation | VoucherTranslation | MenuItemTranslation

type TranslationUpdated {
  """
  Added in Saleor 3.2. Look up a translation. Note: this feature is in a preview state and can be subject to changes at later point.
  """
  translation: TranslationTypes
}

"""An enumeration."""
enum DistanceUnitsEnum {
  CM
  M
  KM
  FT
  YD
  INCH
}

"""An enumeration."""
enum AreaUnitsEnum {
  SQ_CM
  SQ_M
  SQ_KM
  SQ_FT
  SQ_YD
  SQ_INCH
}

"""An enumeration."""
enum VolumeUnitsEnum {
  CUBIC_MILLIMETER
  CUBIC_CENTIMETER
  CUBIC_DECIMETER
  CUBIC_METER
  LITER
  CUBIC_FOOT
  CUBIC_INCH
  CUBIC_YARD
  QT
  PINT
  FL_OZ
  ACRE_IN
  ACRE_FT
}

"""_Any value scalar as defined by Federation spec."""
scalar _Any

"""_Entity union as defined by Federation spec."""
union _Entity = App | Address | User | Group | ProductVariant | Product | ProductType | Collection | Category | ProductMedia | PageType

"""_Service manifest as defined by Federation spec."""
type _Service {
  sdl: String
}
